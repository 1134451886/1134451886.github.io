<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>腾讯云CDN加速4everland博客</title>
      <link href="posts/95f0.html"/>
      <url>posts/95f0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于一些众所周知的原因……Gitee的pages服务开启了内容审核，于是我之前原本好好地在Gitee上展示的内容都被枪毙掉了……于是痛定思痛，决定不再使用Gitee这种国内的博客服务，而是转投到4everland的怀抱。</p></blockquote><p>因为4everland可以直接部署github博客的内容，所以按照提示进行一些简单操作就可以直接完成部署。这里贴出4everland的网站地址：<a href="https://dashboard.4everland.org/overview">4EVERLAND</a>，这里不再赘述。</p><p>下面详细介绍在使用腾讯云CDN加速4everland博客遇到的问题和解决办法：</p><p>腾讯云CDN在缓存源站内容时，会先检查源站headers的<code>Cache control</code>字段，如果为<code>no-cache</code>不缓存任何内容，而4everland博客默认就是<code>no-cache</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.zyskys.com/blogImage/QQ%E6%88%AA%E5%9B%BE20230808171147.jpg" alt="4everland默认no-cache"></p><p>所以，必须在腾讯云CDN的设置中强制缓存源站内容，操作步骤如下：</p><p>1.在节点缓存过期配置中，点击修改缓存配置<img src= "/img/loading.gif" data-lazy-src="https://image.zyskys.com/blogImage/20230808165903.png"></p><p>2.将缓存配置修改为<code>强制缓存</code><img src= "/img/loading.gif" data-lazy-src="https://image.zyskys.com/blogImage/20230808170207.png"></p><p>此时，等待腾讯云CDN重新部署完成，再次访问即可。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 博客 </tag>
            
            <tag> 腾讯云CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见了，所有的EVAGELION！</title>
      <link href="posts/5c8d.html"/>
      <url>posts/5c8d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>说不清EVA哪里吸引我，也许是猎奇，也许是机设，又或是精致的作画。</p><p>作为00后是直接从新剧场版《序》开始看的，之后是《破》、《Q》和这一部终章。</p><p>同类的作品还喜欢《高达》和《攻壳机动队》。</p></blockquote><p>这一次真的是结束了，「再见了，所有的EVAGELION！」。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813193128.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813193317.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813193414.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813193525.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813193639.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813193717.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813193904.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813194153.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813194245.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813194445.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813194532.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813194603.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813195508.jpg" alt="EVA终章"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210813195537.jpg" alt="EVA终章"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pico-UI交互实现</title>
      <link href="posts/6376.html"/>
      <url>posts/6376.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为比赛原因，需要使用PicoSDK进行Unity VR的开发，又由于网络上资料比较少，很多坑都要自己踩。于是有了这篇文章，把Pico VR开发踩过的坑都记录下来。</p><p>——开发过程使用的PicoSDK版本为<code>2.8.10</code></p></blockquote><h3 id="一-UI交互"><a href="#一-UI交互" class="headerlink" title="一.UI交互"></a>一.UI交互</h3><p>关于Pico的UI交互逻辑怎么实现，官方在GitHub上只给了一个Demo，没有任何说明和文字描述……，这让我一开始根本摸不着头脑？？</p><p>后面通过查阅大量教程和资料，并且实践多次总结得出以下几个步骤：</p><ul><li>1.首先删除场景自带的<code>Main Camera</code></li><li>2.添加预制体<code>Pvr_UnitySDK</code>，并且把预制体手柄组件<code>ControllerManager</code>放入<code>Pvr_UnitySDK</code>的子物体<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210715131518.png"></li><li>3.在<code>Pvr_UnitySDK</code>下的<code>Event</code>物体上添加<code>Pvr_Input Module</code>组件（这一步很关键）<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210715132103.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210715132120.png">Confirm Btn就是你要设定的跟UI交互的按键。</li><li>在需要交互的UI Canvas（画布）上添加<code>Pvr_UI Canvas</code>组件（同样很关键），并且要绑定<code>Canvas</code>组件的<code>Event Camera</code><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210715132728.png">支持的UI组件有Button、Slider、Toggle，Canvas下的Button等UI，要和Canvas在<strong>一个平面上</strong>。即不要拖动交互UI到其他地方。（通过测试发现Pvr_UI Canvas会给Canvas添加一个盒型碰撞体用于检测射线，所以如果按钮放到这个平面之外肯定就是无法交互的）</li></ul><p>PS.经过反复测试发现，Pico手柄的射线与准星并不准，要把官方的Demo脚本<code>Pvr_Controller Demo</code>添加上去并给<code>Head set Controller（这个可以随便赋值一个空物体只要它不为「null」</code>、<code>Controller 0</code>、<code>Controller 1</code>赋值，它的手柄射线和准星才是完全匹配的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210717131014.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> PicoVR </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 组件学习笔记</title>
      <link href="posts/6b37.html"/>
      <url>posts/6b37.html</url>
      
        <content type="html"><![CDATA[<h2 id="Rigidbody组件解析"><a href="#Rigidbody组件解析" class="headerlink" title="Rigidbody组件解析"></a>Rigidbody组件解析</h2><h3 id="一-属性"><a href="#一-属性" class="headerlink" title="一.属性"></a>一.属性</h3><h4 id="1-Mass-「质量」"><a href="#1-Mass-「质量」" class="headerlink" title="1.Mass 「质量」"></a>1.Mass 「质量」</h4><p>设置物体的质量，也就是重量。质量单位是KG。</p><h4 id="2-Drag-「阻力」"><a href="#2-Drag-「阻力」" class="headerlink" title="2.Drag 「阻力」"></a>2.Drag 「阻力」</h4><p>物体所受的空气阻力，0表示无阻力，值很大时物体会停止运动。</p><h4 id="3-Angular-Drag-「角阻力」"><a href="#3-Angular-Drag-「角阻力」" class="headerlink" title="3.Angular Drag 「角阻力」"></a>3.Angular Drag 「角阻力」</h4><p>受到扭曲力时的空气阻力，0表示无阻力，值很大时物体会停止运动。</p><h4 id="4-Use-Gravity-「是否使用重力」"><a href="#4-Use-Gravity-「是否使用重力」" class="headerlink" title="4.Use Gravity 「是否使用重力」"></a>4.Use Gravity 「是否使用重力」</h4><h3 id="二-方法"><a href="#二-方法" class="headerlink" title="二.方法"></a>二.方法</h3><h4 id="1-使用刚体移动物体"><a href="#1-使用刚体移动物体" class="headerlink" title="1.使用刚体移动物体"></a>1.使用刚体移动物体</h4><p><code>Rigidbody.MovePosition(Vector3)</code>：使用刚体移动物体的位置。</p><p><code>Vector3</code>还需加上自身位置。</p><p>使用刚体移动物体，物体是根据世界坐标系的方向移动的。</p><p><code>使用刚体移动物体，物体会触发物理相关的事件</code>。</p><h4 id="2-AddForce"><a href="#2-AddForce" class="headerlink" title="2.AddForce()"></a>2.AddForce()</h4><h5 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h5><p>给刚体添加一个力，让刚体按<code>「世界坐标系」</code>进行运动。</p><h5 id="②代码"><a href="#②代码" class="headerlink" title="②代码"></a>②代码</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rigidbody.AddForce(Vector3,ForceMode);</span><br></pre></td></tr></table></figure><p>Vector3：力的方向和大小；</p><p>ForceMode：力的模式<code>「enum类型」</code>。</p><h4 id="3-AddRelativeForce"><a href="#3-AddRelativeForce" class="headerlink" title="3.AddRelativeForce()"></a>3.AddRelativeForce()</h4><h5 id="①作用-1"><a href="#①作用-1" class="headerlink" title="①作用"></a>①作用</h5><p>给刚体添加一个力，让刚体按<code>「自身坐标系」</code>进行运动。</p><h5 id="②代码-1"><a href="#②代码-1" class="headerlink" title="②代码"></a>②代码</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rigidbody.AddRelativeForce(Vector3,ForceMode);</span><br></pre></td></tr></table></figure><p>Vector3：力的方向和大小；</p><p>ForceMode：力的模式「enum类型」。</p><p>PS.如果运用在球体上，球体滚动旋转会导致自身坐标系方向发生改变，于是会像这样来回滚动。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210517194245.gif" alt="给球体施加AddRelativeForce"></p><h3 id="4-FixedUpdate"><a href="#4-FixedUpdate" class="headerlink" title="4.FixedUpdate()"></a>4.FixedUpdate()</h3><p>固定更新方法。</p><p>所有和<code>物理相关</code>的操作，代码都要写在<code>FixedUpdate()</code>方法体内。</p><p>固定更新的时间间隔是0.02秒，1秒执行50次。</p><p>Edit-&gt;Project Settings-&gt;Time面板中的Fixed Timestep参数设置。</p><p>Update()方法是每一帧执行一次。</p><p>画面每渲染完一次，就是一帧，每帧的时间是不固定的。</p><p><strong>在Update()方法中执行物理操作，会出现卡顿的情况。</strong></p><h2 id="碰撞体组件"><a href="#碰撞体组件" class="headerlink" title="碰撞体组件"></a>碰撞体组件</h2><p>使用刚体移动的物体，与场景中其他的物体相碰撞：</p><p>其实是碰撞的目标物体的<code>「碰撞体」</code>组件，也就是<code>Collider</code>。</p><p>另外和目标物体碰撞的，是我们移动的物体的自身的「碰撞体」组件。</p><p>碰撞体可以理解为我们的“外骨骼”。</p><p>模型只要加了刚体就必须要加碰撞体，否则没有意义。</p><h3 id="Box-Collider「盒型碰撞体」"><a href="#Box-Collider「盒型碰撞体」" class="headerlink" title="Box Collider「盒型碰撞体」"></a>Box Collider「盒型碰撞体」</h3><h4 id="①简介"><a href="#①简介" class="headerlink" title="①简介"></a>①简介</h4><p>盒子碰撞体，形状是立方体形，用于包裹类似“立方体”的模型，比如：盒子，箱子，门，房子等。</p><h4 id="②组件属性"><a href="#②组件属性" class="headerlink" title="②组件属性"></a>②组件属性</h4><p>Center 「中心点」</p><p>设置Box Collider的中心点</p><p>Size 「大小」</p><p>设置Box Collider的大小</p><h3 id="Sphere-Collider「球形碰撞体」"><a href="#Sphere-Collider「球形碰撞体」" class="headerlink" title="Sphere Collider「球形碰撞体」"></a>Sphere Collider「球形碰撞体」</h3><h4 id="①简介-1"><a href="#①简介-1" class="headerlink" title="①简介"></a>①简介</h4><p>球形碰撞体，形状是球形，用于包裹类似“球形”的模型</p><h4 id="②组件属性-1"><a href="#②组件属性-1" class="headerlink" title="②组件属性"></a>②组件属性</h4><p>Radius「半径」</p><p>设置Sphere Collider的大小</p><h3 id="Capsule-Collider「胶囊碰撞体」"><a href="#Capsule-Collider「胶囊碰撞体」" class="headerlink" title="Capsule Collider「胶囊碰撞体」"></a>Capsule Collider「胶囊碰撞体」</h3><h4 id="①简介-2"><a href="#①简介-2" class="headerlink" title="①简介"></a>①简介</h4><p>胶囊碰撞体，形状是胶囊状，用于包裹“胶囊形”的模型。</p><h4 id="②组件属性-2"><a href="#②组件属性-2" class="headerlink" title="②组件属性"></a>②组件属性</h4><p>Height「高度」</p><p>设置Capsule Collider的高度</p><p>Direction「方向」</p><p>设置Capsule Collider的高度方向「轴向」</p><h3 id="Mesh-Collider「网格碰撞体」"><a href="#Mesh-Collider「网格碰撞体」" class="headerlink" title="Mesh Collider「网格碰撞体」"></a>Mesh Collider「网格碰撞体」</h3><h4 id="①简介-3"><a href="#①简介-3" class="headerlink" title="①简介"></a>①简介</h4><p>网格碰撞体，用于包裹复杂结构的模型。</p><h4 id="②组件属性-3"><a href="#②组件属性-3" class="headerlink" title="②组件属性"></a>②组件属性</h4><p>Mesh「网格」</p><p>根据指定的网格，生成碰撞体。</p><h3 id="碰撞监测与处理"><a href="#碰撞监测与处理" class="headerlink" title="碰撞监测与处理"></a>碰撞监测与处理</h3><h4 id="物理碰撞方法："><a href="#物理碰撞方法：" class="headerlink" title="物理碰撞方法："></a>物理碰撞方法：</h4><p>1.<strong>OnCollisionEnter</strong></p><p>碰撞开始执行一次。</p><p>2.<strong>OnCollisionExit</strong></p><p>碰撞结束执行一次。</p><p>3.<strong>OnCollisionStay</strong></p><p>碰撞中一直执行。</p><h4 id="触发器碰撞监测「Trigger」"><a href="#触发器碰撞监测「Trigger」" class="headerlink" title="触发器碰撞监测「Trigger」"></a>触发器碰撞监测「Trigger」</h4><p>1.<strong>OnTriggerEnter</strong></p><p>2.<strong>OnTriggerExit</strong></p><p>3.<strong>OnTriggerStay</strong></p><p>触发器不触发相关物理效果，由刚体操作的物体会直接穿过触发器而不进行碰撞。</p><h3 id="模型中心点"><a href="#模型中心点" class="headerlink" title="模型中心点"></a>模型中心点</h3><p>模型身上的坐标轴的中心点，也就是我们模型的中心点。</p><p>模型位置、旋转、缩放都是基于模型的中心点来进行变化的。</p><p><strong>改变模型中心点</strong></p><p>创建一个空物体，创建父子关系，通过父物体来控制子物体。</p><p>也就间接的改变了模型的中心点。</p><p><strong>中心点工具</strong></p><p>Center：当选中两个模型的时候，设置为「Center」，模型组的中心点就在两个模型的中间中心位置。</p><p>Pivot：当选中两个模型的时候，设置为「Pivot」，模型组的中心点就在后选中的模型的中心点位置。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 开发 </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>站长的自述</title>
      <link href="posts/345.html"/>
      <url>posts/345.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>突然发现自己已经一个多月没有更新个人网站了，主要原因是因为我开！学！了！忙着在学校安顿下来，并且平时都在上课，基本上没什么时间写博客了。<del>（主要还是懒！）</del></p><p>今天想着已经安顿好了一段时间了，那就开一篇来跟大家聊聊。</p></blockquote><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>我是一个普通大专院校的大二学生，计算机虚拟现实技术专业，平时的专业课有Unity3D、Affter Effcts、PhotoShop、3D MAX、摄影基础等等……，如果说实话，我将来是想从事游戏制作行业程序之类的，因为我本身就喜欢玩电子游戏，在同学们都沉迷王者荣耀、吃鸡、联盟的时候，我却喜欢那些制作精良的单机游戏，像近年的“只狼·影逝二度”、“黑暗之魂3”、“鬼泣5”之类的，我非常欣赏像<code>宫崎英高</code>这样的游戏制作人，他的游戏总会给你带来惊喜。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210314171641.jpg" alt="只狼·影逝二度"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210314172115.jpeg" alt="宫崎英高"></p><h3 id="目前的状态"><a href="#目前的状态" class="headerlink" title="目前的状态"></a>目前的状态</h3><p>在学校过着三点一线的生活，寝室、教室、机房，在这里非常感谢我的专业老师能把机房里的一间闲置的房间给我们使用，这让我有了放置台式电脑的空间，并且环境也相当不错。所以我除了上课和在宿舍休息之外，其余的时间都会待在这里生活和学习。</p><p>下面上图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210314171851.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210314172212.jpg"></p><p>折腾家里的旧电脑，装上了黑苹果系统带到学校里来，这里不得不给顺丰点个赞👍，包装和运送都非常给力，就是运费有点小贵。</p><h3 id="未来的方向"><a href="#未来的方向" class="headerlink" title="未来的方向"></a>未来的方向</h3><p>首先，这个博客网站我会持续的更新维护下去，尽管没有收益还让我倒贴，但是谁让我喜欢它呢。况且一年一百多的费用并不是很高，我还是能够接受的。</p><p>未来我希望能够从事游戏开发的工作，我知道这个难度非常高，但我想挑战看看。也希望能够结识一些志同道合的朋友，一起进步。</p><p>希望这个网站能陪伴着我一起成长，我也见证着它的蜕变。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 自述 </tag>
            
            <tag> 唠嗑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWA渐进式浏览-让网页像原生APP一般流畅</title>
      <link href="posts/8aa6.html"/>
      <url>posts/8aa6.html</url>
      
        <content type="html"><![CDATA[<h2 id="PWA是什么？"><a href="#PWA是什么？" class="headerlink" title="PWA是什么？"></a>PWA是什么？</h2><blockquote><p>PWA（Progressive Web App）是一种理念，使用多种技术来增强web app的功能，可以让网站的体验变得更好，能够模拟一些原生功能，比如通知推送。在移动端利用标准化框架，让网页应用呈现和原生应用相似的体验。</p><p>运用现代的 Web API 以及传统的渐进式增强策略来创建跨平台 Web 应用程序。这些应用无处不在、功能丰富，使其具有与原生应用相同的用户体验优势。</p></blockquote><p>简单来说，它是一种新技术能让网页运行如<code>原生应用</code>般的流畅体验。当然，前提是浏览器和站点都使用了PWA技术。</p><p>目前已经支持PWA的浏览器有：</p><ul><li>火狐Firefox</li><li>谷歌Google Chrome</li><li>微软Microsoft Edge</li></ul><p>使用了PWA技术的站点：<code>Youtube</code>、<code>Twitter</code>……</p><p>所以我们可以在YouTube使用PWA啦！笔者赶紧上手体验了一下，的确流畅很多，而且界面变得非常美观、精致。让笔者爱不释手，只是可惜，目前完全使用PWA技术的网站并不多，国内各大网站几乎没有完全适配PWA的站点。</p><p>PWA这么好用，稍微有点担心APP开发工程师们的饭碗……（手动滑稽</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a>Microsoft Edge</h3><p>这里以安装YouTube作参考，其他网站都是一样的操作。</p><p>点击浏览器窗口右上角的三个点=&gt;<code>应用</code>=&gt;<code>安装Youtube</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210201141348.png" alt="安装youtube"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210201141454.png" alt="点击”安装“"></p><p>安装完成之后就有了<code>YouTube APP</code>，它能像原生应用程序一样，运行起来非常流畅。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210201141718.png" alt="安装完成"></p><p>PS：支持、但是不完全支持的站点在安装PWA后，会出现跳转页面依然使用浏览器打开的情况。这表示当前的站点并不完全支持PWA。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210201143410.png" alt="本站支持PWA技术"></p><p><strong>最后，郑重宣布！！！</strong></p><p><strong>本站全站支持PWA技术！只需要使用浏览器安装本站点即可享受如原生应用般的流畅体验！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS配置Unity、VSCODE开发环境</title>
      <link href="posts/90a1.html"/>
      <url>posts/90a1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这几天给家里的旧电脑装了黑苹果系统，要配置macOS的Unity开发环境，在配置的过程中遇到了一些问题在这里记录下来，希望以后在遇到的时候能够有笔记可以查阅，不至于在同一个问题上反复栽跟头。</p></blockquote><h2 id="安装unity"><a href="#安装unity" class="headerlink" title="安装unity"></a>安装unity</h2><p>这一步真没啥好说的，进入unity<a href="https://unity.cn/">官网</a>，点击<code>下载Unity</code>进入到下载页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131161435.png" alt="点击进入下载页面"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131161801.png" alt="下载页面"></p><p>然后选择需要的版本下载安装。</p><p>PS：如果打开慢的话，可能是DNS服务器的缘故。可以尝试手动修改DNS服务器，改成<code>114.114.114.114</code>或者<code>114.114.114.110</code>这两个公有DNS服务器比较快、比较稳定。</p><h2 id="Homebrew安装-net-core"><a href="#Homebrew安装-net-core" class="headerlink" title="Homebrew安装.net core"></a>Homebrew安装<code>.net core</code></h2><p>这里我是使用macOS独有的Homebrew包管理器安装的<code>.Net Core</code>，打开<code>终端</code>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install dotnet-sdk</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131162733.png" alt="HomeBrew安装.Net Core"></p><p>这里我已经安装。PS：使用HomeBrew需要挂梯子，不然速度会非常感人……。</p><h2 id="配置VSCODE"><a href="#配置VSCODE" class="headerlink" title="配置VSCODE"></a>配置VSCODE</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131163217.png" alt="vscode必要的插件"></p><p>这4个插件是必要的，安装完插件重启VSCODE，如果还没有unity的代码提示的话，检查一下输出窗口是否有如下语句：</p><p><code>Downloading package &#39;OmniSharp for OSX, Version=1.37.7beta.16&#39;(50067 KB)..................</code></p><p>这是在下载一个插件包，安装完成之后才会有unity的代码提示，实测如果没挂梯子速度一样会非常感人，会下载相当长一段时间。</p><h2 id="更改unity默认编辑器"><a href="#更改unity默认编辑器" class="headerlink" title="更改unity默认编辑器"></a>更改unity默认编辑器</h2><p>unity的mac版本跟Windows版本的UI布局稍微有点不一样，在mac版本中，首选项设置在左上角的<code>Unity</code>=&gt;<code>Preferences</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131164257.png" alt="unity首选项设置"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131164546.png" alt="点击Browse浏览文件"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131164628.png" alt="选择app里的vscode"></p><p>然后选择VSCODE，点击<code>Open</code>更改为默认编辑器。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131164853.png"></p><p>然后就可以在VSCODE里面愉快的敲代码了！甚至在Visual Studio中都没有的代码提示它也有，比如：<code>Awake</code>、<code>OnMouseDown</code>、<code>OnMouseDrag</code>等等这些方法名。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210131165047.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在整个过程，最最重要的还是梯子，如果没有梯子的话对于开发者来说真的太不方便了，很多功能都需要通过梯子来跟外部的网络进行连接才能正常使用。而且现在机场的价格已经是非常亲民了，每个月几块钱而已，这里我不推荐任何机场免得有打广告的嫌疑，如果没有梯子那简直是噩梦。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 日常 </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2020年度摄影总结</title>
      <link href="posts/1129.html"/>
      <url>posts/1129.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2020年是个特殊的一年，不是因为新冠疫情，而是对我来说，它是我人生中拥有第一台相机的这一年。之前我有在博客上提到过关于我买的相机（<code>尼康的D3500</code>），喜欢上摄影这项活动实属一次偶然，当时因为身上罹患肺结核被迫要休学一年，在家治疗的期间觉得天天坐电脑前，打打游戏、看看番剧、吃了睡睡了吃，过得实在有点没意思。于是我出去找工作，遇到了老板，而老板有一台Sony α6400，我时常把玩，起初我也觉得有手机了还要相机干嘛？直到这个时候，我才明白专业相机的所带来的差别。也是那个时候我心中下了一个决定：我要有一台相机。</p><p>有人说，每一次摄影都是一场追光之旅。按下快门，捕捉光的轨迹。我是在2020年的六月份刚开学时买的相机，刚接触相机时，惊叹于它所带来的超高的画质，精细的细节和质感。我喜欢它柔美的虚化，具有层次感的景深。这一年来拍了不少照片，就拿几张我认为比较好的照片放出来展示一下，并且还会写上Exif信息以供摄影同好们交流。</p><h2 id="2020年按下的快门"><a href="#2020年按下的快门" class="headerlink" title="2020年按下的快门"></a>2020年按下的快门</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715154459.jpg" alt="1/320s f/1.8 ISO500 50mm"></p><p>这是用同学的EOS RP+50mm小痰盂拍的，木质的长椅，质感看起来还不错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122172208.jpg" alt="1/200s f/3.5 ISO400 18mm"></p><p>这一张是在长沙锦泰广场的城际列车候车室拍的，熙熙攘攘的人群，偌大的候车室，18mm（等效27mm）的广角刚好能尽收眼底。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122173843.jpg" alt="1/2500s f/5 ISO100 50mm"></p><p>阴天的张家界，稍微有点雾气，秀美的山体有一种云雾缭绕的仙境般的美感。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122175659.jpg" alt="1/250s f/8 ISO100 18mm"></p><p>时间来到了8月份，因为家里老人需要陪伴，所以回了在乡下的老家。这里的人们每天辛苦劳作就为了地里的收成，看起来今年的收成还行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122180402.jpg" alt="1/250s f/5.6 ISO250 40mm"></p><p>无意间发现了一只停驻在折枝处的红色蜻蜓，滑动变焦环拉到合适的位置，对焦、按下快门，便捕捉到了这一张画面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122181625.jpg" alt="1/250s f/5.6 ISO200 40mm"></p><p>小姨家的女儿，算是我的表妹，非常可爱非常活泼好动，而且很有表现欲。这张我并不认为我拍的好，是模特非常给力(￣▽￣*)</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122182527.jpg"></p><p>谁家养的一头牛，哞~（滑稽）。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122183938.jpg" alt="1/320s f/1.8 ISO100 35mm"></p><p>这张同样是在乡下，定焦镜头的画质比变焦镜头要更加锐利，大光圈带来的虚化更加明显。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122184401.jpg" alt="1/200s f/2.8 ISO100 微距"></p><p>这张是初次使用<code>微距镜头</code>所拍摄的，这颗镜头的锐利比起上面那个定焦还要夸张。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122185700.jpg" alt="1/200s f2.8 ISO100 微距"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122185906.jpg" alt="1/200s f/2.8 ISO100 微距"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122190805.jpg" alt="1/60s f/4.5 ISO3200 40mm"></p><p>在湘江扫街，刚好捕捉到这一幕。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122191222.jpg" alt="20s f/22 ISO100 第一次尝试长曝光"></p><p>架好三脚架，光圈拨到最小，按下快门开始长曝光。长曝光可以把波涛汹涌的水面抚平，拍出很美的倒影。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122191858.jpg" alt="10s f/36 ISO100"></p><p>这里尝试拍产品的那种风格，也是用三脚架和长曝光，然后人为打光。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122192148.jpg" alt="堆栈"></p><p>这张用三脚架和长曝光，拍很多张分别从不同方向打光，最后堆栈成一张。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122192506.jpg" alt="1/60s f/2.8 ISO400 微距"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122192731.jpg" alt="1/250s f/2.8 ISO800 微距"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122193040.jpg" alt="1/4000s f/1.8 ISO100 35mm定焦"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122193517.jpg" alt="1/1000s f/1.8 ISO100 35mm定焦"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122194226.jpg" alt="1/250s f/1.8 ISO100 35mm定焦"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122194802.jpg" alt="1/500s f/2.8 ISO250 200mm"></p><p>这是用我们学校记者团的70-200mm镜头拍的，200mm的焦距能拉非常近，适合打鸟。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122200615.jpg" alt="30s f/22 ISO100 58mm"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122201059.jpg" alt="1/100s f/5.6 ISO100 98mm"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122201524.jpg" alt="20s f/22 ISO100 18mm"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上这些就是我今年刚接触摄影拍的还算比较好的照片啦，摄影果然还是要多拍多练，慢慢就有感觉了。想想刚拿到相机那个时候拍出来啥也不是，慢慢地，随着对器材越来越熟悉，对ISO、快门速度、光圈、焦距……这样的参数理解越来越深，后面就能自然而然的知道该怎么调整曝光，该怎样取景。</p><p>这就是我的2020年摄影总结，希望自己能继续热爱摄影、无限进步！</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10蓝牙耳机和麦克风无法同时使用(附解决方法)</title>
      <link href="posts/a38.html"/>
      <url>posts/a38.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>昨天连上蓝牙耳机打CSGO，发现耳机有声音，但是麦克风讲不了话。折腾了一番，把声音设置里的输入设备改成了蓝牙耳机那个，成了，但是耳机又听不到声音了，？？？……</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210119184257.png" alt="声音设置改麦克风设备"></p></blockquote><h2 id="网上找解决方案"><a href="#网上找解决方案" class="headerlink" title="网上找解决方案"></a>网上找解决方案</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210119184432.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210119184536.png"></p><p>基本上就是说都使用<code>hands free</code>模式，但是这个音质……太伤耳朵了。那还不如不连蓝牙耳机，于是我继续苦苦寻找，终于给我找到了最终的解决方法。</p><h2 id="完美解决"><a href="#完美解决" class="headerlink" title="完美解决"></a>完美解决</h2><p>据说这是Win10系统更新遗留下来的问题，只要以管理员运行<code>CMD</code>输入下面这一段命令，扫描完毕重启之后就能解决！（亲测有效）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfc/scannow</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210119185141.png"></p><p>链接：<a href="https://tieba.baidu.com/p/6426685009">https://tieba.baidu.com/p/6426685009</a></p><hr><p><strong>2021.9.7更新</strong></p><p>PS.由于蓝牙技术本身的限制不能同时使用高清音频和麦克风，所以使用麦克风的时候输出音频会变成单声道……目前还没有解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>副团の宝贵经验</title>
      <link href="posts/38396.html"/>
      <url>posts/38396.html</url>
      
        <content type="html"><![CDATA[<h3 id="学校推文"><a href="#学校推文" class="headerlink" title="学校推文"></a>学校推文</h3><blockquote><p>副团：确定好选题之后，不要无脑上操作（一顿乱写）<br>我觉得正确做法是——</p></blockquote><h4 id="第一步：分清楚自己的推文是什么类型的。"><a href="#第一步：分清楚自己的推文是什么类型的。" class="headerlink" title="第一步：分清楚自己的推文是什么类型的。"></a>第一步：分清楚自己的推文是什么类型的。</h4><p>在学校里面的推文常见的有<br><code>新闻类型</code>、<code>大型活动类</code>、<code>比赛宣传类</code>、<code>征集类</code>、<code>人物介绍类</code>、<code>获奖类</code>的推文、<code>美图类</code>的推文、<code>校园实际</code>的推文、<code>搞笑类</code>的推文。<br>你确定好自己的推文类型，可以看之前的推文同类型的是怎么排版的？然后文字是怎么写的？出错的几率会小一点，我当然鼓励大家创新，但是如果不能做到创新，起码不能瞎搞。（如果不清楚是什么类型欢迎问我）</p><h4 id="第二步：明确自己的推文方向"><a href="#第二步：明确自己的推文方向" class="headerlink" title="第二步：明确自己的推文方向"></a>第二步：明确自己的推文方向</h4><p>明确自己的推文方向是以<code>图片</code>为重，还是以<code>文字</code>为重！（真的很重要）</p><h4 id="第三步：想好大纲"><a href="#第三步：想好大纲" class="headerlink" title="第三步：想好大纲"></a>第三步：想好大纲</h4><p>一定要在脑子里或者手机本上打好结构比如说你的推文是哪个位置放图片？文章是用总分总吗？一般都推文惯例都是就是一段开头，中插图文然后到结尾。</p><h4 id="图片方面："><a href="#图片方面：" class="headerlink" title="图片方面："></a>图片方面：</h4><p>推文里一般都是放横图的<br>有领导的推文，尽量都是正面的特写，然后都会占大版面，带点脑子都应该知道，你是以图片为主的推文，那你的图片质量一定要好，质量好的图片一般都是用占满屏幕，就是说不用样式，不用那种几张拼在一起，如果说图片质量不好，我们再去选用那种左右或者上下这种模板。</p><h4 id="标题方面："><a href="#标题方面：" class="headerlink" title="标题方面："></a>标题方面：</h4><p>老师口味不定的 一定要在做的时候多备上几个以供大家选择不要因为一个破标题害自己在发送前加班1小时。</p><h4 id="封面图："><a href="#封面图：" class="headerlink" title="封面图："></a>封面图：</h4><p>能用实景就用实景老师喜欢看人物封面<br>实在不行的情况常用创客贴做封面<br>点击创客贴搜索新媒体配图“公众号首图”</p><h4 id="排版方面："><a href="#排版方面：" class="headerlink" title="排版方面："></a>排版方面：</h4><p>首尾图固定的复制前篇推文就行</p><ul><li><p>字体：<code>微软雅黑</code></p></li><li><p>常用字间距是<code>1.75</code>（这里说一下后台里的字间距2就是135的1.75</p></li><li><p>行间距<code>1.75</code></p><p>段间距一般是一行<br>如果是一大段文字一行觉得太宽那就用段前距/段后距15<br>字号一般在<code>14</code>或者<code>15</code>（全篇最好统一字号）<br>图片与文字的距离：一行<br>往期精选字号是在<code>14</code> 段前段后距是<code>20</code>（固定的<code>三个往期</code>）往期精选的图片尽量统一图片高度（就是尽量一样扁）</p></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>然后我还总结了一下，做推文过程中常见的情况：<br>一篇推文，两个人负责，一个人文字，就总会有人跟我说图片不够，或者说是图片还没有处理好这种情况不要说等硬要等到别人图片有了，就算你要看图片写文字，你是不是可以把开头结尾写出来？</p><h4 id="检查错误"><a href="#检查错误" class="headerlink" title="检查错误"></a>检查错误</h4><p>还有就是图文都已经确定好了，老师没有回消息的情况，那你就可以先发在我们的小群里面，就让大家帮忙检查错误，然后老师回你的时候，你就不用再去浪费时间检查错误。</p><p>现在有一个情况，就是还有很多人不会检查，先不说排版，就不会检查错误，检查错误，<br>首先肯定是要阅读全文，有没有错别字？有没有语句不通？或者是语序语境？（比如说之前美好瞬间那片的开头一开始就用阳光作主语，就会给别人有误导性）</p><p>检查完文字的通顺和错别字，你就可以看排版，<br>就是首尾图有没有加？<br>有没有图片？<br>你觉得色调太暗，需要调整，<br>有没有文字间距？你觉得太紧密了，<br>有没有字突然就变大了？<br>左右有没有对齐？颜色有没有统一？<br>除非说有需要用换颜色突出重点的。</p><p>超链接（往期精选）那块的排版一定要看，然后有的时候放了图片，忘记插抄链接是跳转不了的以及标题错别字是大家容易忽略的。</p><p align="right"><i>转载自：香芋地瓜团 01-08聊天记录</i></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pico开发—常用API汇总</title>
      <link href="posts/41727.html"/>
      <url>posts/41727.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    由于今年的VR职业技能竞赛突然变更VR设备以及相关VR开发的SDK，由原来的Samsung Gear（Oclus SDK）变更为Pico G2 4K（Pico SDK）。</p><p>​    所以，理所当然的我们只能重新学习Pico SDK的使用了，但是Pico它本身的产品的知名度不是很高，网上能找到的资料也非常有限。官方提供的开发文档也只是粗略的列举了部分API，剩下的只能靠自己去啃SDK的源码了。（C#菜鸡落泪）</p></blockquote><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p>硬件按键说明：<a href="http://sdk.picovr.com/docs/sdk/cn/chapter_five.html">http://sdk.picovr.com/docs/sdk/cn/chapter_five.html</a> （含头盔按键和手柄按键）</p><h3 id="手柄类"><a href="#手柄类" class="headerlink" title="手柄类"></a>手柄类</h3><ul><li><h4 id="APP按键"><a href="#APP按键" class="headerlink" title="APP按键"></a>APP按键</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201216163443.png">按下<code>APP</code>按键时调用</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Controller.UPvr_GetKeyDown(<span class="number">0</span>,Pvr_KeyCode.APP))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//此处写方法体</span></span><br><span class="line">    test.text = <span class="string">&quot;APP is on!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h4 id="Home按键"><a href="#Home按键" class="headerlink" title="Home按键"></a>Home按键</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201216164025.png">按下手柄上的<code>Home</code>键时调用</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Controller.UPvr_GetKeyDown(<span class="number">0</span>,Pvr_KeyCode.HOME))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//此处写方法体</span></span><br><span class="line">    test.text = <span class="string">&quot;home is on!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li><li><h4 id="TOUCHPAD触摸板"><a href="#TOUCHPAD触摸板" class="headerlink" title="TOUCHPAD触摸板"></a>TOUCHPAD触摸板</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201216165052.png">触摸板有多个API，有<code>Controller.UPvr_GetKeyDown(0,Pvr_KeyCode.TOUCHPAD)</code>触摸板被按下，<code>Controller.UPvr_IsTouching(0)</code>正在被触摸，以及<code>TouchPadClick</code>，还有触摸板滑动。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//触摸板滑动示例</span></span><br><span class="line"><span class="comment">//获取滑动</span></span><br><span class="line">SwipeDirection swipe = Controller.UPvr_GetSwipeDirection(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (swipe==SwipeDirection.SwipeDown)<span class="comment">//判断滑动方向是否向下</span></span><br><span class="line">        &#123;</span><br><span class="line">            test.text = <span class="string">&quot;swipe is down!&quot;</span>;</span><br><span class="line">            current_obj.transform.Rotate(Vector3.down);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (swipe==SwipeDirection.SwipeLeft)<span class="comment">//判断是否向左</span></span><br><span class="line">        &#123;</span><br><span class="line">            test.text = <span class="string">&quot;swipe is left!&quot;</span>;</span><br><span class="line">            current_obj.transform.Rotate(Vector3.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (swipe==SwipeDirection.SwipeRight)<span class="comment">//判断是否向右</span></span><br><span class="line">        &#123;</span><br><span class="line">            test.text = <span class="string">&quot;swipe is right&quot;</span>;</span><br><span class="line">            current_obj.transform.Rotate(Vector3.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (swipe==SwipeDirection.SwipeUp)<span class="comment">//判断是否向上</span></span><br><span class="line">        &#123;</span><br><span class="line">            test.text = <span class="string">&quot;swipe is up!&quot;</span>;</span><br><span class="line">            current_obj.transform.Rotate(Vector3.up);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr></li></ul><h3 id="头盔类"><a href="#头盔类" class="headerlink" title="头盔类"></a>头盔类</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201216170404.png"></p><p>调用方法与上面手柄按键的调用方法稍微有点不同，比如头盔的确认键：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//头盔确认键</span></span><br><span class="line"><span class="keyword">if</span> (Input.GetKeyDown(KeyCode.JoystickButton0))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>头盔按键的映射存在unity自带的input类中，头盔其余按键调用方式均与本示例一致。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android SDK Tools下载SDK</title>
      <link href="posts/52552.html"/>
      <url>posts/52552.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用Unity开发Android游戏的时候需要使用到Android的SDK，而用Android Studio下载SDK又没必要，所以在这里推荐一个Android SDK管理、下载工具。它就是Android SDK Manager。</p><p>下载地址：<a href="https://www.androiddevtools.cn/">https://www.androiddevtools.cn/</a></p></blockquote><h3 id="一-下载SDK-Tools"><a href="#一-下载SDK-Tools" class="headerlink" title="一.下载SDK Tools"></a>一.下载SDK Tools</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201213174942.png"></p><p>在网站如图所示位置，下载SDK Tools工具包，这个就是Android SDK Manager的本体。根据自身操作系统选择合适的版本。</p><h3 id="二-运行SDK-Manager-exe"><a href="#二-运行SDK-Manager-exe" class="headerlink" title="二.运行SDK Manager.exe"></a>二.运行SDK Manager.exe</h3><p>文件解压之后会看到如下目录，双击运行<code>SDK Manager.exe</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201213175323.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201213175501.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201213175748.png"></p><p>只勾选对应Android版本的<code>SDK Platform</code>这个包（这里显示我已经安装），注意：如果只需要用到Android SDK那么只要勾选<code>SDK Platform</code>就行，这个就是SDK包，其他一概不需要而且会非常占存储空间。然后点击<code>Install packages</code>进行下载安装。</p><p>比如我需要用到Android6.0版本的SDK，设置如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201213180424.png"></p><p>安装完成后配置系统变量，配置系统变量的方法就不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某些视频不显示IDM下载按钮？原因竟是这样！——教你如何使用IDM下载网络上的任何视频</title>
      <link href="posts/42947.html"/>
      <url>posts/42947.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>相信不少朋友会遇到某些视频网页没有显示IDM下载按钮的情况，其实这是因为有些特别的视频文件格式被IDM给忽略过滤掉了导致IDM没有检索到视频资源。那么理论上，你只要把这个格式加入到抓取规则内就可以下载这些资源。</p></blockquote><hr><h2 id="IDM无法下载的例子"><a href="#IDM无法下载的例子" class="headerlink" title="IDM无法下载的例子"></a>IDM无法下载的例子</h2><p>比如B站的一些老视频，如<code>“识途”</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028224326.png" alt="识途短片"></p><hr><center>紫罗兰MAD</center><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028224408.png" alt="紫罗兰MAD"></p><p>……等等，都没有显示IDM的下载按钮，也不只是B站存在这种情况，大名鼎鼎的YOUTUBE也有。</p><p>以至于我今天费尽心思想要下载某一个视频，从而终于让我发现了这个原因。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-使用IDM下载"><a href="#1-使用IDM下载" class="headerlink" title="1.使用IDM下载"></a>1.使用IDM下载</h3><p>打开IDM界面——”<code>下载</code>“</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028232206.png"></p><p>然后——”<code>选项</code>“——“<code>常规</code>”，“<code>自定义浏览器中的下载浮动条</code>”</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028232350.png"></p><p>点击“<code>添加</code>”，然后在内容框中输入“<code>*</code>”号，点击确定。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028232838.png"></p><p>然后确保打上“<code>√</code>”</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028233039.png"></p><p>做完这一步之后，刷新浏览器页面，你会发现熟悉的IDM下载按钮就出现了，多了一堆的下载选项，仔细查看你会发现有两个文件后缀名“<code>m4s</code>”比较大，这两个，一个是视频流，一个是音频流。没错，B站是采用的音视频分离。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028233234.png"></p><p>这俩文件都下载下来之后，用potplayer播放器打开可以播放，按下“<code>TAB</code>”键可以查看文件信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028233740.png"></p><h3 id="2-使用FFMPEG合并音视频"><a href="#2-使用FFMPEG合并音视频" class="headerlink" title="2.使用FFMPEG合并音视频"></a>2.使用FFMPEG合并音视频</h3><p>最后一步，因为下载下来的文件是音视频分离的，所以需要进行合并操作，使用ffmpeg进行合并操作非常简便，只需要一句代码搞定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &quot;文件1.m4s&quot; -i &quot;文件2.m4s&quot; -c:v copy -c:a copy &quot;识途.mp4&quot;</span><br></pre></td></tr></table></figure><p>把“<code>文件1.m4s</code>”、“<code>文件2.m4s</code>”替换成下载下来的那两个文件名即可，必须输入完整要带上扩展名。</p><p>成功合并之后：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201028235010.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下载 </tag>
            
            <tag> 视频 </tag>
            
            <tag> IDM </tag>
            
            <tag> 野生技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动设置V2Ray PAC代理模式访问P站、Telegram、Github等等</title>
      <link href="posts/60593.html"/>
      <url>posts/60593.html</url>
      
        <content type="html"><![CDATA[<h2 id="V2Ray的PAC代理手动设置"><a href="#V2Ray的PAC代理手动设置" class="headerlink" title="V2Ray的PAC代理手动设置"></a>V2Ray的PAC代理手动设置</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201021110648.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上冲浪就应该随心所欲，国家出于对国家安全层面的考量设立了GFW但不妨碍我们依然可以利用梯子访问外网体验网上冲浪的乐趣。</p><p>在使用V2Ray的过程中，我发现其自带的PAC过滤规则不尽完美，比如在PAC模式下访问某些国外网站依然是没有走PAC代理、无法访问或者访问速度巨慢无比。</p><ul><li>Pixiv（简称P站）</li><li>GitHub（程序猿的天堂）</li><li>Telegram（社交软件，感觉比QQ简洁、流畅，非常好用）</li><li>……</li></ul><h2 id="修改添加PAC代理"><a href="#修改添加PAC代理" class="headerlink" title="修改添加PAC代理"></a><del>修改</del>添加PAC代理</h2><p>字面意思，既然自带的PAC代理规则不够全面，那肯定是可以自己手动添加的，首先打开V2Ray——参数设置——用户PAC设置<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201021130601.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201021130710.png"></p><p>在下面填入<code>代理域名</code>或<code>IP地址</code>（每一条后面要加<code>,</code>逗号，最后一行可以不用）</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20201021130826.png"></p><ul><li><p>telegram.com（<code>代理telegram</code>另外还需要添加几个IP地址，见下方）</p></li><li><p>pixiv.net(<code>代理pixiv</code>)</p><p>pximg.net，</p><p>经测试发现，光代理<code>pixiv.com</code>还不够，还要代理<code>pximg.net</code>这个存放p站图片的域名</p></li><li><p>91.108.56.108,<br>149.154.175.53,<br>149.154.167.50,<br>149.154.167.51,<br>149.154.167.92,<br>149.154.167.151,   （<code>都是telegram的服务器IP地址，telegram部分功能会使用不同服务器</code>）</p></li><li><p>github.com(<code>代理GitHub</code>，github的全部功能还需要代理以下域名)</p><p>githubusercontent.com，</p><p>githubapp.com，</p></li></ul><p>设置完成之后，即使在PAC模式下也能愉快的网上冲浪了，不用反复切换全局模式和PAC模式。遇到想添加进PAC里的网站域名只要往里一丢就行了。</p><h3 id="踩坑（2021-1-18更新）"><a href="#踩坑（2021-1-18更新）" class="headerlink" title="踩坑（2021.1.18更新）"></a>踩坑（2021.1.18更新）</h3><p>今天因为要在B站看港澳台番剧，发现开了全局代理没有用，访问B站跟没走代理一样，反复调试之后发现是这一处的设置有问题，默认是<code>“绕过局域网和大陆”</code>，把它改成<code>“全局”</code>解决。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210118213048.png" alt="全局代理“失效”"></p><h3 id="查看网站需要代理的域名（2021-1-27更新）"><a href="#查看网站需要代理的域名（2021-1-27更新）" class="headerlink" title="查看网站需要代理的域名（2021.1.27更新）"></a>查看网站需要代理的域名（2021.1.27更新）</h3><p>比如在pixiv站，开启全局代理之后会发现加载速度完全不一样，通过仔细查看V2ray的日志可以发现，里面有一个<code>pximg.net</code>的奇怪域名。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210127194132.png" alt="查看V2ray日志"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210127194353.png" alt="使用浏览器开发者工具"></p><p>也可以通过浏览器的<code>F12</code>开发者工具查看，就像这样</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210127194852.gif" alt="使用浏览器开发者工具-2"></p><p>于是我们发现P站的图片是从<code>pximg.net</code>这个域名获取的，所以为了我们能快速的加载图片，我们要把<code>pximg.net</code>这个域名也加进V2ray的PAC规则里。</p><blockquote><p>以上只是拿P站举个例子，其他的国外网站如果加进PAC还是打开慢的话不妨试试这个方法，可能是还要加入其他的域名。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>在我因PAC模式规则不全，苦恼而在网上搜索相关教程的时候，没有找到相应的教程，当时还以为会没有办法去完善这个PAC。直到今天，打算仔细研究一下V2Ray的软件功能才发现可以自己添加PAC规则，怪不得没有教程，原来是因为太简单了……只要照着V2Ray软件本身的提示轻轻松松就能解决。我还稀里糊涂到网上到处找教程，-_-||</p><p>我写这个教程也算是为了帮助当时像我一样糊涂的人吧</p><p>如果觉得对你有帮助的话，可以通过下方按钮打赏，请站长吃颗糖。<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20210122224115.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年大二拉练</title>
      <link href="posts/13245.html"/>
      <url>posts/13245.html</url>
      
        <content type="html"><![CDATA[<h2 id="安院2020年大二军训拉练"><a href="#安院2020年大二军训拉练" class="headerlink" title="安院2020年大二军训拉练"></a>安院2020年大二军训拉练</h2><hr><blockquote><p>为满足同学们、老师们及各位需要使用本素材的同志们的需求设立本页面，所有照片均采用原图画质上传，在本页面直接<code>右击</code>——<code>保存图像</code>即可下载原图。</p><p>手机端<code>长按</code>——<code>保存图像</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924183110.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924183202.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924183257.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924183341.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924183810.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924183852.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924183942.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924184032.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924184258.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924184433.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924184521.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924184702.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924185105.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924185148.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924185149.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924220539.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924220630.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924220807.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924220924.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924221041.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924221203.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924221317.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924221433.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924221529.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924221958.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924222429.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924222637.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924222935.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924223341.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924223509.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924223559.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924223721.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924223804.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924223928.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924224038.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924224124.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924224735.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924224847.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924224959.JPG"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924225000.JPG"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924225001.JPG"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924225002.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924225535.JPG"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924225536.JPG"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924225537.JPG"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200924225538.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3892.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3893.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3894.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3895.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3896.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3897.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3900.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3901.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3904.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3905.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3906.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3907.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3908.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3909.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3910.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3911.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3912.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3913.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3914.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3915.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3916.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3917.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3918.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3920.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3921.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3923.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3924.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3925.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3926.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3927.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3928.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3929.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3930.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3932.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3933.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3935.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3936.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3937.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3938.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3940.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3941.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3945.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3950.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3951.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3952.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3953.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3954.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3955.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3956.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3957.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3959.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3960.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3961.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3962.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3963.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3964.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3965.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3966.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3967.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3968.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3969.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3970.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3972.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3973.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3974.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3975.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3977.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3978.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3985.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3987.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3988.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3989.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3990.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3991.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3992.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3993.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3994.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3995.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3996.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3997.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3998.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_3999.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4000.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4001.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4002.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4003.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4005.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4006.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4007.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4008.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4009.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4011.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4013.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4014.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/DSC_4016.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 军训 </tag>
            
            <tag> 拉练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qbittorrent【BT下载】一招提速，提升trackers连接数</title>
      <link href="posts/53613.html"/>
      <url>posts/53613.html</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200908172843.png" alt="qbittorrent"></p><p>由于qbittorrent默认连接一个tracker成功后，后续的tracker服务器将不再进行连接。但是可以通过更改设置来连接所有trackers服务器。</p><p><code>设置</code>——<code>高级</code>——勾选<code>总是向同级的所有Tracker汇报</code>、<code>总是向所有等级的Tracker汇报</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200908173507.png" alt="qbittorrent设置"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BT </tag>
            
            <tag> 下载 </tag>
            
            <tag> qbittorrent </tag>
            
            <tag> bitcomit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装网易云UWP方法</title>
      <link href="posts/34320.html"/>
      <url>posts/34320.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-安装方法"><a href="#一-安装方法" class="headerlink" title="一.安装方法"></a>一.安装方法</h2><p>​    1、下载 <a href="https://gitee.com/zhaoyin2000/NetEase-Cloud-Music-UWP-Repack/repository/archive/master.zip">压缩包</a>，并解压。</p><p>​    2、右键点击 x86 或 x64 安装包，点击属性，切换到”数字签名”选项卡。双击签名列表中的”esaeten”。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200720124908.png">在弹出的”数字签名详细信息”窗口中点击”查看证书”，再点击”安装证书”。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200720125009.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200720125102.png"></p><p>​    3、在”证书导入向导”中：</p><ul><li><p>“存储位置”选”本地计算机”，下一步。（需要同意UAC权限请求）</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200720125226.png"></p></li><li><p>选择”将所有的证书都放入下列存储”，点击”浏览”，选择”受信任人”，确定，下一步，继续完成证书导入。</p></li></ul><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200720125333.png"></p><p>  4、双击 x86 或 x64 安装包安装。</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200720125548.png"></p><p>  如果打开不是这种界面，<code>右键</code>——<code>打开方式</code>——<code>应用安装程序</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200720125834.png"></p><h2 id="二-登录"><a href="#二-登录" class="headerlink" title="二.登录"></a>二.登录</h2><p>现在网易云音乐UWP版本的其他登录方式都已经失效，只能使用手机号码登录。</p><h2 id="三-随便说说"><a href="#三-随便说说" class="headerlink" title="三.随便说说"></a>三.随便说说</h2><p>网易云UWP真的是个非常好的项目，没有PC版那么花里胡哨，奈何网易云放弃更新和维护了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坑摄影</title>
      <link href="posts/16125.html"/>
      <url>posts/16125.html</url>
      
        <content type="html"><![CDATA[<h2 id="进入摄影的世界"><a href="#进入摄影的世界" class="headerlink" title="进入摄影的世界"></a>进入摄影的世界</h2><p>我买的是2018年尼康发布的D3500，这是我人生第一台相机，至今依然是个非常有性价比的选择（小声bb：因为友商同价位一个能打的都没有！！），为什么买这么便宜的？两三千块这个价位来说都是入门级的相机。买这个是因为我比较谨慎，万一相机太难玩了，或者玩一段时间又失去兴趣了。那买相机的钱就白白浪费了。所以我买了一个入门级的单反，这样即使发生了前面那些情况我也不会心疼。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715150104.jpg" alt="D3500"></p><h2 id="上手之后的感想"><a href="#上手之后的感想" class="headerlink" title="上手之后的感想"></a>上手之后的感想</h2><p>相机上手还是比较容易的，机身上很多按键在系统交互的时候都会有提示说明，很详细。性能对得起这个价位，用手机拍照感觉会肉肉的，而相机不会。相机拍摄出来的细腻程度要远高于手机。喜欢拍照真不妨买个相机玩玩，很有意思。</p><p>来说说用了一段时间之后觉得比较可惜的点</p><ul><li><p><strong>没有WIFI无线传输</strong>，蓝牙传输的速度虽然能用，但是太慢了！传输最低质量的还好，但是传输高质量和RAW原片真的会让人心态爆炸，只能去拔卡插读卡器。</p></li><li><p><strong>没有翻转屏</strong>，拍摄超低视角的时候没有办法通过取景器观察拍摄画面和构图，只能查看显示屏来进行构图，而显示屏无法翻转对查看的角度就会很苛刻，而且在阳光下侧看会看不清。</p></li><li><p><strong>实时取景的对焦差劲</strong>，取景器的11点对焦系统还是不错的，对焦速度还算不错，但是实时取景的对焦实在差劲，对焦时间长而且有些时候反复对不上焦只能用手动。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715154459.jpg"></p><p>作为一台入门单反来说，以上缺点或许只是成本上的妥协。有可能是我太过于吹毛求疵，毕竟这个价位。这也是我用了同学的EOS RP之后才感受到。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715162357.JPG"></p><h2 id="使用D3500拍摄样片"><a href="#使用D3500拍摄样片" class="headerlink" title="使用D3500拍摄样片"></a>使用D3500拍摄样片</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715155033.JPG"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715163710.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715163837.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715164139.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715163307.jpg"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715163308.jpg"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200715163309.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何有效投诉校园网络问题</title>
      <link href="posts/32052.html"/>
      <url>posts/32052.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>安院学生苦运营商久矣，因为校园网的种种不合理的限制：<code>强制WIFI学号认证</code>、<code>限制连接数量</code>、网络使用高峰期<code>经常跳ping断网</code>等等问题，我不得不再次向工信部提交了投诉。但是这次我想彻底解决这件事情，光凭我一人的投诉虽然可以对运营商造成不小的麻烦，但还是无法撼动它。所以，还是需要借助安院全体同学们的力量，齐心协力、万众一心，必然能达成目标。</p></blockquote><h2 id="如何有效投诉校园网运营商"><a href="#如何有效投诉校园网运营商" class="headerlink" title="如何有效投诉校园网运营商"></a>如何有效投诉校园网运营商</h2><ul><li><p>1.先拨打10086移动客服的人工服务进行投诉，这一步是必须的也是下一步工信部投诉的前提条件。投诉内容怎样都行，可以是不认可资费标准、认为存在乱收费的现象，也可以是网络服务质量低、对用户做种种限制等等，但要符合实情。</p></li><li><p>2.打开工信部的投诉网站：<a href="https://dxss.miit.gov.cn/">https://dxss.miit.gov.cn/</a> ，点击<code>“用户申诉”</code>→<code>“我已阅读上述须知，承诺申诉事项真实无误”</code>→<code>“我要申诉”</code>→基础电信运营商选择<code>“中国移动”</code>，所属地区选<code>“湖南省”</code>，<code>“长沙市”</code>，是否向企业投诉过：选<code>“是”</code>，对企业的投诉处理结果是否满意：选<code>“否”</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.eM4Bo5qK1Jg0b6mbr0NCSiezSS2M7Eqmg*3kVP.tcJnvPG*YeLcy8OaIQ.ygxzgy7NFRlNCpS8r7BKIP2NE2Pg!/r" alt="工信部投诉"></p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.XNeLqrDhf6vSrEa4V1pZjq3WDGB5pqmkz*Dp1RBrMRaqhMQeWHFrar62JH7Fd40BmsAFb9.P1tP8XQAumV2Lzs!/r" alt="工信部投诉"></p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.S81irwR0*Iot1WIo4KVyupoCYiy7pfZ4hmrDg123.376jsYzY2PeN9WMsABLgTe.29BPoOIuBpiC.pQWvSEDQQ!/r" alt="工信部投诉"></p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.RzKX0fd4WMS7GbrNQte*3k38zZav9S.ivcnv**yYJuiD.kO3HST4G6nd9uG7IcVyNzZ1XmcrRYOCfYydGJtbIA!/r" alt="工信部投诉"></p><p>然后一项一项将上面的内容填写好（<code>邮政编码</code>，<code>电子邮件</code>和<code>投诉编码</code>可以不填）。</p><ul><li><p><code>姓名</code>：填自己真实姓名，移动号码实名认证的姓名</p></li><li><p><code>联系电话</code>：填自己使用的手机号码，随便哪个号码都行，只要能联系到你。工信部会发送投诉的相关短信到这个号码上，下面的提交时接收的<code>短信验证码</code>也会发送到这个手机号码上。</p></li><li><p><code>身份证</code>：自己的身份证号码</p></li><li><p><code>通讯地址</code>：这篇攻略我是写给安院的同学们看的，如果是安院的同学，这里直接填学校地址就行，即<code>湖南省长沙市湖南安全技术职业学院</code></p></li><li><p><code>申诉问题涉及号码</code>：在学校营业厅办的号码，也是之前打移动客服<code>10086</code>对移动投诉的那个号码</p></li><li><p><code>申诉内容</code>：这里可以尽情写你认为不合理不满意的地方</p></li><li><p><code>申诉附件</code>：如果是投诉乱扣费，这里可以上传扣费的短信截屏。其他情况以此类推</p><p><strong>以下为我自己填写的示例</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.acOH94*YBvzdPv*tHlokTUNnanPfavp6*4hWrghmA*b7Is2lkZTooQVt3VsEeoY91uGsicOE3Qz74e8NgUnqv4!/r" alt="工信部投诉示例"></p></li></ul><p>最后<code>获取验证码</code>，点击<code>提交</code>，大功告成，等着运营商来对你进行问候。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 互联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章美化——添加颜色标签</title>
      <link href="posts/63534.html"/>
      <url>posts/63534.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下为最终效果展示：</p></blockquote><p class="note-yellow">标签黄色，这是一个简单的测试</p><p class="note-orange">标签橘色，这是一个简单的测试</p><p class="note-red">标签红色，这是一个简单的测试</p><p class="note-pink">标签粉色，这是一个简单的测试</p><p class="note-purple">标签紫色，这是一个简单的测试</p><h2 id="一-添加CSS代码"><a href="#一-添加CSS代码" class="headerlink" title="一.添加CSS代码"></a>一.添加CSS代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.note-orange</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1rem</span> solid <span class="number">#EC8A64</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">236</span>,<span class="number">138</span>,<span class="number">100</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6a737d</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.note-pink</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1rem</span> solid <span class="number">#F48FB1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">244</span>,<span class="number">143</span>,<span class="number">177</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6a737d</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.note-red</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1rem</span> solid <span class="number">#C92642</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">201</span>,<span class="number">38</span>,<span class="number">66</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6a737d</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.note-purple</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1rem</span> solid <span class="number">#A86FC7</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">168</span>,<span class="number">111</span>,<span class="number">199</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6a737d</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.note-yellow</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1rem</span> solid <span class="number">#F7FF98</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">247</span>,<span class="number">255</span>,<span class="number">152</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6a737d</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加到引用的CSS文件中任意位置即可，一些属性可以自行修改，比如：<code>.note-yellow</code>，<code>.note-red</code>之类的是class命名，作用是指定给HTML标签的<code>class</code>值为<code>note-yellow</code>的内容添加括号里的属性，可以随意修改比如改成<code>.a</code>class属性就要相应地改成<code>class=&quot;a&quot;</code>。使用时，只要在Markdown里面写HTML代码就能直接使用。</p><ul><li>margin：设置外边距</li><li>padding：设置内边距</li><li>border-left：左边框（三个参数对应：<code>边框大小</code> <code>边框样式</code> <code>边框颜色</code>）</li><li>background-color：背景颜色（<code>rgba</code>是带透明度的颜色）</li><li>border-radius：设置边框圆角大小</li></ul></blockquote><h2 id="二-使用"><a href="#二-使用" class="headerlink" title="二.使用"></a>二.使用</h2><p>如果是用Markdown写文章，Markdown源码（Markdown可以直接使用部分HTML语言），理论上能使用HTML语言的都可以直接像这样使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;note-purple&quot;&gt;测试内容，这是测试1，紫色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;note-yellow&quot;&gt;测试内容，这是测试2，黄色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;note-orange&quot;&gt;测试内容，这是测试3，橘色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;note-pink&quot;&gt;测试内容，这是测试4，粉色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;note-red&quot;&gt;测试内容，这是测试5，红色&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p class="note-purple">测试内容，这是测试1，紫色</p><p class="note-yellow">测试内容，这是测试2，黄色</p><p class="note-orange">测试内容，这是测试3，橘色</p><p class="note-pink">测试内容，这是测试4，粉色</p><p class="note-red">测试内容，这是测试5，红色</p><blockquote><p>可以是p标签<code>&lt;p&gt;</code>，也可以是<code>&lt;span&gt;</code>、<code>&lt;div&gt;</code>……等等，只要class属性对应<code>&quot;note-XXX&quot;</code>就能生效。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客套上腾讯云CDN</title>
      <link href="posts/58082.html"/>
      <url>posts/58082.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用腾讯云CDN的这段时间，踩了不少坑，为了避免以后自己再犯这样的错误，也为了让更多人少犯甚至避免出现这样的错误，所以写了这篇博文记录下来。</p></blockquote><h2 id="一-常见错误"><a href="#一-常见错误" class="headerlink" title="一.常见错误"></a>一.常见错误</h2><h3 id="1-重定向错误"><a href="#1-重定向错误" class="headerlink" title="1.重定向错误"></a>1.重定向错误</h3><p>这种问题一般是因为源站、CDN、百度爬虫，这三者之间没有协同的缘故，源站如果设置了多个域名并且强制重定向到某一个域名（即访问多个域名都重定向到同一个域名），导致CDN回源请求时被反复重定向（除非CDN回源请求时请求的就是重定向之后的域名），CDN回源请求被重定向到网站加速域名，网站加速域名经过DNS又解析到CDN，CDN又回源请求……陷入死循环。最好是使用CDN之后源站就不要再设置重定向，避免出现这种bug。</p><p>错误示例：</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.QPhmAF3f8sFb*1hYq39WA7W2wv*0.c6wHsDPXUdfXeGghugYf76hOK3pX57LoQDJzv7qdbdDJLYNbfxWHkrbSE!/r" alt="回源HOST配置错误"></p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.e*UTpWREgY1a2wnKK3GmJ37y0bSixpstai4mGgQCCksr88Je2PMTDxA7QG2Xks1tdECCKBPABjLnig4tDVaSKQ!/r" alt="回源HOST错误"></p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.TgYKxy7e3Xtt3o81.tCA330VuG.1BKjX2IU*LaHRxgbJgnvr5KSDVVgU.GbtSyuw.abdH*HxL9PtGnvwE2QACM!/r" alt="百度spider抓取错误"></p><blockquote><p>首先要清楚回源HOST是什么？回源HOST是CDN请求服务器的网站资源的一个标识，也可以说是路径。假如服务器上存在多个网站，那么每一个网站对应的是服务器内的一个文件夹，外部访问网站输入网址（假定网址为<a href="http://www.a.com)时,dns服务器会给这个网址返回一个ip地址,客户端拿到这个ip地址再去访问这个ip地址上的域名为www.a.com的内容.dns服务器需要www.a.com索引到绑定的ip地址,而网站服务器需要www.a.com索引到部署的网站内容./">www.a.com)时，DNS服务器会给这个网址返回一个IP地址，客户端拿到这个IP地址再去访问这个IP地址上的域名为www.a.com的内容。DNS服务器需要www.a.com索引到绑定的ip地址，而网站服务器需要www.a.com索引到部署的网站内容。</a></p></blockquote><p>我在使用CDN的过程中发现，如果源站是使用的coding pages、github pages、gitee pages这样的静态网站托管服务，并且绑定了自定义域名，那么CDN设置的回源HOST就必须是这个自定义域名，因为以上这三个平台都会在绑定了自定义域名的情况下强制重定向到自定义域名，原来的域名访问会被重定向跳转到自定义域名，所以如果CDN使用了某个域名那这个域名就不能再和源站绑定，这样会造成301跳转错乱、死循环。</p><p>但是由于百度搜索引擎的DNS缓存，解绑之后会导致百度spider抓取不到网页内容（报404错误），只好又把原来的域名绑了回去，然后关闭了CDN的<code>SEO搜索引擎自动回源</code>。等待一段时间后，当抓取诊断的结果不再是<code>coding pages</code>并且还会多一些其他的HTTP头，就可以判断为不再被跳转到源站这时候就可以解绑源站的域名了。</p><h3 id="开启SEO自动回源的结果"><a href="#开启SEO自动回源的结果" class="headerlink" title="开启SEO自动回源的结果"></a>开启SEO自动回源的结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200518150710.png" alt="抓取诊断"></p><h3 id="关闭后"><a href="#关闭后" class="headerlink" title="关闭后"></a>关闭后</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200518150852.png" alt="抓取诊断"></p><h3 id="2-命中率低，CDN加速效果不理想"><a href="#2-命中率低，CDN加速效果不理想" class="headerlink" title="2.命中率低，CDN加速效果不理想"></a>2.命中率低，CDN加速效果不理想</h3><p>这是因为CDN的缓存配置不合理，导致频繁回源拉取资源，首先得明白CDN加速的原理：</p><blockquote><p>腾讯云 CDN 缓存资源为触发式，当用户发起针对某资源的访问，若请求触达的 CDN 节点未缓存该资源，则回用户源站拉取资源，成功拉取到资源（2XX状态码）后，在节点进行缓存并返回给用户。</p><p>您无法直接对 CDN 节点上缓存的资源进行管理，若担心源站资源可能发生变化而 CDN 节点仍缓存旧资源返回给用户，可通过配置节点缓存规则来进行一定程度的控制。</p><p>每一个 CDN 节点上的缓存资源都有“过期时间”的概念，若请求到的缓存资源已到期，即便节点仍有缓存，也会判定为无效，进行再次回源拉取。节点缓存规则配置支持指定某类型、某目录、路径的资源在节点的缓存过期时间，可根据实际业务场景进行配置。</p></blockquote><p>就是客户端在访问网站发出请求的时候，CDN收到请求会检查节点有没有缓存资源，如果没有或者资源过期（缓存时间也就是过期时间）会拉取源站资源，此时下载速度受源站网络宽带的影响，导致下载速度慢。合理配置缓存时间也就变得非常重要了。</p><blockquote><ul><li>若选择静态加速类型，常规动态文件（如 .php .jsp .asp .aspx）默认缓存过期时间为0（不缓存直接回源），其他所有文件类型默认过期时间为30天。</li><li>若选择下载加速、流媒体点播加速类型，默认所有文件缓存过期时间为30天。</li></ul></blockquote><p>缓存时间最好是越久越好，但是频繁修改的内容和动态内容最好还是不要缓存，以免发送给客户端失去时效性的内容。</p><h3 id="3-手动刷新缓存"><a href="#3-手动刷新缓存" class="headerlink" title="3.手动刷新缓存"></a>3.手动刷新缓存</h3><p>缓存时间设置那么久，如果要刷新CDN节点的缓存怎么办？可以手动刷新！CDN都有刷新预热的功能</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200512115012.png" alt="刷新预热"></p><p>支持单个页面（文件）刷新，也支持目录（整个目录下的所有内容）刷新。</p><blockquote><p>目录刷新如何使用？当访问<a href="http://www.a.com时,实际上访问的是www.a.com/index.html%E6%88%96%E8%80%85www.a.com/index.php%E2%80%A6%E2%80%A6%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%B2%A1%E6%9C%89%E6%8C%87%E5%AE%9A%E7%A1%AE%E5%88%87%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%BB%98%E8%AE%A4%E4%BC%9A%E8%AE%A4%E4%B8%BA%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF%E5%9C%A8%E8%BF%99%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84index.html%E6%96%87%E4%BB%B6%EF%BC%8C%E6%88%96%E8%80%85php%E6%96%87%E4%BB%B6%E2%80%A6%E2%80%A6%E7%AD%89%E7%AD%89%EF%BC%8C%E5%AE%9E%E9%99%85%E4%B8%8A%60www.a.com/%60%E5%B0%B1%E5%B7%B2%E7%BB%8F%E6%98%AF%E6%8C%87%E5%90%91%E4%BA%86%E7%AB%99%E7%82%B9%E7%9A%84%E6%A0%B9%E7%9B%AE%E5%BD%95%EF%BC%8C%E5%88%B7%E6%96%B0%E7%AB%99%E7%82%B9%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9%E8%BE%93%E5%85%A5%E8%BF%99%E4%B8%AA%E5%9F%9F%E5%90%8D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82%E8%80%8C%E8%A6%81%E5%88%B7%E6%96%B0%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%9F%90%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%AF%94%E5%A6%82image%E7%9B%AE%E5%BD%95%EF%BC%9A%E8%BE%93%E5%85%A5%60www.a.com/image/%60%E5%B0%B1%E8%A1%8C%E3%80%82">www.a.com时，实际上访问的是www.a.com/index.html或者www.a.com/index.php……，因为没有指定确切的文件，服务器默认会认为访问的是在这个目录下的index.html文件，或者php文件……等等，实际上`www.a.com/`就已经是指向了站点的根目录，刷新站点根目录下的所有内容输入这个域名就可以了。而要刷新根目录下的某个目录，比如image目录：输入`www.a.com/image/`就行。</a></p><p>PS.记得前面加上<code>http://</code>或者<code>https://</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> CDN </tag>
            
            <tag> 腾讯云 </tag>
            
            <tag> 博客 </tag>
            
            <tag> IT </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教程—一个脚本实现自动网站SEO主动推送</title>
      <link href="posts/60571.html"/>
      <url>posts/60571.html</url>
      
        <content type="html"><![CDATA[<p>开放主动推送功能的站长平台似乎只有<code>百度</code>和<code>神马</code>，下面就以百度和神马为例。如何写一个批处理脚本，执行所有的主动推送任务。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509160443.png" alt="脚本"></p><hr><h2 id="1-注册站长和验证域名"><a href="#1-注册站长和验证域名" class="headerlink" title="1.注册站长和验证域名"></a>1.注册站长和验证域名</h2><p>这一步是最最基本的，想必也不用我多解释。这都不知道还做啥站长呢，是吧。</p><h2 id="2-获取主动推送代码"><a href="#2-获取主动推送代码" class="headerlink" title="2.获取主动推送代码"></a>2.获取主动推送代码</h2><ul><li><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><h4 id="1-登陆百度站长平台之后，点击搜索服务，再点击左边的链接提交进入如下页面。"><a href="#1-登陆百度站长平台之后，点击搜索服务，再点击左边的链接提交进入如下页面。" class="headerlink" title="1.登陆百度站长平台之后，点击搜索服务，再点击左边的链接提交进入如下页面。"></a>1.登陆百度站长平台之后，点击<code>搜索服务</code>，再点击左边的<code>链接提交</code>进入如下页面。</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509161211.png" alt="百度"></p><h4 id="2-往下翻，看到主动推送，将主动推送的代码保存下来。注意得是curl的推送代码"><a href="#2-往下翻，看到主动推送，将主动推送的代码保存下来。注意得是curl的推送代码" class="headerlink" title="2.往下翻，看到主动推送，将主动推送的代码保存下来。注意得是curl的推送代码"></a>2.往下翻，看到<code>主动推送</code>，将主动推送的代码保存下来。注意得是curl的推送代码</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509161455.png" alt="主动推送代码"></p></li></ul><ul><li><h3 id="神马"><a href="#神马" class="headerlink" title="神马"></a>神马</h3><h4 id="1-登录神马站长平台"><a href="#1-登录神马站长平台" class="headerlink" title="1.登录神马站长平台"></a>1.登录神马站长平台</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509162734.png" alt="神马站长"></p><h4 id="2-获取神马站长推送代码"><a href="#2-获取神马站长推送代码" class="headerlink" title="2.获取神马站长推送代码"></a>2.获取神马站长推送代码</h4><p>点击<code>MIP数据提交</code>，复制保存<code>curl</code>推送代码。</p></li><li><h3 id="百度-天级收录"><a href="#百度-天级收录" class="headerlink" title="百度-天级收录"></a>百度-天级收录</h3><p>百度的天级收录在页面顶部的“<code>搜索服务</code>”—“<code>移动专区</code>”里面。天级收录一样有主动推送的代码，可以跟前面的百度推送的代码一起使用，互不影响。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509161829.png" alt="百度天级收录"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509162013.png" alt="天级收录"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509162309.png" alt="天级收录"></p><blockquote><p>PS：获取天级收录权限需要注册熊掌号，以及完成个人实名认证。再到站长平台的<code>站点管理</code>给域名绑定主体就有天级收录权限，每周会刷新一次配额，如果没有配额等到下一周就会刷新。</p></blockquote></li></ul><h2 id="3-粘贴成脚本"><a href="#3-粘贴成脚本" class="headerlink" title="3.粘贴成脚本"></a>3.粘贴成脚本</h2><p>新建一个文本文件“.txt”格式的，打开后写入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo -------------------------------百度推送--------------------------</span><br><span class="line">&quot;百度主动推送的代码&quot;</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo.----------------------百度天级推送------------------------</span><br><span class="line">&quot;百度天级收录的推送代码&quot;</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo.------------------------------神马--------------------------------</span><br><span class="line">&quot;神马的推送代码&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>将之前复制保存的推送代码对号入座，填入相对应的位置，然后保存，将文件后缀名改为<code>.bat</code>再把文件移动到站点根目录（含有urls.txt的目录）点击运行即可，如果不想把脚本放到根目录就要把推送代码的urls文件指向稍作修改。</p><blockquote><p>代码中的echo.用来换行排版而已，加不加其实无所谓，功能上来说没有任何区别，只是为了方便查看输出信息。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509164502.png" alt="修改"></p><p>比如我把它放在了<code>hexo</code>博客的根目录</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200509164655.png" alt="示例"></p><p>那么urls.txt的相对位置就是<code>public/urls.txt</code>，把原来的推送代码中的<code>urls.txt</code>修改为<code>public/urls.txt</code>即可</p><p>另外关于如何生成<code>urls.txt</code>可以去看这篇教程：<a href="https://www.zyskys.com/posts/60945.html%E3%80%82">https://www.zyskys.com/posts/60945.html。</a></p><blockquote><p>推荐一下好友的文章：</p><p><a href="https://520526.xyz/1218/">https://520526.xyz/1218/</a>    教程-给你的博客增加动态看板娘(超详细分享)</p><p><a href="https://520526.xyz/1211/">https://520526.xyz/1211/</a>    教程-ftp21端口,OpenSSH,22,内部敏感服务对外开放存在风险</p><p><a href="https://520526.xyz/1196/">https://520526.xyz/1196/</a>    教程-使用js脚本预加载为网站提高访问速度</p><p><a href="https://520526.xyz/1122/">https://520526.xyz/1122/</a>    Unity3D-入门学习路线及基础知识</p><p><a href="https://520526.xyz/1113/">https://520526.xyz/1113/</a>    SEO-WordPress网站robots.txt的正确写法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈国内网络视频平台的清晰度</title>
      <link href="posts/63974.html"/>
      <url>posts/63974.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>各位在观看视频、短视频的时候，想必都曾经有过这样的问题，有些视频同样都是在1080P的清晰度下播放，为什么有的看起来非常清晰，赏心悦目。而有的却模糊不堪、观看起来兴味索然呢？</p></blockquote><p>要解答这个问题其实并不复杂，原理可以从多个方面分别阐述。在这里主要说明不同平台对视频清晰度的影响。就拿国内的主流网络视频平台：<code>腾讯视频</code>，<code>爱奇艺</code>，<code>优酷</code>，<code>抖音</code>，<code>B站</code>来说。</p><p>看过<code>YouTube</code>和<code>网飞</code>的人都知道，在国内是没有“真”4K的，甚至是不是1080P都要保持怀疑态度，哪怕APP上标的的确是4K，或者1080P，因为那就只是个标志而已，类似logo一样。</p><p>拿<code>腾讯视频</code>目前正在热播的电视剧<code>清平乐</code>来说，一集时长40分钟左右，我把它下载下来，画质选的1080P，只有281.2MB……？？？？Are you kidding me？<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505155734.png" alt="腾讯视频"></p><p>一集40多分钟的电视剧1080P分辨率下只有281.2MB，这是什么概念或许大家不清楚，那我拿另一个平台<code>B站</code>来说：下载一集24分钟的动画，1080P+清晰度下有661MB，比腾讯视频40分钟的电视剧还要高出两倍！<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505162108.png"></p><p>这也是为什么我更喜欢在B站看视频的原因，因为比国内的其他平台清晰度要高得多。对计算机而言，信息量的多少终究受到文件大小的限制，文件越大所包含的信息就越多视频也就越清晰，反之，文件越小信息量就越少，视频也就越模糊。你只要知道“大的文件不一定清晰，但清晰的视频文件一定越大”就是了。（PS.现在的智能手机，平板电脑等等都可以看作是微小型的计算机）</p><p><strong>结论：B站的视频在清晰度上要远高于腾讯视频</strong></p><ul><li><h2 id="为什么会造成这样的差别"><a href="#为什么会造成这样的差别" class="headerlink" title="为什么会造成这样的差别"></a>为什么会造成这样的差别</h2><p>因为B站平台方给的码率足够高，B站官方给的数据是：视频码率最高6000Kbps，而腾讯视频没有给出数据，但可以通过计算得到视频码率为：$$\displaystyle{\frac{281.2MB\times8\times1000Kbps}{40分钟\times60秒}=937.33Kbps}$$ ，从码率上来看B站视频的清晰度最高可以达到腾讯视频的6倍。所以不管从视频内容制作者(也就是创作者)的角度，还是从观众的角度，都更加倾向于使用B站而不是腾讯视频。</p></li><li><h2 id="为什么腾讯视频的码率要低那么多"><a href="#为什么腾讯视频的码率要低那么多" class="headerlink" title="为什么腾讯视频的码率要低那么多"></a>为什么腾讯视频的码率要低那么多</h2><p>这个问题我能想到一些原因，但是未必正确。比如：</p><ul><li><h3 id="节省网络、宽带开销"><a href="#节省网络、宽带开销" class="headerlink" title="节省网络、宽带开销"></a>节省网络、宽带开销</h3><p>低码率虽然清晰度低，但也意味着文件会小很多，用户每观看一集能节省不少的流量，一千个用户、一万个用户、甚至几十万上百万的用户，那么节省下来的流量就非常庞大了，而节省的流量就是平台在网络维护上面的开销。又或者，同时在线观看视频的用户有一千万，如果把码率提升个几倍，视频清晰度变高了，但是服务器网络宽带的压力也会增大，宽带的开销也要提升好几倍了。</p></li><li><h3 id="节省服务器存储开销"><a href="#节省服务器存储开销" class="headerlink" title="节省服务器存储开销"></a>节省服务器存储开销</h3><p>高清晰度的视频，文件体积肯定就越大，这是必然的事情。而服务器的存储空间有限，升级又徒增成本。所以从商业角度考虑不得不把视频清晰度降低，把文件缩小。</p></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以，总结起来一句话：省钱！从商业角度来看，从国情来看，要提升网络平台视频清晰度是非常困难的，对平台方而言提升清晰度只会徒增运营成本而已，可是这却不能成为平台方虚假宣传的理由！YouTube上的720P比腾讯的1080P要更加清晰，1080P比4K还要清晰，这是什么？！这是无耻的偷换概念，是虚假宣传，更是诈骗！！！对于这种无耻的行为，广大的用户群体应当予以谴责！</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505183609.png" alt="腾讯视频"></p><p>可笑的是腾讯在1080P前面还特意加上两个字”<code>蓝光</code>“，不了解蓝光技术的人乍一听觉得很高大上，<code>蓝光</code>是指”蓝光光碟（Blu-ray Disc）”，不是什么清晰度的指标！要我说，腾讯还差那么点意思，我建议不如再把“<code>4K</code>”改成“<code>紫光4K</code>”，以后再出个“<code>红光8K</code>”，这多拉风啊~</p><p>其他的，如<code>优酷</code>、<code>爱奇艺</code>、<code>抖音</code>等等都是如此，行业内似乎是达成了某种默契，谁也不去碰那清晰度的升级徒增成本，吃力不讨好。</p><h3 id="网络电视（IPTV）和有线电视"><a href="#网络电视（IPTV）和有线电视" class="headerlink" title="网络电视（IPTV）和有线电视"></a>网络电视（IPTV）和有线电视</h3><p>近年来流行的网络电视IPTV，实际上是把广电总局的电视信号源由IPTV运营商进行复制和压缩，再分发到用户。从结论上来说是达不到广电总局原始信号的清晰度的，而有线电视是由广电总局通过卫星传输的电视信号。所以，有线电视的画质普遍要比IPTV的要好，而且切换频道没有卡顿和延迟感。我个人也是更喜欢有线电视，IPTV画质好不好就要全看运营商，如果运营商为了节省网络宽带传输的开销，压缩率设置的高一点，那清晰度就要低一些。</p><blockquote><p>总的来说，有线电视画质肯定要比IPTV好。追求高画质特别是电视剧，最好是在有线电视上看，其次是IPTV，最后再是网络平台。</p></blockquote><p>…</p><p>…</p><h2 id="对比截图"><a href="#对比截图" class="headerlink" title="对比截图"></a>对比截图</h2><p>下面放国外平台的截图和真正的1080P、4K本地视频的截图（点击图片可以自由放大，如果无法点击请刷新重试）：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505190635.png" alt="YouTube"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505190747.png" alt="YouTube"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505190833.png" alt="YouTube"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505190902.png" alt="solLevante"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505191027.png" alt="solLevante"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505191102.png" alt="solLevante"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/1134451886/blog/img/20200505191128.png" alt="solLevante"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的优化-提升访问速度，SEO</title>
      <link href="posts/60945.html"/>
      <url>posts/60945.html</url>
      
        <content type="html"><![CDATA[<h2 id="npm速度优化"><a href="#npm速度优化" class="headerlink" title="npm速度优化"></a>npm速度优化</h2><hr><blockquote><p>玩hexo的，肯定经常和npm打交道，但是npm的下载速度着实是有点慢。</p><p>由于下面内容会安装较多的插件，建议先更改npm仓库地址，以便能更快的安装插件</p></blockquote><ul><li>阿里的淘宝团队在国内做了个跟npm仓库一样的镜像叫<code>cnpm</code>。</li><li>淘宝镜像与npm官方包的同步频率目前为10分钟一次，来保证尽量与官方服务同步。</li><li>所以二者可以说是一样，不用担心有什么差别。</li></ul><h3 id="通过改变地址来使用淘宝镜像（推介）"><a href="#通过改变地址来使用淘宝镜像（推介）" class="headerlink" title="通过改变地址来使用淘宝镜像（推介）"></a>通过改变地址来使用淘宝镜像（推介）</h3><ul><li><p>npm的默认仓库地址是 <code>https://registry.npmjs.org/</code></p></li><li><p>可以使用以下命令查看当前npm的仓库地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>可以使用以下命令来改变默认下载地址，从而达到不安装<code>cnpm</code>就能采用淘宝镜像的目的，然后使用上面的get命令查看是否设置成功。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h3><ul><li><p>安装cnpm，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装后，使用以下命令测试是否安装成功：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><ul><li>成功后，以后都使用 <code>cnpm</code> 代替以前 <code>npm</code> 来执行命令！</li></ul><h2 id="访问速度优化"><a href="#访问速度优化" class="headerlink" title="访问速度优化"></a>访问速度优化</h2><hr><h3 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h3><p>在做优化之前，让我们先了解什么是<code>预加载</code> 和 <code>懒加载</code>（废话时间）。</p><h4 id="什么是预加载"><a href="#什么是预加载" class="headerlink" title="什么是预加载"></a>什么是预加载</h4><p><code>预加载</code>就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验</p><ul><li>缺点：会增加服务器压力</li></ul><h4 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h4><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p><ul><li>优点：对服务器有一定的缓解压力作用</li></ul><p>我用的 <a href="https://github.com/blinkfox/hexo-theme-matery">matery主题</a> 整体采用预加载模式，这样可以在我们访问其他页面的时候会稍微快点。我们可以在这个基础上对图片进行懒加载，这样做效果就是html、css、js加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p><h4 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h4><p>首先安装图片懒加载插件： <a href="https://github.com/Troy-Yang/hexo-lazyload-image">hexo-lazyload-image</a></p><p>在Hexo根目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><p>然后在Hexo配置文件末尾加入以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 是否只对文章的图片做懒加载</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># eg ./images/loading.gif</span></span><br></pre></td></tr></table></figure><p>到这里就配置完了，执行<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>就有效果了，以后博客上的图片就都是懒加载了，以上步骤理论上任何主题都可以用</p><p>一般情况下懒加载会和gallery插件会发生冲突，结果可能就是点开图片，左翻右翻都是loading image。matery主题的解决方案是：</p><p>修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件</p><p>在第108行加上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).find(<span class="string">&#x27;img[data-original]&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).parent().attr(<span class="string">&quot;href&quot;</span>, $(<span class="built_in">this</span>).attr(<span class="string">&quot;data-original&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。</p><p>伪解决方案：打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p><p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;brand-logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;waves-effect waves-light&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) &#123; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= theme.logo %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo-img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;LOGO&quot;</span>&gt;</span></span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;logo-span&quot;</span>&gt;</span>&lt;%- config.title %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h4><p><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项</p><p>方法就是在 <code>loadingImg</code> 后配置图片的路径就好了</p><p><strong>Like this：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 是否只对文章的图片做懒加载</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="string">/medias/loading.gif</span> <span class="comment"># eg ./images/loading.gif</span></span><br></pre></td></tr></table></figure><h4 id="懒加载优化"><a href="#懒加载优化" class="headerlink" title="懒加载优化"></a>懒加载优化</h4><blockquote><p>经过以上操作就已经很完美了，以下内容可做可不做</p></blockquote><ul><li><p>其实第一次加载后本地都是有缓存的，如果每次都把loading显示出来就不那么好看</p></li><li><p>所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画</p></li><li><p>打开 <code>Hexo根目录</code>&gt;<code>node_modules</code> &gt; <code>hexo-lazyload-image</code> &gt; <code>lib</code> &gt; <code>simple-lazyload.js</code> 文件</p></li><li><p>第9行修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; rect.top &lt;= (<span class="built_in">window</span>.innerHeight +<span class="number">240</span> || <span class="built_in">document</span>.documentElement.clientHeight +<span class="number">240</span>)</span><br></pre></td></tr></table></figure></li><li><p>作用：提前240个像素加载图片；当然这个值也可以根据自己情况修改</p></li></ul><h3 id="代码压缩优化"><a href="#代码压缩优化" class="headerlink" title="代码压缩优化"></a>代码压缩优化</h3><h4 id="为什么要把代码压缩？"><a href="#为什么要把代码压缩？" class="headerlink" title="为什么要把代码压缩？"></a>为什么要把代码压缩？</h4><p>因为hexo生成的html、css、js等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”。</p><p>有人说空格换行能占多少字节？确实占不了多少，但是一个人访问是这么多字节，那么一百人，一万人呢？加起来这量就不少了吧，这都是流量啊！这也是很多css/js文件的后缀为*.min.js或*.min.css的原因。虽然我们可能没那么多访问量，但是能减小一点资源文件的大小也是对访问速度有那么一点提升的。</p><h4 id="gulp实现代码压缩"><a href="#gulp实现代码压缩" class="headerlink" title="gulp实现代码压缩"></a>gulp实现代码压缩</h4><ul><li><p>cd到Hexo根目录依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装gulp模块</span></span><br><span class="line">npm install gulp -g</span><br><span class="line"><span class="comment"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span></span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="comment"># 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></table></figure><p>在Hexo根目录新建文件 <code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">&quot;gulp-debug&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean-css&quot;</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>); <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>); <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlclean&quot;</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>); <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">&quot;gulp-changed&quot;</span>); <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">&quot;gulp-if&quot;</span>); <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">&quot;gulp-plumber&quot;</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">&quot;gulp-babel&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">&quot;babel-preset-es2015&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">&quot;del&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">&quot;hexo&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">&quot;clean&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">&quot;public/**/*&quot;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">&quot;generate&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">&quot;generate&quot;</span>, &#123;</span><br><span class="line">                watch: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">&quot;server&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">        .init()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.call(<span class="string">&quot;server&quot;</span>, &#123;&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">&quot;deploy&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">&quot;deploy&quot;</span>, &#123;</span><br><span class="line">                watch: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressJs&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">&quot;./public/**/*.js&quot;</span>, <span class="string">&quot;!./public/libs/**&quot;</span>]) <span class="comment">//排除的js</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress JS:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(</span><br><span class="line">            gulpBabel(&#123;</span><br><span class="line">                presets: [es2015Preset] <span class="comment">// es5检查机制</span></span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">        .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>)); <span class="comment">//输出到目标目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressCss&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        rebase: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">        compatibility: <span class="string">&quot;ie7&quot;</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class="line">        <span class="comment">//keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">        <span class="comment">//keepSpecialComments: &#x27;*&#x27; //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">&quot;./public/**/*.css&quot;</span>, <span class="string">&quot;!./public/**/*.min.css&quot;</span>]) <span class="comment">//排除的css</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress CSS:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressHtml&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cleanOptions = &#123;</span><br><span class="line">        protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span><br><span class="line">        unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> minOption = &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">        collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span></span><br><span class="line">        removeComments: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span><br><span class="line">        minifyURLs: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress HTML:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/medias 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressImage&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number 默认：3 取值范围：0-7（优化等级）</span></span><br><span class="line">        progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">        interlaced: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">        multipass: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">&quot;./public/medias/**/*.*&quot;</span>)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public/medias&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress Images:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(imagemin(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">&quot;build&quot;</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressHtml&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressCss&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressJs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressImage&quot;</span>,</span><br><span class="line">        gulp.parallel(<span class="string">&quot;deploy&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generate&quot;</span>,</span><br><span class="line">        gulp.parallel(<span class="string">&quot;compressHtml&quot;</span>, <span class="string">&quot;compressCss&quot;</span>, <span class="string">&quot;compressJs&quot;</span>,<span class="string">&quot;compressImage&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></span><br></pre></td></tr></table></figure><ul><li>以后的执行方式有两种：<ol><li>直接在Hexo根目录执行 <code>gulp</code>或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li><li>在Hexo根目录执行 <code>gulp build</code> ，这个命令与第1种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li></ol></li><li>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 <code>&quot;compressImage&quot;,</code> 和第165行的 <code>,&quot;compressImage&quot;</code> 去掉即可</li></ul><h4 id="hexo-neat插件实现代码压缩"><a href="#hexo-neat插件实现代码压缩" class="headerlink" title="hexo-neat插件实现代码压缩"></a>hexo-neat插件实现代码压缩</h4><ul><li><p>可能以上方法比较复杂，来介绍个简单的，<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a>插件也是用来压缩代码的，底层也是通过gulp来实现的。</p></li><li><p>但是这个插件是有Bug的：</p><ul><li>压缩 md 文件会使 markdown 语法的代码块消失</li><li>会删除全角空格</li></ul></li><li><p>Hexo根目录执行安装代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p>在Hexo配置文件<code>_config.yml</code> 末尾加入以下配置：</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><p>然后直接 <code>hexo cl&amp;&amp;hexo g</code> 就可以了，会自动压缩文件 。</p><p><strong>补充</strong>：为了解决以上Bug，<strong>对于matery主题</strong>（其他主题自行解决）需要将以上默认配置修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.md&#x27;</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/**/instantpage.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/matery.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="全站CDN加速"><a href="#全站CDN加速" class="headerlink" title="全站CDN加速"></a>全站CDN加速</h3><p>本节参考：<a href="https://removeif.github.io/2019/09/25/tools/github-page%E7%BD%91%E7%AB%99cdn%E4%BC%98%E5%8C%96%E5%8A%A0%E9%80%9F.html">github page网站cdn优化加速 - 辣椒の酱</a></p><p>CDN的全称是Content Delivery  Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。</p><p><strong>用法：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif</span><br></pre></td></tr></table></figure><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源</p><p>还可以配合<code>PicGo</code>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。更多详细信息可参考我另一篇文章：<a href="https://blog.sky03.cn/posts/4873.html#toc-heading-6">超好用的软件插件网站集合</a></p><h4 id="重点（敲黑板！）"><a href="#重点（敲黑板！）" class="headerlink" title="重点（敲黑板！）"></a>重点（敲黑板！）</h4><hr><p><strong>这个不止可以作用于图片，可以像这样把所有的css、js等文件的加载路径都修改下，从而让全站使用CDN加速！具体怎么修改要根据主题的情况而定，比较麻烦，不过原理都是一样的，有能力的可以改改。</strong></p><p>这里我提供一个4.15M的图片文件，供大家测试：</p><p><code>腾讯</code>：<a href="https://blog.sky03.cn/medias/test.jpg">COS + CDN</a></p><p><code>GitHub</code>：<a href="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/test.jpg">GitHub + jsDelivr</a></p><p><code>阿里</code>：<a href="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/test.jpg">OSS</a></p><p>浏览器<code>打开</code>-&gt;<code>F12</code>-&gt;<code>Network</code>-&gt;<code>Ctrl + F5(强制刷新，即不使用缓存刷新)</code>，然后看加载时间多少。</p><p><strong>我的测试结果</strong>：</p><blockquote><p>每个人的网络情况不一样，测试数据仅供参考</p></blockquote><ul><li>阿里云的<code>OSS</code>：2.60s加载完成</li><li><code>jsDelivr + Github</code>：1.68s加载完成</li></ul><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><hr><blockquote><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。 ——百度百科</p></blockquote><h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><blockquote><p>在这之前，<strong>有个事情需要注意：</strong></p><p><code>GitHub</code>是不允许百度的<code>Spider</code>（蜘蛛）爬取<code>GitHub</code>上的内容的，所以任何部署在GitHub上的静态博客都是不能百度爬取到的！</p><p>解决方案：可以参考我另一篇文章 <a href="https://blog.sky03.cn/posts7974.html">关于百度无法爬取GitHub内容解决方案</a></p></blockquote><h4 id="让百度收录你的站点"><a href="#让百度收录你的站点" class="headerlink" title="让百度收录你的站点"></a>让百度收录你的站点</h4><p>首先来搞百度的，刚建完站在百度上是不可能搜索到我们的网站的，可以先在百度上搜索<code>site:&lt;你的域名&gt;</code>，一般是搜不到的，然后点击 <code>提交网址</code> 将自己的网站提交给百度。</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.VhHkB0UnzG9j3Wsyqz021jPxVSzgGpi.MneBa1zTtuqfACVY2J6PWz8B003685hH84Xf2tZ*0FcNaqQSaqntTM!/r" alt="img"></p><h4 id="添加自己的站点到百度"><a href="#添加自己的站点到百度" class="headerlink" title="添加自己的站点到百度"></a>添加自己的站点到百度</h4><p>登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>， 只要是百度旗下的账号就可以， 登录成功之后在站点管理中点击<a href="https://ziyuan.baidu.com/site/siteadd">添加网站</a>，输入域名，三步走。</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.astfjTEwlLk*dzZq8WYRyPGNekGRo56aSdZtnOWXAn2*2JKpkk0NeM4sAue3*X0P7EYtTtrsFK6j6eUzsoYFSc!/r" alt="img"></p><p>第三步验证网站的时候， 验证网站所有权的方式有三种：</p><ul><li>文件验证</li><li><code>HTML</code>标签验证</li><li><code>CNAME</code>解析验证<strong>（推荐使用）</strong></li></ul><p>同理，百度的spider是爬取不到GitHub的内容的，所以<code>HTML标签验证</code>方式也是不太可取的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.cbvu5kgkleXy92lb1AT0yDNJkE19787uGe1uIf1OGiiRQ0h9gJCaEio9o3.YaF7Qk43.zndrkm1c4F9CRIsP0M!/r" alt="img"></p><h4 id="向百度推送自己的资源"><a href="#向百度推送自己的资源" class="headerlink" title="向百度推送自己的资源"></a>向百度推送自己的资源</h4><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。</p><p>还是在百度资源搜索平台，找到数据引入-&gt;链接提交，可以看到向百度推送自己的内容有两个方式：</p><ol><li><p>自动提交</p><p> （分三种）</p><ul><li>主动推送</li></ul></li></ol><ul><li>自动推送<ul><li>sitemap（站点地图）</li></ul></li></ul><ol start="2"><li><p>手动提交</p><ul><li>即手动地将链接一次性提交给百度</li></ul></li></ol><p>一般自动提交比手动提交效果好一点，自动提交又从效率上来说：</p><p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p><p><strong>自动提交的三种方式</strong>：</p><ol><li><code>主动推送</code>：最为快速的提交方式。将站点当天新产出链接通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式。将自动推送的JS代码部署在站点的每一个页面源代码中，当部署代码的页面在每次被浏览时，链接就会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap文件</code>中，然后将<code>sitemap文件</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol><h5 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h5><p><strong>安装sitemap插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这两个插件是用来生成 <code>Sitemap文件</code> 的插件，而 <code>Sitemap</code> 是用来告知搜索引擎我们的网站上有哪些可供抓取的网页的。</p><p><strong>注意一点：</strong><br><strong>hexo配置文件中的url一定要改成你的域名，这两个插件是根据你的url生成站点地图的。</strong></p><p>安装后直接执行<code>hexo cl&amp;&amp;hexo g</code>命令，然后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml文件</code>，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。</p><p>有<code>sitemap文件</code>之后，再将生成的<code>sitemap文件</code>提交给百度或者其他搜索引擎</p><p>百度方式：在自动提交的sitemap那里填写自己<code>sitemap文件</code>的URL地址即可</p><p><code>https://你的域名/baidusitemap.xml</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.afaQq6THP.e2DahmDOiaSsxYgDbnKEEvz*ltVBOCQCkQ2r*wuMKEbY59Ni3XUcWD9YamRjLnQFTYQcspusm3PE!/r" alt="img"></p><p>提交后会有状态提示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.cPfOOvl*hiIZUllGhcGJV8h7HUofU.iYu3.Q9mxy0ytpV5JutSmSOUckVkWwHHmSA5XcUDs.zou4k3.1v9lOJc!/r" alt="img"></p><p>这里需要注意<strong>严格区分http和https</strong></p><blockquote><p>http和https是不一样的，刚添加的站点是HTTP协议的，如果你网站开启了 <code>强制https</code>，是会报301重定向错误的，也就是百度不能抓取到你的sitemap</p><p>如果想用https，可以在<code>数据监控</code>-&gt;<code>HTTPS认证</code>进行认证</p><p>这个认证有时会很慢，可以在你的站点只留一个首页的<code>简单HTML</code>，然后再去百度认证，这样应该会快一点。</p></blockquote><p>如果是其他的搜索引擎，一般是在填写sitemap的地方，填写以下内容即可</p><p><code>https://你的域名/sitemap.xml</code></p><h5 id="自动推送方式"><a href="#自动推送方式" class="headerlink" title="自动推送方式"></a>自动推送方式</h5><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度搜索资源平台提交链接</span></span><br><span class="line"><span class="attr">baiduPush:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>即可！</p><p>其他主题一般都有这个功能的实现，如果没有的话，想办法在每个页面加入以上JS代码即可，原理是一样。</p><h5 id="主动推送方式"><a href="#主动推送方式" class="headerlink" title="主动推送方式"></a>主动推送方式</h5><p>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-baidu-url-submit  百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">80</span> <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">blog.sky03.cn</span> <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">xxxxxxx</span> <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>密匙的获取是在百度的自动提交的主动推送那里。</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.eHR0yM.72Lb6COKeSRiZmSILt70wqKTgMB4fBldqNlF6Sos7KiGBadywZOd2e1YpWA6lUd2FGaq6thNnSCw0JU!/r" alt="img"></p><p>再加入新的<code>deploy</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.SAcBTIxwjlbt4hVjiX2QMrSV0EdPN6fqoU3LfvEPpHIx0DqrJ6pklOd1utWDKlXh3LhRbPSxKhEU7dLEL8Y46E!/r" alt="img"></p><p>这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。<br>推送成功时,会有如下终端提示!</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.UplXEViIA8jXbAyg1F76g39tQXMBNf4XFlDPWh*yF9eIVVSwhRpdpJgFoWkIiPjfeYdSaN48SG21voifKKtddc!/r" alt="img"></p><p>各种不同的推送反馈字段说明<a href="https://ziyuan.baidu.com/college/courseinfo?id=267&page=2#h2_article_title12">点我</a>查看，一般来说，推送失败基本都是地址不相符造成的，我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h3 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h3><p>相比于百度，google的效率实在不能更快，貌似一天左右站点就被收录了，其实方法是和百度是一样的。</p><ul><li><p>登录<a href="https://www.google.com/webmasters/">谷歌站长平台</a>，添加自己的域名</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.fsMSB1.vh0Uw1sXNZc.VyN.xFHDLkRZsN7xWjhxsr9jNaOGIt7Qil0wz*b2UJ7AdqM8yIZISA.wIjsHrCMbnQE!/r" alt="img"></p></li><li><p><code>DNS验证</code>（就是验证下网站是不是你的）就是域名解析那里添加一条TXT解析记录</p></li><li><p>然后点击验证即可</p></li><li><p>再到谷歌的<a href="https://search.google.com/search-console/">Search Console</a>，添加自己的<code>sitemap</code>地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.d.2N1VOhNWoWHtZAOtaPfk7IotVBu*vcLaqtxTgUBhE6AdQTlE5oa5kzzA*f6Bl0mvGMw3phvjER53ZhFvH7So!/r" alt="img"></p></li><li><p>接下来，等就是了</p></li></ul><h3 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt"></a>提交 robots.txt</h3><h4 id="robots-txt是干嘛的？"><a href="#robots-txt是干嘛的？" class="headerlink" title="robots.txt是干嘛的？"></a>robots.txt是干嘛的？</h4><p><code>robots.txt</code> 是一种存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br><code>robots.txt</code> 要放在 <code>Hexo根目录</code> 下的 <code>source</code> 文件夹中。</p><p>每个人站点目录可能不太一样，可以参考下我的 <code>robots.txt</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/posts/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/about/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/js/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/css/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/contact/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/fonts/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/friends/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/libs/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/medias/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/page/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/tags/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/categories/</span></span><br></pre></td></tr></table></figure><p>更多关于 <code>robots.txt</code> 的写法参见 <a href="https://blog.csdn.net/fanghua_vip/article/details/79535639">https://blog.csdn.net/fanghua_vip/article/details/79535639</a></p><p>编写完以上内容再重新部署一下，然后到百度资源平台的<code>数据监控</code>-&gt;<code>Robots</code>点击<code>检测并更新</code> 看能不能检测到。<br>同样注意：刚添加的站点没有进行 <code>HTTPS认证</code>，直接检测有可能会报301错误。</p><h3 id="配置-Nofollow"><a href="#配置-Nofollow" class="headerlink" title="配置 Nofollow"></a>配置 Nofollow</h3><ul><li>nofollow 是HTML页面中 <code>a标签</code> 的 属性值。</li><li>这个属性的作用是：告诉搜索引擎的爬虫不要追踪该链接，为了对抗博客垃圾留言信息</li></ul><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><p><strong>方案一</strong>：</p><p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.sky03.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><p><strong>方案二</strong>：</p><p>安装固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><ol><li><p>Hexo根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p><code>Hexo配置文件</code>末尾加入以下配置：</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-abbrlink config 、固定文章地址插件</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span>  <span class="comment">#算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span></span><br></pre></td></tr></table></figure><p><code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.sky03.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p>这样站点结构就变成了：<code>域名/posts/xxx.html</code></p><h2 id="优化小技巧"><a href="#优化小技巧" class="headerlink" title="优化小技巧"></a>优化小技巧</h2><h3 id="异步加载JS"><a href="#异步加载JS" class="headerlink" title="异步加载JS"></a>异步加载JS</h3><p><strong>方法</strong>：将JS文件的引入，放到HTML的body结束标签的上方</p><p><strong>例</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        xxxxx....</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;xx/xx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>原理</strong>：首先要明白，HTML的加载是从上往下一行一行解释执行的，把js文件的引入放到下面，这样就会先把HTML页面展示出来，然后再加载js。这样看起来的效果就是，大体的页面先出来，而js让它慢慢加载执行，如果你把js放到网页的上方，效果就是必须要加载完js才能继续展示网页，体验极差。</p><p><strong>注意</strong>：原主题的js文件尽量不要动，我们只需将自己增加的一些js按照异步加载的方式做即可，比如一些音乐js插件、实时在线聊天js插件等放到最后即可！因为这些文件要加载的东西很多。</p><h3 id="字蛛"><a href="#字蛛" class="headerlink" title="字蛛"></a>字蛛</h3><p><a href="http://font-spider.org/">官网</a> <a href="https://github.com/aui/font-spider">GitHub</a></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>你的网站中需要自定义字体（额外添加一些普通电脑中没有的字体），但是一般字体是包含很多字符的，这就导致字体文件的体积很大</p><h4 id="字蛛作用"><a href="#字蛛作用" class="headerlink" title="字蛛作用"></a>字蛛作用</h4><p>字蛛就是自动检测网站的 CSS 与 HTML 文件中的自定义字体（额外加的字体），并将网站中<strong>用到的文字</strong>重新打包成一个新的字体文件，并自动引入；</p><p>而<strong>没用到的文字</strong>就会删除，从而达到压缩字体文件体积的作用。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install font-spider -g</span><br></pre></td></tr></table></figure><h4 id="在-CSS-中使用-WebFont："><a href="#在-CSS-中使用-WebFont：" class="headerlink" title="在 CSS 中使用 WebFont："></a>在 CSS 中使用 WebFont：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*声明 WebFont*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;pinghei&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/pinghei.eot&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/pinghei.eot?#font-spider&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/pinghei.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/pinghei.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/pinghei.svg&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用选择器指定字体*/</span></span><br><span class="line"><span class="selector-class">.home</span> <span class="selector-tag">h1</span>, <span class="selector-class">.demo</span> &gt; <span class="selector-class">.test</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;pinghei&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>@font-face 中的 src 定义的 .ttf 文件必须存在，其余的格式将由工具自动生成</li><li>开发阶段请使用相对路径的 CSS 与 WebFont</li></ol></blockquote><h4 id="运行-font-spider-命令："><a href="#运行-font-spider-命令：" class="headerlink" title="运行 font-spider 命令："></a>运行 font-spider 命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-spider ./demo/*.html</span><br></pre></td></tr></table></figure><blockquote><p>页面依赖的字体将会自动压缩好，原 .ttf 字体会备份</p></blockquote><hr><p>本文转载自：<a href="https://blog.sky03.cn/posts/42790.html">https://blog.sky03.cn/posts/42790.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo给Valine博客添加评论自动微信推送</title>
      <link href="posts/bd75.html"/>
      <url>posts/bd75.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客给Valine添加评论自动微信推送"><a href="#hexo博客给Valine添加评论自动微信推送" class="headerlink" title="hexo博客给Valine添加评论自动微信推送"></a><center>hexo博客给Valine添加评论自动微信推送</center></h1><blockquote><p>引言：Valine评论系统本身并不自带新增评论提醒功能，好在光顾网友<a href="https://520526.xyz/882/.html">站点</a>的时候发现了两个非常宽松推送API：<a href="http://sc.ftqq.com/3.version">Server酱</a>，<a href="https://qmsg.zendee.cn/api.html">Qmsg酱</a>。分别对应<strong>微信</strong>和<strong>QQ</strong>，自己琢磨着写了几行JS代码，能利用以上两个API专门针对Valine评论进行推送提醒，下面就让我们进入正题吧。</p></blockquote><p>先上几张效果图：</p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.c46P0VuT7phPcjQnSYNhZMQxi6sYqktQe83en7FjyYHm9Y.7YZIKj0RgY6DJpTZ2F7Jr6v4hEOXn8WJoXm7Nn8!/r" width=80%><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.TaBuMkz7HfY0th6j*bhEWbBo8fqPCEqhDIEtH*FKKbwBH0cH0zXx1q5gU6PjUNYmNCSOs5QHqr6J9EQ*gmL1DA!/r" alt="Server酱" width="80%"><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.RFCR1OSrVvVDPGY2oVcloDzLMf2ja6taUeqbK42FOT8IB2ohgwLejxi0*Zt043fqa1gB.fNMcYMxHvA9lGgk*s!/r" alt="Qmsg酱" width="40%"><br><blockquote><p>下面来说如何实现，实现方案是基于hexo或者静态页面的。</p></blockquote><ul><li><h2 id="Sever酱"><a href="#Sever酱" class="headerlink" title="Sever酱"></a>Sever酱</h2></li></ul><h3 id="1-打开Sever酱网站链接，点击GitHub一键登入"><a href="#1-打开Sever酱网站链接，点击GitHub一键登入" class="headerlink" title="1.打开Sever酱网站链接，点击GitHub一键登入"></a>1.打开<a href="http://sc.ftqq.com/3.version">Sever酱</a>网站链接，点击GitHub一键登入</h3><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.b5pJSBa8KuVMzzA66T7S.ltSe2E3vLaEfztaRcAvv2jxIX*PGmv1gl*AUZt8vEKXcqFEpGR9ydmmXM04Fszbkc!/r" alt="Server酱-1" width="80%"><br><h3 id="2-到微信推送页面，按照提示绑定微信（需要关注Server酱公众号）"><a href="#2-到微信推送页面，按照提示绑定微信（需要关注Server酱公众号）" class="headerlink" title="2.到微信推送页面，按照提示绑定微信（需要关注Server酱公众号）"></a>2.到<code>微信推送</code>页面，按照提示绑定微信（需要关注Server酱公众号）</h3><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.aCC0qnOxMGcKrOLPO2jhP.ccZ8DnCzF4iNonNgaY2x9.QonRaap6Uost9MClT31F0FLVpde5vkA6JZtogVVNrY!/r" alt="Server酱-2" width="80%"><h3 id="3-获取SCKEY并保存记录下载，等会要用到"><a href="#3-获取SCKEY并保存记录下载，等会要用到" class="headerlink" title="3.获取SCKEY并保存记录下载，等会要用到"></a>3.获取SCKEY并保存记录下载，等会要用到</h3><h3 id="4-将以下JS代码粘贴到博客网站引用的JS文件中，这里我用的是matery主题，我把它粘贴到source-js-matery-js文件底部，另起一行直接粘贴即可"><a href="#4-将以下JS代码粘贴到博客网站引用的JS文件中，这里我用的是matery主题，我把它粘贴到source-js-matery-js文件底部，另起一行直接粘贴即可" class="headerlink" title="4.将以下JS代码粘贴到博客网站引用的JS文件中，这里我用的是matery主题，我把它粘贴到source/js/matery.js文件底部，另起一行直接粘贴即可"></a>4.将以下JS代码粘贴到博客网站引用的JS文件中，这里我用的是matery主题，我把它粘贴到<code>source/js/matery.js</code>文件底部，另起一行直接粘贴即可</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title1=<span class="string">&quot;text=KZblog又有新评论啦~！--by Valine&quot;</span></span><br><span class="line"><span class="keyword">var</span> SCKEY_Server=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> ValineButton=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vsubmit vbtn&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send_valine_Server</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text=<span class="string">&quot;desp=&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> pagename=<span class="built_in">document</span>.title;</span><br><span class="line">    <span class="keyword">var</span> wz=pagename.indexOf(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> res=pagename.substring(<span class="number">0</span>,wz);</span><br><span class="line">    <span class="keyword">var</span> pageurl=<span class="built_in">document</span>.URL;</span><br><span class="line">    <span class="keyword">var</span> ptime=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> vnick=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vnick vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> vmail=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vmail vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> vlink=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vlink vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> veditor=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;veditor vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> data=text+<span class="string">&quot;|昵称：&quot;</span>+<span class="string">&quot;|邮箱：&quot;</span>+<span class="string">&quot;|网站地址：&quot;</span>+<span class="string">&quot;|当前页面：&quot;</span>+<span class="string">&quot;|评论内容：&quot;</span>+<span class="string">&quot;|跳转链接：&quot;</span>+<span class="string">&quot;|评论时间&quot;</span>+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;|----|----|----|----|&quot;</span>+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;|   &quot;</span>+vnick+<span class="string">&quot;   |   &quot;</span>+vmail+<span class="string">&quot;  |  &quot;</span>+vlink+<span class="string">&quot;|   &quot;</span>+res+<span class="string">&quot;| &quot;</span>+veditor+<span class="string">&quot;| &quot;</span>+pageurl+<span class="string">&quot;|&quot;</span> +ptime.toLocaleString()+<span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//第一步：创建需要的对象</span></span><br><span class="line">    httpRequest.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;https://sc.ftqq.com/&#x27;</span>+SCKEY_Server+<span class="string">&#x27;.send&#x27;</span>, <span class="literal">true</span>); <span class="comment">//第二步：打开连接</span></span><br><span class="line">    httpRequest.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);<span class="comment">//设置请求头 注：post方式必须设置请求头（在建立连接后设置请求头）</span></span><br><span class="line">    httpRequest.send(title1+<span class="string">&quot;&amp;&quot;</span>+data);<span class="comment">//发送请求 将情头体写在send中</span></span><br><span class="line">&#125;;</span><br><span class="line">ValineButton.onclick=send_valine_Server;</span><br></pre></td></tr></table></figure><p>如果你想适配你的站点，只需要修改SCKEY_Server的值和title1的值即可，将之前获取到的SCKEY的值填入双引号之中，比如<code>SCKEY_Server=&quot;SCUXXXXXXXXXXXXXXXXXXXX706c&quot;</code>，将title1里<code>text=</code>**而不是第4行的<code>var text</code>**后面的内容修改成你想要的内容即可（注意：不要将最后的引号删掉了）</p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.Z.7vnzprKgsVDprkfxNyEc*p.hHePStY2NR4xurqmB5RxiFuLpJtgCKE8UV3tf.rihCwfD7MTESEtEbHpUEYMk!/r" alt="需要修改的地方"><br><p><code>title1</code>对应下图中红色方框的部分标题，内容我写好了模板，会显示昵称、邮箱、网站地址、当前页面、评论内容、跳转链接、评论时间，以表格的形式显示出来。</p><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.XgimFlMhY8OFBo6Ypv28tUK3xug1ys3A.vT0vc.OMPtt9tplPFIsmV.1woUo.Y3y7.5JBshs.kK0hPl6fM2BZw!/r" alt="title1对应标题" width="80%"><br><ul><li><h2 id="Qmsg酱"><a href="#Qmsg酱" class="headerlink" title="Qmsg酱"></a>Qmsg酱</h2></li></ul><h3 id="1-进入Qmsg酱网站，一键QQ登录"><a href="#1-进入Qmsg酱网站，一键QQ登录" class="headerlink" title="1.进入Qmsg酱网站，一键QQ登录"></a>1.进入<a href="https://qmsg.zendee.cn/api.html">Qmsg酱</a>网站，一键QQ登录</h3><h3 id="2-选择Qmsg酱小姐姐，并添加QQ号"><a href="#2-选择Qmsg酱小姐姐，并添加QQ号" class="headerlink" title="2.选择Qmsg酱小姐姐，并添加QQ号"></a>2.选择Qmsg酱小姐姐，并添加QQ号</h3><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.eOQNiMxWknOZbzLLIp*0r.OPNojBm37PVPZ12*kQt78RNUTWh90NPJlESLphb1Cf1KuVXv8C69HK4xgcT8oG44!/r" alt="选择Qmsg小姐姐并添加QQ号" width="80%"><br><h3 id="3-将接口地址保存记录下来，等会要用"><a href="#3-将接口地址保存记录下来，等会要用" class="headerlink" title="3.将接口地址保存记录下来，等会要用"></a>3.将接口地址保存记录下来，等会要用</h3><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.RnCYNxBZ6lVHX.2*XeguzCMWEa6ung7arDE.BXzM8Zxvn7dWp0DB.cNE4KjL*XMtLvPO7uPtiZbstUDMhg4.f0!/r" alt="保存接口地址" width="80%"><br><h3 id="4-将以下代码像Server酱的代码一样粘贴到随便一个引用的JS文件中，比如粘贴到matery-js底部另起一行直接粘贴"><a href="#4-将以下代码像Server酱的代码一样粘贴到随便一个引用的JS文件中，比如粘贴到matery-js底部另起一行直接粘贴" class="headerlink" title="4.将以下代码像Server酱的代码一样粘贴到随便一个引用的JS文件中，比如粘贴到matery.js底部另起一行直接粘贴"></a>4.将以下代码像Server酱的代码一样粘贴到随便一个引用的JS文件中，比如粘贴到<code>matery.js</code>底部另起一行直接粘贴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title2=<span class="string">&quot;msg=KZblog又有新评论啦~！--by Valine\n&quot;</span></span><br><span class="line"><span class="keyword">var</span> SCKEY_Qmsg=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> ValineButton=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vsubmit vbtn&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send_valine_Qmsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pagename=<span class="built_in">document</span>.title;</span><br><span class="line">    <span class="keyword">var</span> wz=pagename.indexOf(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> res=pagename.substring(<span class="number">0</span>,wz);</span><br><span class="line">    <span class="keyword">var</span> pageurl=<span class="built_in">document</span>.URL;</span><br><span class="line">    <span class="keyword">var</span> ptime=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> vnick=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vnick vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> vmail=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vmail vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> vlink=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;vlink vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> veditor=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;veditor vinput&quot;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> data=<span class="string">&quot;昵称：&quot;</span>+vnick+<span class="string">&quot;\n邮箱：&quot;</span>+vmail+<span class="string">&quot;\n网站地址：&quot;</span>+vlink+<span class="string">&quot;\n当前页面：&quot;</span>+pagename+<span class="string">&quot;\n评论内容：&quot;</span>+veditor+<span class="string">&quot;\n跳转链接：&quot;</span>+pageurl+<span class="string">&quot;\n评论时间&quot;</span>+ptime.toLocaleString();</span><br><span class="line">    <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//第一步：创建需要的对象</span></span><br><span class="line">    httpRequest.open(<span class="string">&#x27;POST&#x27;</span>,SCKEY_Qmsg, <span class="literal">true</span>); <span class="comment">//第二步：打开连接</span></span><br><span class="line">    httpRequest.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);<span class="comment">//设置请求头 注：post方式必须设置请求头（在建立连接后设置请求头）</span></span><br><span class="line">    httpRequest.send(title2+data);<span class="comment">//发送请求 将情头体写在send中</span></span><br><span class="line">&#125;;</span><br><span class="line">ValineButton.onclick=send_valine_Qmsg;</span><br></pre></td></tr></table></figure><p>修改SCKEY_Qmsg值，将先前保存的接口地址填入即可，比如<code>SCKEY_Qmsg=&quot;https://qmsg.zendee.cn:443/send/85XXXXXXXXXXXX2433.html&quot;</code>，title2中<code>msg=</code>后面的内容可以随意修改，保留后面的<code>\n</code>用来换行，不然排版不好看。然后重新生成静态页面就能成功接收推送了</p><br><img src= "/img/loading.gif" data-lazy-src="https://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.ch9O553v.oiNHgORxzYe.Bht2rdQnZWjne0OdyzqQtrBhmL3y8iAqrGhInEJ0aeC3muZ38F6U3Hmgtz4zrRwiE!/r" alt="推送结果" width="30%"><br><blockquote><p>PS：本人才疏学浅，写的代码在内行人看来难免会觉得冗余、低效、不美观，有能力的自行修改便可，如有错误欢迎指正，也欢迎大家在评论区讨论。</p><p>另外，就我目前测试而言Server酱和Qmsg酱无法同时使用，如果这两段代码都加上去只有Qmsg生效。所以Server酱和Qmsg二选其一吧，看自己方便用哪个？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人常用软件推荐</title>
      <link href="posts/2805.html"/>
      <url>posts/2805.html</url>
      
        <content type="html"><![CDATA[<h2 id="个人常用软件推荐"><a href="#个人常用软件推荐" class="headerlink" title="个人常用软件推荐"></a><center>个人常用软件推荐</center></h2><h2 id="云盘类："><a href="#云盘类：" class="headerlink" title="云盘类："></a>云盘类：</h2><ul><li><p>百度网盘</p></li><li><p>微软onedrive</p><p>（首推onedrive，速度很快，基本能跑满）</p></li></ul><h2 id="社交类："><a href="#社交类：" class="headerlink" title="社交类："></a>社交类：</h2><ul><li>腾讯QQ</li><li>微信</li><li>知乎</li></ul><h2 id="文档编辑类："><a href="#文档编辑类：" class="headerlink" title="文档编辑类："></a>文档编辑类：</h2><ul><li>typora（Markdown文档编辑器，用了的都说好！）</li><li>MIcrosoft Word（微软office）</li><li>WPS（金山办公软件）</li></ul><h2 id="开发工具类："><a href="#开发工具类：" class="headerlink" title="开发工具类："></a>开发工具类：</h2><ul><li>Visual Studio（微软官方IDE）</li><li>intelliJ IDEA（Jetbrains出品）</li></ul><h2 id="下载工具类："><a href="#下载工具类：" class="headerlink" title="下载工具类："></a>下载工具类：</h2><ul><li>qBittorrent（简洁、美观、且实用的BT下载工具）</li><li>迅雷（偶尔用用）</li><li>BitComet（qBittorrent的备选）</li><li>唧唧（Bilibili视频下载工具）</li></ul><h2 id="游戏类："><a href="#游戏类：" class="headerlink" title="游戏类："></a>游戏类：</h2><ul><li>Steam（这个不用我多说吧？）</li><li>Wegame</li><li>Uplay</li></ul><h2 id="创意类："><a href="#创意类：" class="headerlink" title="创意类："></a>创意类：</h2><ul><li>Adobe Effects（后期特效、合成、动效）</li><li>Adobe Photoshop（图片编辑）</li><li>Adobe MediaEncoder（媒体编码、格式转换等，能够输出多种编码和文件格式）</li><li>Adobe Premiere（视频剪辑）</li><li>Davinci（达芬奇：视频剪辑和调色）</li></ul><h2 id="音乐类："><a href="#音乐类：" class="headerlink" title="音乐类："></a>音乐类：</h2><ul><li>网易云音乐</li><li>QQ音乐</li></ul><h2 id="视频播放类："><a href="#视频播放类：" class="headerlink" title="视频播放类："></a>视频播放类：</h2><ul><li><h3 id="本地播放器："><a href="#本地播放器：" class="headerlink" title="本地播放器："></a>本地播放器：</h3><ul><li><h4 id="potplayer"><a href="#potplayer" class="headerlink" title="potplayer"></a>potplayer</h4><blockquote><p>使用<a href="http://jm.wmzhe.com/"><strong>完美解码</strong></a>提供的整合好的安装包，直接一键安装potplayer和LAV解码器、MadVR渲染器。三者搭配可以说是PC平台最佳高清HDR视频播放方案</p></blockquote></li><li><h4 id="MPC-BE"><a href="#MPC-BE" class="headerlink" title="MPC-BE"></a>MPC-BE</h4><blockquote><p>用以替代potplayer的方案，一样能搭配LAV解码器和MadVR渲染器，包含在<a href="http://jm.wmzhe.com/"><strong>完美解码</strong></a>的安装包内，在播放solLevante的测试中性能上貌似比potplayer略胜一筹……</p></blockquote></li></ul></li><li><h3 id="网络视频："><a href="#网络视频：" class="headerlink" title="网络视频："></a>网络视频：</h3><ul><li>腾讯视频</li><li>爱奇艺</li><li>哔哩哔哩</li></ul></li></ul><p align="right"><i>待后续更新……</i></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码详解</title>
      <link href="posts/cd24.html"/>
      <url>posts/cd24.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP状态码详解"><a href="#HTTP状态码详解" class="headerlink" title="HTTP状态码详解"></a><center>HTTP状态码详解</center></h2><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>100</td><td>客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</td></tr><tr><td>101</td><td>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 　只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</td></tr><tr><td>102</td><td>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td></tr><tr><td>200</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回。</td></tr><tr><td>201</td><td>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</td></tr><tr><td>202</td><td>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 　返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</td></tr><tr><td>203</td><td>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td></tr><tr><td>204</td><td>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 　如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 　由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td></tr><tr><td>205</td><td>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 　与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td></tr><tr><td>206</td><td>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP  下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 　该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 　响应必须包含如下的头部域： 　Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为  multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range  域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 　Date 　ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 　Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range  弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 　假如 ETag 或 Last-Modified  头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 　任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</td></tr><tr><td>207</td><td>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td></tr><tr><td>300</td><td>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 　除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC  2616规范并没有规定这样的自动选择该如何进行。 　如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location  值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</td></tr><tr><td>301</td><td>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 　新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</td></tr><tr><td>302</td><td>请求的资源现在临时从不同的 URI  响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI  的超链接及简短说明。 　如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　注意：虽然RFC 1945和RFC  2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在  Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</td></tr><tr><td>303</td><td>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET  的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI  不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 　新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI  的超链接及简短说明。 　注意：许多 HTTP/1.1 版以前的  浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</td></tr><tr><td>304</td><td>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 　该响应必须包含以下的头信息： 　Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 　ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 　Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 　假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 　假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</td></tr><tr><td>305</td><td>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 　注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</td></tr><tr><td>306</td><td>在最新版的规范中，306状态码已经不再被使用。</td></tr><tr><td>307</td><td>请求的资源现在临时从不同的URI  响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI  的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 　如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</td></tr><tr><td>400</td><td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 　2、请求参数有误。</td></tr><tr><td>401</td><td>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate  信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了  Authorization  证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td></tr><tr><td>402</td><td>该状态码是为了将来可能的需求而预留的。</td></tr><tr><td>403</td><td>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD  请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td></tr><tr><td>404</td><td>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td></tr><tr><td>405</td><td>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 　鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td></tr><tr><td>406</td><td>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 　除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由  Content-Type  头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td></tr><tr><td>407</td><td>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</td></tr><tr><td>408</td><td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td></tr><tr><td>409</td><td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 　冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT  提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td></tr><tr><td>410</td><td>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 　410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td></tr><tr><td>411</td><td>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td></tr><tr><td>412</td><td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td></tr><tr><td>413</td><td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 　如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td></tr><tr><td>414</td><td>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 　本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 　重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 　客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td></tr><tr><td>415</td><td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td></tr><tr><td>416</td><td>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义  If-Range 请求头，那么服务器就应当返回416状态码。 　假如 Range  使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个  Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其  Content-Type。</td></tr><tr><td>417</td><td>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td></tr><tr><td>421</td><td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td>422</td><td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td>422</td><td>请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 　当前资源被锁定。（RFC 4918 WebDAV）</td></tr><tr><td>424</td><td>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td></tr><tr><td>425</td><td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td></tr><tr><td>426</td><td>客户端应当切换到TLS/1.0。（RFC 2817）</td></tr><tr><td>449</td><td>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td></tr><tr><td>500</td><td>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</td></tr><tr><td>501</td><td>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</td></tr><tr><td>502</td><td>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td></tr><tr><td>503</td><td>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 　注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</td></tr><tr><td>504</td><td>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 　注意：某些代理服务器在DNS查询超时时会返回400或者500错误</td></tr><tr><td>505</td><td>服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</td></tr><tr><td>506</td><td>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td></tr><tr><td>507</td><td>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td></tr><tr><td>509</td><td>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td></tr><tr><td>510</td><td>获取资源所需要的策略并没有没满足。（RFC 2774）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> HTTP </tag>
            
            <tag> 状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML转义符表</title>
      <link href="posts/357d.html"/>
      <url>posts/357d.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML特殊转义字符对照表"><a href="#HTML特殊转义字符对照表" class="headerlink" title="HTML特殊转义字符对照表"></a><center>HTML特殊转义字符对照表</center></h2><table><thead><tr><th>字符</th><th>十进制</th><th>转义字符</th></tr></thead><tbody><tr><td>“</td><td>&amp;#34;</td><td>&amp;quot;</td></tr><tr><td>&amp;</td><td>&amp;#38;</td><td>&amp;amp;</td></tr><tr><td>&lt;</td><td>&amp;#60;</td><td>&amp;lt;</td></tr><tr><td>&gt;</td><td>&amp;#62;</td><td>&amp;gt;</td></tr><tr><td>不断开空格(non-breaking space)</td><td>&amp;#160;</td><td>&amp;nbsp;</td></tr></tbody></table><p>​        </p><table><thead><tr><th>字符</th><th>十进制</th><th>转义字符</th><th>字符</th><th>十进制</th><th>转义字符</th><th>字符</th><th>十进制</th><th>转义字符</th></tr></thead><tbody><tr><td>?</td><td>&amp;#161;</td><td>&amp;iexcl;</td><td>Á</td><td>&amp;#193;</td><td>&amp;Aacute;</td><td>á</td><td>&amp;#225;</td><td>&amp;aacute;</td></tr><tr><td>￠</td><td>&amp;#162;</td><td>&amp;cent;</td><td>Â</td><td>&amp;#194;</td><td>&amp;circ;</td><td>â</td><td>&amp;#226</td><td>&amp;acirc;</td></tr><tr><td>￡</td><td>&amp;#163;</td><td>&amp;pound;</td><td>Ã</td><td>&amp;#195;</td><td>&amp;Atilde;</td><td>ã</td><td>&amp;#227;</td><td>&amp;atilde;</td></tr><tr><td>¤</td><td>&amp;#164;</td><td>&amp;curren;</td><td>Ä</td><td>&amp;#196;</td><td>&amp;Auml</td><td>ä</td><td>&amp;#228;</td><td>&amp;auml;</td></tr><tr><td>￥</td><td>&amp;#165;</td><td>&amp;yen;</td><td>Å</td><td>&amp;#197;</td><td>&amp;ring;</td><td>å</td><td>&amp;#229;</td><td>&amp;aring;</td></tr><tr><td>|</td><td>&amp;#166;</td><td>&amp;brvbar;</td><td>Æ</td><td>&amp;#198;</td><td>&amp;AElig;</td><td>æ</td><td>&amp;#230;</td><td>&amp;aelig;</td></tr><tr><td>§</td><td>&amp;#167;</td><td>&amp;sect;</td><td>Ç</td><td>&amp;#199;</td><td>&amp;Ccedil;</td><td>ç</td><td>&amp;#231;</td><td>&amp;ccedil;</td></tr><tr><td>¨</td><td>&amp;#168;</td><td>&amp;uml;</td><td>È</td><td>&amp;#200;</td><td>&amp;Egrave;</td><td>è</td><td>&amp;#232;</td><td>&amp;egrave;</td></tr><tr><td>©</td><td>&amp;#169;</td><td>&amp;copy;</td><td>É</td><td>&amp;#201;</td><td>&amp;Eacute;</td><td>é</td><td>&amp;#233;</td><td>&amp;eacute;</td></tr><tr><td>a</td><td>&amp;#170;</td><td>&amp;ordf;</td><td>Ê</td><td>&amp;#202;</td><td>&amp;Ecirc;</td><td>ê</td><td>&amp;#234;</td><td>&amp;ecirc;</td></tr><tr><td>?</td><td>&amp;#171;</td><td>&amp;laquo;</td><td>Ë</td><td>&amp;#203;</td><td>&amp;Euml;</td><td>ë</td><td>&amp;#235;</td><td>&amp;euml;</td></tr><tr><td>?</td><td>&amp;#172;</td><td>&amp;not;</td><td>Ì</td><td>&amp;#204;</td><td>&amp;Igrave;</td><td>ì</td><td>&amp;#236;</td><td>&amp;igrave;</td></tr><tr><td>/x7f</td><td>&amp;#173;</td><td>&amp;shy;</td><td>Í</td><td>&amp;#205;</td><td>&amp;Iacute;</td><td>í</td><td>&amp;#237;</td><td>&amp;iacute;</td></tr><tr><td>®</td><td>&amp;#174;</td><td>&amp;reg;</td><td>Î</td><td>&amp;#206;</td><td>&amp;Icirc;</td><td>î</td><td>&amp;#238;</td><td>&amp;icirc;</td></tr><tr><td>ˉ</td><td>&amp;#175;</td><td>&amp;macr;</td><td>Ï</td><td>&amp;#207;</td><td>&amp;Iuml;</td><td>ï</td><td>&amp;#239;</td><td>&amp;iuml;</td></tr><tr><td>°</td><td>&amp;#176;</td><td>&amp;deg;</td><td>Ð</td><td>&amp;#208;</td><td>&amp;ETH;</td><td>ð</td><td>&amp;#240;</td><td>&amp;ieth;</td></tr><tr><td>±</td><td>&amp;#177;</td><td>&amp;plusmn;</td><td>Ñ</td><td>&amp;#209;</td><td>&amp;Ntilde;</td><td>ñ</td><td>&amp;#241;</td><td>&amp;ntilde;</td></tr><tr><td>2</td><td>&amp;#178;</td><td>&amp;sup2;</td><td>Ò</td><td>&amp;#210;</td><td>&amp;Ograve;</td><td>ò</td><td>&amp;#242;</td><td>&amp;ograve;</td></tr><tr><td>3</td><td>&amp;#179;</td><td>&amp;sup3;</td><td>Ó</td><td>&amp;#211;</td><td>&amp;Oacute;</td><td>ó</td><td>&amp;#243;</td><td>&amp;oacute;</td></tr><tr><td>′</td><td>&amp;#180;</td><td>&amp;acute;</td><td>Ô</td><td>&amp;#212;</td><td>&amp;Ocirc;</td><td>ô</td><td>&amp;#244;</td><td>&amp;ocirc;</td></tr><tr><td>μ</td><td>&amp;#181;</td><td>&amp;micro;</td><td>Õ</td><td>&amp;#213;</td><td>&amp;Otilde;</td><td>õ</td><td>&amp;#245;</td><td>&amp;otilde;</td></tr><tr><td>?</td><td>&amp;#182;</td><td>&amp;para;</td><td>Ö</td><td>&amp;#214;</td><td>&amp;Ouml;</td><td>ö</td><td>&amp;#246;</td><td>&amp;ouml;</td></tr><tr><td>·</td><td>&amp;#183;</td><td>&amp;middot;</td><td>&amp;times;</td><td>&amp;#215;</td><td>&amp;times;</td><td>÷</td><td>&amp;#247;</td><td>&amp;divide;</td></tr><tr><td>?</td><td>&amp;#184;</td><td>&amp;cedil;</td><td>Ø</td><td>&amp;#216;</td><td>&amp;Oslash;</td><td>ø</td><td>&amp;#248;</td><td>&amp;oslash;</td></tr><tr><td>1</td><td>&amp;#185;</td><td>&amp;sup1;</td><td>Ù</td><td>&amp;#217;</td><td>&amp;Ugrave;</td><td>ù</td><td>&amp;#249;</td><td>&amp;ugrave;</td></tr><tr><td>o</td><td>&amp;#186;</td><td>&amp;ordm;</td><td>Ú</td><td>&amp;#218;</td><td>&amp;Uacute;</td><td>ú</td><td>&amp;#250;</td><td>&amp;uacute;</td></tr><tr><td>?</td><td>&amp;#187;</td><td>&amp;raquo;</td><td>Û</td><td>&amp;#219;</td><td>&amp;Ucirc;</td><td>û</td><td>&amp;#251;</td><td>&amp;ucirc;</td></tr><tr><td>?</td><td>&amp;#188;</td><td>&amp;frac14;</td><td>Ü</td><td>&amp;#220;</td><td>&amp;Uuml;</td><td>ü</td><td>&amp;#252;</td><td>&amp;uuml;</td></tr><tr><td>?</td><td>&amp;#189;</td><td>&amp;frac12;</td><td>Ý</td><td>&amp;#221;</td><td>&amp;Yacute;</td><td>ý</td><td>&amp;#253;</td><td>&amp;yacute;</td></tr><tr><td>?</td><td>&amp;#190;</td><td>&amp;frac34;</td><td>Þ</td><td>&amp;#222;</td><td>&amp;THORN;</td><td>þ</td><td>&amp;#254;</td><td>&amp;thorn;</td></tr><tr><td>?</td><td>&amp;#191;</td><td>&amp;iquest;</td><td>ß</td><td>&amp;#223;</td><td>&amp;szlig;</td><td>ÿ</td><td>&amp;#255;</td><td>&amp;yuml;</td></tr><tr><td>À</td><td>&amp;#192;</td><td>&amp;Agrave;</td><td>à</td><td>&amp;#224;</td><td>&amp;agrave;</td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 转义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗站长强开sitemap提交权限</title>
      <link href="posts/cde4.html"/>
      <url>posts/cde4.html</url>
      
        <content type="html"><![CDATA[<h2 id="搜狗站长平台强开sitemap提交权限"><a href="#搜狗站长平台强开sitemap提交权限" class="headerlink" title="搜狗站长平台强开sitemap提交权限"></a><center>搜狗站长平台强开sitemap提交权限</center></h2><h3 id="1-注册搜狗站长平台，添加你的站点"><a href="#1-注册搜狗站长平台，添加你的站点" class="headerlink" title="1.注册搜狗站长平台，添加你的站点"></a>1.注册搜狗站长平台，添加你的站点</h3><p>搜狗站长平台地址：<a href="http://zhanzhang.sogou.com/">http://zhanzhang.sogou.com/</a></p><p>怎么注册这个就不用我说了吧，如果你这都不会，你还折腾啥？</p><h3 id="2-进入后台，点击网站支持，浏览器右键查看源代码"><a href="#2-进入后台，点击网站支持，浏览器右键查看源代码" class="headerlink" title="2.进入后台，点击网站支持，浏览器右键查看源代码"></a>2.进入后台，点击网站支持，浏览器右键查看源代码</h3><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.XDDWWt4PKLcvVxdUc2HZfbIOVL3Y7x9geXjNj8Q3rMgk0w7wvX7sOE7yi3GJVhoROdmnlyNkVmdBSj00qNsZ8c!/r"></p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.TyqFAHsPyi4bjeCviUtA3BErJcq4SkcTgm.VXGZjdlDYCaeqeHvG5JsYjhfqfsI7je8nZAyOw0eEuxNsYV4ISM!/r"></p><p><br>使用搜索功能找到如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;你的网站ID号&quot;</span>&gt;</span>www.你的域名.com<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.VWpmCAFjQg9POnEbCt0KKVxXU2.slFSdbpx7ym3NeS5tFsivHT2ovewCTVc8*LAkDa2YZrEHDkxi36oOHvnX*c!/r"></p><p><br>把网站ID号保存下来，网站ID一般是一串数字</p><p>我们将你的网站ID放到下面这个链接的末尾，</p><p><a href="http://zhanzhang.sogou.com/index.php/sitemap/create/id/">http://zhanzhang.sogou.com/index.php/sitemap/create/id/</a></p><p>把你的网站ID号放最后，比如你的ID是1234567</p><p><a href="http://zhanzhang.sogou.com/index.php/sitemap/create/id/1234567">http://zhanzhang.sogou.com/index.php/sitemap/create/id/1234567</a></p><p>复制到浏览器地址栏，回车，神奇的一幕出现了，直接提交地图即可。如图所示</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.W8EQqAs*7Dg16X0eiiAkxonTTQg15jwrD4Pvxtpbzbr9zb8A8uu81EVF2RH8kVZcQxguHR2FnyGE1xG1U7FY3E!/r"></p><p><br>如果需要搜狗的sitemap提交权限，可以按照此方法进行尝试，亲测有效！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
            <tag> 收录 </tag>
            
            <tag> 搜狗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD命令之设置变量</title>
      <link href="posts/c401.html"/>
      <url>posts/c401.html</url>
      
        <content type="html"><![CDATA[<h2 id="CMD命令之–设置变量"><a href="#CMD命令之–设置变量" class="headerlink" title="CMD命令之–设置变量"></a><center>CMD命令之–设置变量</center></h2><ul><li><h3 id="例1：设定抄固定变量"><a href="#例1：设定抄固定变量" class="headerlink" title="例1：设定抄固定变量"></a>例1：设定抄固定变量</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;name=张三&quot;</span></span><br><span class="line"><span class="built_in">echo</span>.%name%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li></ul><ul><li><h3 id="例2：设定自行输入变量"><a href="#例2：设定自行输入变量" class="headerlink" title="例2：设定自行输入变量"></a>例2：设定自行输入变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set /p name=请输入你的名字，然后回车百</span><br><span class="line">echo 你的名字是：%name%</span><br><span class="line">pause </span><br></pre></td></tr></table></figure></li></ul><ul><li><h3 id="例3：设定某个文本为度变量"><a href="#例3：设定某个文本为度变量" class="headerlink" title="例3：设定某个文本为度变量"></a>例3：设定某个文本为度变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set /p name=&lt;c:\1.txt</span><br><span class="line">echo.文本内容为：%name%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD </tag>
            
            <tag> DOS </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#指针</title>
      <link href="posts/78c5.html"/>
      <url>posts/78c5.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-中指针使用总结"><a href="#C-中指针使用总结" class="headerlink" title="C#中指针使用总结"></a><center>C#中指针使用总结</center></h2><p>C#为了类型安全，默认并不支持指针。但是也并不是说C#不支持指针，我们可以使用unsafe关键词，开启不安全代码(unsafe  code)开发模式。在不安全模式下，我们可以直接操作内存，这样就可以使用指针了。在不安全模式下，CLR并不检测unsafe代码的安全，而是直接执行代码。unsafe代码的安全需要开发人员自行检测。</p><h2 id="一、Vs2010中开启unsafe-code-的方式"><a href="#一、Vs2010中开启unsafe-code-的方式" class="headerlink" title="一、Vs2010中开启unsafe code 的方式"></a>一、Vs2010中开启unsafe code 的方式</h2><p>在方法、类、代码块中使用unsafe关键词，如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123; <span class="comment">//代码&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再项目上点击鼠标右键，选择“属性”，在“生成”选项卡中选中“允许不安全代码”</p><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/20200405180355.png"></p><h2 id="二、C-可以定义为指针的类型有"><a href="#二、C-可以定义为指针的类型有" class="headerlink" title="二、C#可以定义为指针的类型有"></a>二、C#可以定义为指针的类型有</h2><p>sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool，<br>struct(结构体)，结构体中只能包括非托管类型。</p><h2 id="三、C-指针操作符"><a href="#三、C-指针操作符" class="headerlink" title="三、C#指针操作符"></a>三、C#指针操作符</h2><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>取值运算符</td></tr><tr><td>&amp;</td><td>取址运算符</td></tr><tr><td>-&gt;</td><td>通过指针处理结构体中的数据（获取或赋值）</td></tr><tr><td>++与–</td><td>指针增、减操作</td></tr><tr><td>fixed</td><td>用户暂时固定托管代码中引用类型的位置。</td></tr><tr><td>Stackallc</td><td>分配内存</td></tr></tbody></table><p>例如分配内存</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span>* cptr = <span class="keyword">stackalloc</span> <span class="built_in">char</span>[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>;i++ )</span><br><span class="line">&#123;</span><br><span class="line">    cptr[i] = (<span class="built_in">char</span>) (i+<span class="number">65</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>;i++ )</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;:&#123;1&#125;&quot;</span>,(<span class="built_in">int</span>)&amp;cptr[i],cptr[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于释放内存，我在msdn上搜索了一下，c#并没有提供释放内存的函数。而msdn给的解释是：分配的内存会在方法结束后自动释放。<br>fixed的应用会在下面的类与指针中做说明。</p><h2 id="四、C-指针的定义"><a href="#四、C-指针的定义" class="headerlink" title="四、C#指针的定义"></a>四、C#指针的定义</h2><table><thead><tr><th>定义指针</th><th>说明</th></tr></thead><tbody><tr><td>int* p</td><td>整形指针</td></tr><tr><td>int** p</td><td>指向整形指针的指针</td></tr><tr><td>char* c</td><td>指向字符的指针</td></tr><tr><td>int*[] arr</td><td>整形一维数组指针</td></tr></tbody></table><h2 id="五、指针的使用"><a href="#五、指针的使用" class="headerlink" title="五、指针的使用"></a>五、指针的使用</h2><h3 id="1-整形指针的使用"><a href="#1-整形指针的使用" class="headerlink" title="1.整形指针的使用"></a>1.整形指针的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i&#x3D;10;</span><br><span class="line">int* iptr &#x3D; &amp;i;    &#x2F;&#x2F;将i的地址赋值给iptr</span><br><span class="line">Console.WriteLine((int)&amp;iptr);  &#x2F;&#x2F;取iptr得地址</span><br><span class="line">Console.WriteLine(*iptr);     &#x2F;&#x2F;取iptr指向的值</span><br></pre></td></tr></table></figure><h3 id="2-结构体指针"><a href="#2-结构体指针" class="headerlink" title="2.结构体指针"></a>2.结构体指针</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Location</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Location location;</span><br><span class="line">    location.X = <span class="number">10</span>;</span><br><span class="line">    location.Y = <span class="number">5</span>;</span><br><span class="line">    Location* lptr = &amp;location;</span><br><span class="line">    Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;location 地址&#123;0&#125;,lptr地址&#123;1&#125;,lptr值&#123;2&#125;&quot;</span>,(<span class="built_in">int</span>)&amp;location,(<span class="built_in">int</span>)lptr,*lptr));</span><br><span class="line">    Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;location.x的地址&#123;0&#125;，location.x的值&#123;1&#125;&quot;</span>,(<span class="built_in">int</span>)&amp;(lptr-&gt;X),lptr-&gt;X));</span><br><span class="line">    Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;location.y的地址&#123;0&#125;，location.y的值&#123;1&#125;&quot;</span>, (<span class="built_in">int</span>)&amp;(lptr-&gt;Y), lptr-&gt;Y));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>以上代码输出结构体的地址和值。我们在操作地址时，可以直接看到结构体的内存分配。</p><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/20200405180428.png"></p><h3 id="3-指针与参数"><a href="#3-指针与参数" class="headerlink" title="3.指针与参数"></a>3.指针与参数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">unsafe</span> <span class="built_in">int</span>* Add(<span class="built_in">int</span>* x,<span class="built_in">int</span>* y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = *x + *y;</span><br><span class="line">    <span class="keyword">return</span> &amp;sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">2</span>, j = <span class="number">3</span>;</span><br><span class="line">Console.WriteLine(*Add(&amp;i,&amp;j));</span><br></pre></td></tr></table></figure><h3 id="4-类与指针"><a href="#4-类与指针" class="headerlink" title="4.类与指针"></a>4.类与指针</h3><p>因为类是托管类型，我们知道类受到“垃圾收集”的影响，它的内存地址是不固定的。而且类是引用类型，是不能声明为指针类型的。而指针分配内存后，不受“垃圾收集”影响，地址是固定的。所以为了使用类中的数据，我们需要临时固定类的地址。这就用到fixed关键词，用fixed后，就可以操作类中的值类型了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age;   <span class="comment">//值类型，不可以是属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowAge</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(Age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">People people = <span class="keyword">new</span> People();</span><br><span class="line">people.Age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">fixed</span>(<span class="built_in">int</span>* agePtr=&amp;people.Age)</span><br><span class="line">&#123;</span><br><span class="line">    *agePtr += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">people.ShowAge();  <span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>通过以上的方法，我们可以操作值类型，也可以获得值类型的地址。但如何获取类的内存地址？我们可以使用GCHandle,来自System.Runtime.InteropServices命名空间。GCHandle提供从非托管内存访问托管对象的方法。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">object p &#x3D; new People();</span><br><span class="line">GCHandle h &#x3D; GCHandle.Alloc(p, GCHandleType.Pinned);</span><br><span class="line">IntPtr addr &#x3D; h.AddrOfPinnedObject(); </span><br><span class="line">Console.WriteLine(addr.ToString());</span><br><span class="line">h.Free();</span><br></pre></td></tr></table></figure><h2 id="六、C-中使用指针的总结"><a href="#六、C-中使用指针的总结" class="headerlink" title="六、C#中使用指针的总结"></a>六、C#中使用指针的总结</h2><p>1.引用类型不能定义为指针<br>2.msdn上说enum可以定义为指针，可是我真不知道它的用处是什么。所以在指针的类型中并没有出现enum类型。<br>3.c#中的指针操作远远不如c/c++，如果想学习指针的话，还是用c/c++<br>4.微软并不推荐使用unsafe  code模式，也不推荐使用指针。在msdn官方文档中，唯一一句赞美C#指针的话就是“合理的使用指针，可以提高程序的执行速度”。但是什么是“合理的使用”？我下载了msdn上的几个关于C#指针的实例代码，发现用的最多的是调用api函数，在api函数中，有大量的指针参数。<br>5.fixed的使用可能产生存储碎片，因为它们不能移动。如果确实需要固定对象，固定对象的时间应该越短越好。<br>6.可以使我们了解非托管类型的内存分配。</p><hr><p>转载自：<a href="https://www.cnblogs.com/nimorl/p/9829241.html">https://www.cnblogs.com/nimorl/p/9829241.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 编程 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火狐浏览器打开外链会多开一个标签页解决办法</title>
      <link href="posts/2a4a.html"/>
      <url>posts/2a4a.html</url>
      
        <content type="html"><![CDATA[<h2 id="火狐浏览器打开外链会多开一个标签页解决办法"><a href="#火狐浏览器打开外链会多开一个标签页解决办法" class="headerlink" title="火狐浏览器打开外链会多开一个标签页解决办法"></a><center>火狐浏览器打开外链会多开一个标签页解决办法</center></h2><p>目前公认的最好用的浏览器：</p><ul><li>一个是<strong>火狐Firefox</strong></li><li>一个是<strong>谷歌Chrome</strong></li><li>另一个是谷歌chromium内核的微软官方浏览器<strong>Microsoft Edge</strong></li></ul><p>但国内用<code>谷歌</code>体验不太好，无法使用<code>谷歌账户</code>的云端同步，必须要挂梯子才行。而<code>火狐</code>在中国有自己的分公司，也有自己的服务器，能体验到完整的云端服务，相较之下只好选择<code>火狐</code>了！</p><p>但在使用<code>火狐</code>的过程中，有个问题始终萦绕在我的心头，就是它关闭的状态下打开链接的话会多启动一个标签页，比如我打开qq空间会这样：</p><br/><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.c7Mw4H1nwp5R7UOSxqLDQJBdjEAiSCIxE4eC.1898z45JfuEcFvaumf*qryuYuXfpwJIywys5q9TjM76A*zAiU!/r" alt="关闭状态下打开链接" style="width:80%;" /><br/><p>每次要手动关闭这个多余的标签页，在网上找了一圈，找到一个解决方法：</p><br/><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.YG23bPpWmYvg*9KZyoijrhvGaZbh3XYsfHo3EI0Ppei9BZLmnoWwFD*dRzLrH5R4THV9mww*IHVnswc4cgLXnY!/r" style="width:80%;" /><br/><p>目前最新版<code>火狐</code>已经改版了，所以是<code>工具-选项-主页</code>：</p><br/><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.ZZFCSPYiRZvwJ.29CHhIB6L7g8Z79t0xyOBBlg95d763t*cJFxMnaT9HBq2IY*ZFzutiYbk030FbZ3GCl9NT14!/r" style="width:80%;" /><br/><p>但是这个解决方案有个缺点，就是打开火狐显示主页的时候显示的是空白页，但我又想既能显示主页，又不会在打开外链的时候多弹出标签页，那怎么办呢？经过几小时的摸索终于找到了答案！</p><h2 id="最终解决方法："><a href="#最终解决方法：" class="headerlink" title="最终解决方法："></a>最终解决方法：</h2><p>最终发现是<code>火狐</code>自带的一个叫<code>附加组件管理器</code>的一个扩展导致的问题。</p><br/><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.bVVD0G3n3oRZ0G0vEAJh.Cm2DoI8QsHI*lVE4NDX*O8WfGvz8JP6yYueB8w*1sRBviLdGinV9UMJpMNb*VmJTM!/r" style="width:60%" /><br/><p>所以我们只需要把它禁用就好了！<code>工具-附加组件-禁用附加组件管理器</code>，或者直接按下快捷键<code>Ctrl+Shift+A</code>禁用<code>附加组件管理器</code>。</p><br/><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.drA007TxfXE8YWqZj35XkRhU0mZTNdhg4BxqIqD93IMdJIXRwArUuTn5S5PdgYX0KENdzhX55hPL2jJIJTAu2k!/r" style="width:80%;" /><br/><p>然后点击<code>禁用</code>按钮</p><br/><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.Vhc1qpeGLfc.nAVhqal6wRuBtceGOOL0h65t.1PmOXOuxKKx4sUnQH2.Q91geNyq2*ODRSHA8MvZ71URLH2Iws!/r" style="width:80%;" /><br/><p>最终效果：</p><br/><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.dCWy2kVCRZCOhSEhIJ.WG.rPp.ub.hefj5JWCnhlZjGbx9fi64PPNXSlWeV6GCdClzfwCgz*4ASlNttDApU2Us!/r" style="width:80%;" /><br/><p>至此，困扰我良久的浏览器问题终于解决了，这个问题好像只在中国版<code>火狐</code>才有……希望中国版的开发者多注意一下，反馈这个问题的人虽然不多，但真的会逼死强迫症……</p><blockquote><p><strong><i class="fas fa-lightbulb" style="color:yellow;font-size:50px"></i>&emsp;PS：使用最终解决方法的话就不必尝试第一种方法了，主页也不用设置为空白页了！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firefox </tag>
            
            <tag> 火狐 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程学习笔记（一）</title>
      <link href="posts/540b.html"/>
      <url>posts/540b.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-编程学习笔记（一）"><a href="#C-编程学习笔记（一）" class="headerlink" title="C#编程学习笔记（一）"></a><center>C#编程学习笔记（一）</center></h2><p>C#完全面向对象，一个项目也是一个类，一个功能也可以是一个类</p><p>名称空间（namespace）：类似python中的包，但是也可以不使用using,直接使用名称空间</p><p>using：引入名称空间，类似python中的import，方便管理类，也防止类的名称相同引起的冲突</p><p>ctrl+. 查看使用名称空间</p><p>dll：类库</p><p>dll引用：黑盒引用，看不到源码</p><p>项目引用：白盒引用</p><p>nuget : 引用网上的类库</p><p>一个project可以被多个solution所引用</p><p>添加project：在vs中右击solution，Add，Existing Project(现有项)</p><p>类（或对象）之间的耦合关系。追求高内聚，低耦合</p><p>UML(通用建模语言) 类图：展现类和类之间的关系</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.V8rDT3J.dlD5Yi9Fhtah2z7bRzhoI0e.oB*IP9HzvkfOQo.80xKvb2OSl1qKhDdywo5U7Hk1sgQ0v5TC6A1sMg!/r"></p><p> Program类依赖于Console类。</p><p>从现实世界抽象到类的过程叫建模</p><p>编程唯物主义</p><p>可以定义类变量，之后再实例化，比如 类 变量名；</p><p>com组件是非托管对象，可以不需要.net框架而直接运行，.net框架组件是托管对象，必须有.net框架的支撑才能运行</p><p>暂时理解：C#中的引用是浅拷贝，传递的是引用，修改引用后的值会影响原来的值。</p><p>.NET Framework和.NET Core</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.d4Z38Gni5rX98D2ULUFO3O50dCwr8qL3VReAVB95z5cBG*W2k2GonVpAA9mMXoO7.izgMrHgeib8INrKaqoQV0!/r"></p><p>类的三大成员：属性，方法，事件。</p><p>事件(event)：类或对象通知其他类或对象的机制，为C#所特有，善用事件机制非常重要</p><p>在visual studio中，点击一下某个类，按F1就能进入这个类的定义</p><p>特殊类或对象在成员方面侧重点：</p><ul><li>模型类或对象重在属性，如Entity Framework</li><li>工具类或对象重在方法，如Math，Console</li><li>通知类或对象重在事件，如各种Timer</li></ul><ul><li><p>静态（Static）成员在语义上表示它是“类的成员”</p></li><li><p>实例（非静态）成员在语义上表示它是“对象的成员”</p></li><li><p>绑定（Binging）指的是编译器如何把一个成员与类或对象关联起来（晚绑定：动态语言，早绑定）</p></li><li><p>. 操作符——成员访问操作符</p></li></ul><h2 id="构成C-语言的基本元素"><a href="#构成C-语言的基本元素" class="headerlink" title="构成C#语言的基本元素"></a>构成C#语言的基本元素</h2><p>精通：了解常用的元素的运行机制</p><ul><li>关键字（Keyword）：学习的时候按照逻辑分组来学</li><li>操作符（Operator）</li><li>标识符（Identifier）<ul><li>什么是合法的标识符：下划线或字符开头，非要用关键字可以在前面加上@</li><li>大小写规范</li><li>命名规范：变量名用小驼峰法，类、方法名、命名空间用大驼峰法，方法名应该是一个动词或者动词短语</li></ul></li><li>标点符号</li><li>文本（字面值）<ul><li>整数：长整型后面加个L(64位 long，短整型32位 int)</li><li>实数(小数)：float单精度(32位后缀加F)，double双精度(64位，后缀加D)</li><li>字符： char，用单引号</li><li>字符串：string，用双引号</li><li>布尔：true，false</li><li>空（null）</li></ul></li><li>注释：//, /* */</li></ul><p>上面的五种叫标记（Token）：对于编译器有意义的字符</p><ul><li><p>类型（Type）:也叫数据类型</p><ul><li>```<br>Type myType = type(Forms)；<br>PropertyInfo[] plnfos = myType.GetProperties();  //查看所有的属性<br>MethodInfo[] mlnfos = myType.GetMethods();  //查看所有的方法<br>Console.WriteLine(myType.BaseType.FullName)；  //查看父类名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 变量</span><br><span class="line"></span><br><span class="line">  - 变量的声明：var声明编译器会自动判断出来类型，一般都使用int，double等明确的标识数据类型</span><br><span class="line">  - 变量的使用</span><br><span class="line"></span><br><span class="line">- 方法：处理数据的逻辑，又称“算法”</span><br><span class="line"></span><br><span class="line">  - 方法的声明 </span><br><span class="line"></span><br></pre></td></tr></table></figure>class Calculator<br>{<pre><code> public int Add(int a, int b)  // 加入public，可以在类外面也能访问这个方法，默认是private，只能在类内访问 &#123;      int result = a + b;      return result;      &#125;</code></pre>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 方法的调用</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    Calculator c &#x3D; new Calculator();</span><br><span class="line">    int x &#x3D; c.Add(2, 3);</span><br><span class="line">    Console.WriteLine(x);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>程序 = 数据 + 算法</p></li></ul><p>强类型语言与弱类型语言的：数据受到数据类型的约束，就是强类型语言（java，C#），弱类型：js</p><ul><li>C#为了学习弱类型语言，引入了dynamic关键字，可以不通过强制类型转换就可以进行数据赋值</li></ul><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><ul><li>Stack（栈）简介：给函数调用使用的，比较小</li><li>Stack overflow：栈溢出，死循环会造成栈溢出</li><li>Heap（堆）简介：存储对象，比较大</li><li>使用Performance Monitor查看进程的堆内存使用量，WIN+R运行perfmon, 选择Process(进程)，Private Bytes(不与其他处理共享的，已分配的当前字节数)</li><li>关于内存泄漏：指堆分配内存后没有回收</li><li>内存是以字节为单位，每个字节有自己的地址号</li></ul><h2 id="C-的类型系统"><a href="#C-的类型系统" class="headerlink" title="C#的类型系统"></a>C#的类型系统</h2><p>五大数据类型</p><ul><li><p>类(Classes): 如object, string, Windows，Form，Console</p></li><li><p>结构体(Structures)： 如bool, byte. Int32， Int64，Single</p></li><li><p>枚举(Enumerations)：enum定义的类型，只能从固定的几种定义中选取一种</p></li><li><p>接口(Interfaces)</p></li><li><p>委托(Delegates)</p><p>C#类型的派生谱系</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.eyw4svU6QVlUZebehbmB5gjgWjiNb2IpzjYZPR7fhsqkRx6ZlBCeE6nr96GNqWMGY2VlWzstauNkiv1*H4OYoE!/r"></p><p> 列表定义：List<int> :定义一个列表，里面存int型</p><h2 id="变量、对象和内存"><a href="#变量、对象和内存" class="headerlink" title="变量、对象和内存"></a>变量、对象和内存</h2><p>变量表示了存储位置，变量名对应着变量的值在内存中的存储位置</p><p> 变量有七种：静态变量（属于类）、实例变量（成员变量、字段，默认是实例变量），数组元素，值参数，引用参数（ref定义），输出形参（out定义），局部变量</p><p> 值类型的变量</p><ul><li><p>byte/sbyte/short/ushort：</p><ul><li>byte一个字节(0到255)</li><li>sbyte带符号的一个字节(-128到+127，计算机中负数是以补码存储的，反码：正数反码是本身，负数反码是除符号位的其他位0变1,1变0，补码：正数是本身，负数的补码是:符号位为1,其余各位求反,末位加1)</li><li>ushort：无符号短整型（0~65536），两个字节，高八位(左八位)存在高地址(大一点的地址)</li><li>short：有符号短整型(-32768~32767)</li></ul></li><li><p>值类型没有实例, 所谓的“实例”与变量合二为一。即int x; 而不是Int x =new Int();</p><p>引用类型的变量与实例</p><p>引用类型定义的时候给引用类型分四个字节（栈内存，用于存堆内存的首地址，刚开始全部置0），实例化的时候会根据类中的值类型再次分配相应的大小(分配到堆内存)，然后将栈内存中的的四个字节改成堆内存的首地址，传递实例也是传递的指针。</p></li></ul><p>局部变量：分配在栈内存</p><p>默认值：引用类型中的成员变量在堆内存中分配好之后就会被置0，本地变量不允许未赋值就打印（C#不允许）。</p><p>常量：const修饰</p><p>装箱与拆箱(Boxing &amp; Unboxing)：</p><ul><li><p>装箱：当引用类型发现引用的值不在堆内存中，而是一个栈内存中的值的时候，会把栈内存中的值先copy到堆内存中，然后在写入这个堆内存中的内存地址—–把栈上的值类型的值封装成object类型的实例在堆上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 100;   &#x2F;&#x2F; 存在栈内存</span><br><span class="line">object obj;    &#x2F;&#x2F; 存在栈内存</span><br><span class="line">obj &#x3D; x;        &#x2F;&#x2F; 从x所在的栈内存复制值到堆内存，再存入堆内存的地址</span><br></pre></td></tr></table></figure></li><li><p>拆箱： 把堆上面object类型上实例的值按照要求拆成目标数据类型，然后存到栈上去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 上接拆箱</span><br><span class="line">int y &#x3D; (int)obj;</span><br></pre></td></tr></table></figure><p>现在用的少了，有性能损失。</p><p>对象内存分配遵循以下两条原则： </p></li><li><p>引用类型总是分配到堆内存。 </p></li><li><p>值类型和指针的分配与它们声明位置有关系</p></li></ul><h2 id="方法的定义、调用和调试"><a href="#方法的定义、调用和调试" class="headerlink" title="方法的定义、调用和调试"></a>方法的定义、调用和调试</h2><h3 id="方法的由来"><a href="#方法的由来" class="headerlink" title="方法的由来"></a>方法的由来</h3><ul><li> 方法（method）的前身是C/C++语言的函数（function）</li><li>永远都是类（或结构体）的成员，纯面向对象语言，不能有方法独立于类之外<ul><li>C#语言中函数不可能独立于类之外</li><li>只有作为类（结构体）的成员时才被称为方法</li><li>C++中可以，称为全局函数</li></ul></li><li> 是类的最基本成员之一（另一个是字段–变量）</li><li> 为什么需要方法和函数</li></ul><ol><li>隐藏复杂的逻辑</li><li>把大算法分解为小算法</li><li>复用（reuse）</li></ol><h3 id="方法的声明和调用"><a href="#方法的声明和调用" class="headerlink" title="方法的声明和调用"></a>方法的声明和调用</h3><p> method-declaration(声明)</p><p>　　method-header method-body</p><p>method-header(只列出了常用的)</p><p>　　method-modifiersopt(opt表示非必须) return-type member-name(动词或动词短语) type-parameter-listopt(formal-parameter-listopt即形参)</p><p>method-modifiers:</p><p>　　method-modifier</p><p>　　method-modifiers method-modifier</p><p>method-modifier:</p><p>　　new</p><p>　　public</p><p>　　protected</p><p>　　static</p><p>　　…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static double xxx() &#x2F;&#x2F; 公共方法，可在外部调用，静态方法，由类使用</span><br><span class="line">&#123;</span><br><span class="line">      ;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li><p>构造器(constructor)是类的成员之一</p></li><li><p>狭义的构造器指的是“实例构造器”(instance constructor)</p><ul><li>创建实例的时候就是调用了类的构造器，类的构造器会帮助初始化字段。（类似于python中的__init__）,并允许多个构造器，默认会置0，整型就是0，字符串全是0的话就是null</li></ul></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自定义构造器</span><br><span class="line">   class Student</span><br><span class="line">   &#123;</span><br><span class="line">       public Student(int initId, string initName)   &#x2F;&#x2F; 构造器</span><br><span class="line">       &#123;</span><br><span class="line">           this.ID &#x3D; initId;</span><br><span class="line">           this.Name &#x3D; initName;</span><br><span class="line">       &#125;</span><br><span class="line">       public Student()   &#x2F;&#x2F; 另一个构造器，会根据传入的参数进行自动选择</span><br><span class="line">       &#123;</span><br><span class="line">           this.ID &#x3D; 1;</span><br><span class="line">           this.Name &#x3D; &quot;No name&quot;;  &#x2F;&#x2F;string，引用类型，存引用，去堆中创建</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       public int ID;</span><br><span class="line">       public string Name;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>构造器的内存原理</p><ul><li>如果是带参数的构造器，会先在栈内存中分配四个字节，然后根据参数类型个数分配相应的堆内存，如果参数中有string，则会再开辟一块内存存值，之前分配的存地址</li></ul></li><li><p>方法的重载(Overload)</p><ul><li><p>调用重载方法</p></li><li><p>声明带有重载的方法</p><ul><li>方法签名(method  signature)由方法的名称、类型形参的个数和他的每一个形参(按从左往右的顺序)的类型和种类（值、引用ref或输出out）组成。方法签名不包含返回类型。方法的名字可以一样，签名不能一样。比如Console.WriteLine()有19个签名，按上下键可以切换，一般情况根据传入的参数自动选择。</li></ul></li></ul></li></ul><pre><code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public int Add(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">      return a + b;</span><br><span class="line">&#125;</span><br><span class="line">public double Add(double a, double b)</span><br><span class="line">&#123;</span><br><span class="line">       return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 重载决策（到底调用哪一个重载）：用于给定了参数列表和一组后选函数成员的情况下，选择一个最佳函数成员来实施调用。</code></pre><ul><li><p>如何对方法进程debug</p><ul><li>设置断点（breakpoint）</li><li>观察方法调用时的call stack：查看调用情况</li><li>Step-in(跟踪到被调函数里边去，也叫step-into，F11)，Step-over(不进入子函数，F10), Step-out(退出当前被调函数)</li><li>观察局部变量的值与变化</li></ul></li><li><p>方法的调用与栈</p><ul><li>方法调用时栈内存的分配(主调用与被调用)<ul><li>对stack frame(一个方法在被调用的时候在内存中的布局)的分析：谁调用，谁负责压栈(不同的语言情况不同)</li><li>未细看</li></ul></li></ul></li></ul><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.f8S0o15di0Y6JZTlJ7cErTo*j.scE7382heozyfhwfnoLTqo1UzAJG4isDaXGOMybG0PPu.O1Jg2Wc.Hreuxs8!/r"></p><p> 优先级从上往下一次降低</p><ul><li><ul><li> 操作符不能脱离与它相关联的数据类型，整数的除号和浮点数的符号就不同</li><li>操作符的本质是函数（即算法）的“简记法”，比如想使用加号，只需要把方法名改成关键字operator +</li><li>带有赋值功能的运算符的顺序是由右向左，比如x += y += z，先算y+=z, 再算x +=</li></ul></li><li><p> 点操作符：成员访问操作符，访问外层名称空间中的子名称空间，访问名称空间中的类型，访问类型的静态成员，访问对象的成员</p></li><li><p>[ ]操作符：元素访问操作符，访问集合(数组和字典)中的元素，数组：int[ ] myIntArrat = new int[ ]  {1,2,3}; myIntArray[0];  字典：Dictionary&lt;string, Student&gt; stuDic = new Dictionary&lt;string, Student&gt;();</p></li><li><p>后置++操作符：遇到赋值操作符时， y = x++ 先把x的值传递给y，然后再计算x++</p></li><li><p>typeof操作符：查看一个类型的内部结构（Metadata，元数据），Type t = typeof(int); 可以查看t.Namespace，t.GetMethods[]</p></li><li><p> default操作符：帮助获取一个类型的默认值,int x =  default(int), 结构体类型默认是0，引用类型的默认值是null，枚举类型（enum定义）中返回的是枚举类型中为0的，如果枚举类型没赋值，那就是第一个值，如果没有为0的，那就直接返回0，而非枚举类型中的值。内存块中其实都是0，只是根据不同的类型返回不同的值</p></li><li><p>new操作符：在内存中创建一个类型的实例，并立刻调用这个实例的实例构造器，还可以调用这个实例的初始化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Form myForm &#x3D; new Form() &#123; Text &#x3D; &quot;Hello&quot;&#125;;  &#x2F;&#x2F; 花括号中的就是初始化器 </span><br></pre></td></tr></table></figure></li></ul><ul><li><ul><li>显示变量：明确说明是什么类型，比如Int</li><li>隐式变量：用var定义，由赋值的时候编译器去判断是什么类型</li><li>强类型语言，一旦确认了类型就不能再修改了</li><li>string类型是类，但是不用new操作符，这是个语法糖，其实底层用了 </li></ul></li><li><p> sizeof操作符：在内存中占用的字节 ，也可以获取自定义的类型大小，但是要在unsafe中执行</p></li><li><p>-&gt; 操作符：指针访问操作符，C#中的指针要在unsafe中使用</p></li><li><p> 一元操作符：只有一个操作数</p></li><li><p>&amp;x：取地址操作符，需要不安全的上下文，取数据在内存中的地址</p><p><code>Student* pStu = &amp;stu;</code></p></li><li><p>*x：引用操作符，需要不安全的上下文，拿到内存中地址所指的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*pStu).Score &#x3D; 100;   &#x2F;&#x2F; 加括号是因为点操作符优先级高于引用操作符</span><br></pre></td></tr></table></figure></li><li><p> + - 操作符：正号和负号，通过一个操作数来区分加减号</p></li><li><p>前置++操作符：单独使用时和后置++相同，遇到赋值操作符时，会先算++，然后再赋值</p></li><li><p>(T)x：强制类型转换操作符</p><ul><li><p>隐式类型转换：由编译器区自动判断类型进行转换</p><ul><li>不丢失精度的转换：比如int型向long型转换，小范围向大范围数值转换</li><li>子类向父类的转换：子类向父类传递时，只会看到父类中的方法</li><li>装箱：值类型的实例从栈转移到堆里去</li></ul></li><li><p>显示类型转换</p><ul><li><p>有可能丢失精度（甚至发生错误）的转换，即cast(铸造，高精度向低精度转换)：(T)x，T表示要转到的类型</p></li><li><p>拆箱</p></li><li><p>使用Conver：进行类型转换的工具类，一般情况下string不能向int类型转换，差别太大，就可以使用Conver</p></li><li><p>ToString方法与各数据类型的Parse/TryParse方法:Parse只能解析可以转换的数值，不符合格式的话直接报错，TryParse可以返回一个bool类型，告知是否可以转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">double x &#x3D; double.Parse(&quot;12.0&quot;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自定义类型转换操作符 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static explicit operator Monkey(Stone stone)  &#x2F;&#x2F; 定义了一个类型转换的方法，在Stone类中定义，explicit：显示类型转换</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explicit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; Monkey m &#x3D; new Monkey(); m.Age &#x3D; stone.Age &#x2F; 500; return m; &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>&lt;&lt; : 左移操作符，没有溢出的情况下，左移一位就是乘二，右移一位就是除二</p></li><li><p>is操作符：判断是否是一个类，继承下来的也算是同一个，类都是从object类型派生出来的， 但是派生出来的类和以前的不是同一个，子类属于父类，父类不属于子类</p></li><li><p>as操作符：如果是一个类，就把这个类的引用传递过去进行强制类型转换，如果不是，则传null </p></li><li><p>?：可空类型修饰符，引用类型可以使用空引用表示一个不存在的值，而值类型通常不能表示为空，比如int x = null会报错，这时候可以使用可空操作符 int? x = null; </p></li><li><p>??操作符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int y &#x3D; x ?? 1;  &#x2F;&#x2F; 如果x为null，则y赋值1，不为null，则是x本身</span><br></pre></td></tr></table></figure></li><li><p>?: 操作符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string str &#x3D; x &gt; 10 ? &quot;Pass&quot; : &quot;Failed&quot;;</span><br></pre></td></tr></table></figure></li></ul><p>快捷键：</p><p>for 然后连敲两下tab，会出来for循环的结构</p><p>ctor，然后一下tab，自动构建一个构造器框架</p><p>使用unsafe：菜单栏PROJECT—&gt;OperatorsExample Properties —&gt; Build —&gt; 勾选Allow unsafe code </p><hr><p>文章转载自：<a href="https://www.cnblogs.com/MJ-CAT/p/12019311.html">https://www.cnblogs.com/MJ-CAT/p/12019311.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 编程 </tag>
            
            <tag> Visual Studio </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS编辑器常用快捷键</title>
      <link href="posts/c9bb.html"/>
      <url>posts/c9bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="vscode常用快捷键："><a href="#vscode常用快捷键：" class="headerlink" title="vscode常用快捷键："></a>vscode常用快捷键：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">打开一个新窗口： Ctrl+Shift+N</span><br><span class="line">关闭窗口： Ctrl+Shift+W</span><br><span class="line">新建文件 Ctrl+N</span><br><span class="line">关闭标签 Ctrl+w</span><br><span class="line">历史打开文件之间切换 Ctrl+Tab</span><br><span class="line">切出一个新的编辑器（最多3个）Ctrl+\，也可以按住Ctrl鼠标点击Explorer里的文件名</span><br><span class="line">左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3</span><br><span class="line">3个编辑器之间循环切换 Ctrl+&#96;</span><br><span class="line">编辑器换位置，Ctrl+k然后按Left或Right</span><br></pre></td></tr></table></figure><h2 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">代码行缩进Ctrl+[， Ctrl+]</span><br><span class="line">折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+]</span><br><span class="line">Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行</span><br><span class="line">代码格式化：Shift+Alt+F，或Ctrl+Shift+P后输入format code</span><br><span class="line">修剪空格Ctrl+Shift+X</span><br><span class="line">上下移动一行： Alt+Up 或 Alt+Down</span><br><span class="line">向上向下复制一行： Shift+Alt+Up或Shift+Alt+Down</span><br><span class="line">在当前行下边插入一行shift+Enter</span><br><span class="line">在当前行上方插入一行Ctrl+Enter</span><br><span class="line">快速删除整行：Ctrl+X</span><br><span class="line">快速复制整行：Ctrl+D</span><br></pre></td></tr></table></figure><h2 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">移动到行首：Home</span><br><span class="line">移动到行尾：End</span><br><span class="line">移动到文件结尾：Ctrl+End</span><br><span class="line">移动到文件开头：Ctrl+Home</span><br><span class="line">移动到后半个括号 Ctrl+Shift+]</span><br><span class="line">选中当前行Ctrl+i（双击）</span><br><span class="line">选择从光标到行尾Shift+End</span><br><span class="line">选择从行首到光标处Shift+Home</span><br><span class="line">删除光标右侧的所有字Ctrl+Delete</span><br><span class="line">Shrink&#x2F;expand selection： Shift+Alt+Left和Shift+Alt+Right</span><br><span class="line">Multi-Cursor：可以连续选择多处，然后一起修改，Alt+Click添加cursor或者Ctrl+Alt+Down 或 Ctrl+Alt+Up</span><br><span class="line">同时选中所有匹配的Ctrl+Shift+L</span><br><span class="line">Ctrl+D下一个匹配的也被选中(被我自定义成删除当前行了，见下边Ctrl+Shift+K)</span><br><span class="line">回退上一个光标操作Ctrl+U</span><br></pre></td></tr></table></figure><h2 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">跳转到定义处：F12</span><br><span class="line">定义处缩略图：只看一眼而不跳转过去Alt+F12</span><br><span class="line">列出所有的引用：Shift+F12</span><br><span class="line">同时修改本文件中所有匹配的：Ctrl+F12</span><br><span class="line">重命名：比如要修改一个方法名，可以选中后按F2，输入新的名字，回车，会发现所有的文件都修改过了。</span><br><span class="line">跳转到下一个Error或Warning：当有多个错误时可以按F8逐个跳转</span><br><span class="line">查看diff 在explorer里选择文件右键 Set file to compare，然后需要对比的文件上右键选择Compare with &#39;file_name_you_chose&#39;.</span><br></pre></td></tr></table></figure><h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查找 Ctrl+F</span><br><span class="line">查找替换 Ctrl+H</span><br><span class="line">整个文件夹中查找 Ctrl+Shift+F</span><br><span class="line">显示相关</span><br><span class="line">全屏：F11</span><br><span class="line">zoomIn&#x2F;zoomOut：Ctrl + &#x3D;&#x2F;Ctrl + -</span><br><span class="line">侧边栏显&#x2F;隐：Ctrl+B</span><br><span class="line">预览markdown Ctrl+Shift+V</span><br><span class="line">其他</span><br><span class="line">自动保存：File -&gt; AutoSave ，或者Ctrl+Shift+P，输入 auto</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 编程 </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛玻璃效果</title>
      <link href="posts/1ee3.html"/>
      <url>posts/1ee3.html</url>
      
        <content type="html"><![CDATA[<h2 id="网页毛玻璃效果"><a href="#网页毛玻璃效果" class="headerlink" title="网页毛玻璃效果"></a><center>网页毛玻璃效果</center></h2><hr><h2 id="CSS技巧收集——毛玻璃效果"><a href="#CSS技巧收集——毛玻璃效果" class="headerlink" title="CSS技巧收集——毛玻璃效果"></a>CSS技巧收集——毛玻璃效果</h2><p>先上 <a href="https://darylxyx.github.io/Demo/blur/">demo </a>和 <a href="https://github.com/Darylxyx/css-collection/tree/master/blur">源码</a></p><p>其实毛玻璃的模糊效果技术上比较简单，只是用到了 css 滤镜（filter）中的 blur 属性。但是要做一个好的毛玻璃效果，需要注意很多细节。</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.V2kVg7N8fraMzf5jr*X4wDHwurFAs*pxwT8Rg.EByaHT161FxSWVPhTQQF93a*8WtlcqklZ0E1sM9Hhvutcs4Y!/r"></p><p>比如我们需要将上图中页面中间的文字区域变成毛玻璃效果，首先想到的是给其设置一个透明度，并添加模糊滤镜：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是生成的效果却是下面这样：</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.dQkNZVVYuXfj0QMF3F0zfOVzIx.T7lvn*bNLDJ3TUI*LuBjznagXjIsrJ9b9wkrz.XPuK.7n2.txNpTqGhQX*w!/r"></p><p>从这个失败的例子我们得到两个结论：</p><ol><li><p>对元素直接使用模糊会将其内容全部模糊掉，为了保证文字不会模糊掉需要多一个层单独应用模糊效果。</p></li><li><p>模糊效果并不会应用到其背后的元素上，所以需要使用 content 区域有和背景相同的背景图并进行模糊。</p></li></ol><p>先解决第一个问题：</p><p>多一个层级的方法不通过添加元素，而通过伪元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两点需要注意，由于伪元素不能通过  width:100% 和 height:100% 来继承宿主元素的尺寸，所以通过上述方式来继承 content 的尺寸；为了使伪元素位于  content 的下面这里给其设置 z-index:-1，为不使其隐藏到背景图的后面，这里给 content 设置 z-index:1。</p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.YuB8BM9zdWgEnYA9ClnNGRop6dSPKdaZVokC.*xwFIW0YecX01EPAeE*0ErbXXoS87pIWgaBahNzRT9ctOA64w!/r"></p><p>接下来给 content::after 设置相同的背景图。</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.cx9V8pY7INcyvF2RKCEMrAEa5cIMYoQwJjrTFBsuWdChFqjmik*AGQ69edLAFIbSpcwDXWJySTV*uAUiKzPZyY!/r"></p><p>如上图，即使我们设置了相同的 background-postion 与 background-size，中间部分的图和大背景还是没有拼接成功。</p><p>解决这个问题的方法很简单，只需要添加 background-attachment: fixed 属性，之后为其进行模糊处理。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center top;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(xxx.jpg);</span><br><span class="line">    <span class="attribute">background-position</span>: center top;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.Xgn1scGUYcwRZuJaBQQ9uCuTiijc*pUTfreE8JaVmXq3yiBcysTIExxTUi.onD*KVKhm4g14Sr3UJAKLibGN5U!/r"></p><p>可以看到基本得到了我们想要的效果，美中不足的是在元素的边缘模糊的效果减弱了。为了解决这个问题，我们将伪元素的范围扩大一些，同时为了效果不超出 content 的范围，给其设置 overflow:hidden 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">　　<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">　　<span class="attribute">margin</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.dFJE4gpJgbz5VIofLp1Uc8E99zfpgF9N5RFGvwuWNBCe7q*SEgBQD4MRM.QFu9.TQmx59tN6nYP240pkV0ePKI!/r"></p><p>这样一个比较完美的毛玻璃效果就完成了，无论你如何改变浏览器窗口的尺寸，content 部分的背景图都能很好的与背景拼接，这都归功于 background-attachment 属性。</p><hr><p>本文转载自：<a href="https://www.cnblogs.com/ghost-xyx/p/5677168.html%EF%BC%8C%E5%86%85%E5%AE%B9%E8%AF%A6%E7%BB%86%EF%BC%8C%E5%8F%99%E8%BF%B0%E7%AE%80%E6%B4%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8E%BB%E7%9C%8B%E7%9C%8B%E5%8E%9F%E6%96%87%E3%80%82">https://www.cnblogs.com/ghost-xyx/p/5677168.html，内容详细，叙述简洁，可以去看看原文。</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 美化 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pr自动回避人声</title>
      <link href="posts/6ed0.html"/>
      <url>posts/6ed0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Pr剪辑背景音乐自动回避人声"><a href="#Pr剪辑背景音乐自动回避人声" class="headerlink" title="Pr剪辑背景音乐自动回避人声"></a><center>Pr剪辑背景音乐自动回避人声</center></h2><h3 id="1-导入素材"><a href="#1-导入素材" class="headerlink" title="1.导入素材"></a>1.导入素材</h3><p>首先导入一段背景音乐，和一段对话。</p><h3 id="2-给对话施加“对话”"><a href="#2-给对话施加“对话”" class="headerlink" title="2.给对话施加“对话”"></a>2.给对话施加“对话”</h3><p>选中对话那段音频素材，点击<code>基本声音</code>，选择<code>对话</code>，Pr就会把这段音频素材识别为对话。<br><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.ejK.fV46HY0ctGLmNmRFWH3puKMs2eCpOv6eUkINEWcRdiI.uzvJVDIEnzlVaY2b15kW*RFo2i9pYQS053H1vk!/r" alt="给对话施加“对话”"></p><h3 id="3-给背景音乐施加“音乐”"><a href="#3-给背景音乐施加“音乐”" class="headerlink" title="3.给背景音乐施加“音乐”"></a>3.给背景音乐施加“音乐”</h3><p>再选中背景音乐音频素材，同样的点击<code>基本声音</code>，这次选择<code>音乐</code>，接下来勾选<code>回避</code>，点击<code>生成关键帧</code>，Pr就会自动帮你打好关键帧并且自动回避人声了，但有时候一些参数还要自己微调来达到最佳效果。<img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.fpIFqI1lkn5yXwM0kzLUNAdDvR98I7bmdrcA.9dUNH4E0b*QXC39nYGRPXwhlVfBBUElWvO5MgVtMPqFXvS2uo!/r" width="300px" alt="给背景音乐施加&#34;音乐&#34;"/> </p><h3 id="4-修正参数"><a href="#4-修正参数" class="headerlink" title="4.修正参数"></a>4.修正参数</h3><p>可以看到<code>回避</code>下面一共有三个参数：</p><ul><li><code>敏感度</code>（这个先不管）</li><li><code>降噪幅度</code>（回避人声时，背景音乐降低多少幅度）</li><li><code>响度</code>，<code>响度</code>：响度越大，声音越大（ps.这么解释没问题么…＼(；￢_￢)</li><li><code>淡化</code>（回避的持续时间，这个是指：比如对话中间有停顿5秒钟没有说话<code>淡化</code>数值为5000毫秒以下的话，停顿的这5秒钟之间背景音乐会慢慢升上去。<code>淡化</code>数值大于5000毫秒的话则不会 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pr </tag>
            
            <tag> 剪辑 </tag>
            
            <tag> 视频 </tag>
            
            <tag> 声音处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wiggle表达式控制</title>
      <link href="posts/2483.html"/>
      <url>posts/2483.html</url>
      
        <content type="html"><![CDATA[<h2 id="wiggle表达式控制"><a href="#wiggle表达式控制" class="headerlink" title="wiggle表达式控制"></a><center>wiggle表达式控制</center></h2><p>今天在做一个视频的时候，需要做个画面随音乐鼓点抖动的效果。可以手动K帧，但我嫌麻烦，用了表达式。却不知道如何控制表达式，好在问了群友，找到了答案。</p><p>效果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/psc.gif" alt="抖动"></p><p>简单来说就是希望通过画面能随机抖动来模拟镜头晃动，然后再在某一时刻抖动回到原来的位置，但是写了表达式不能再自己手动K帧，所以只能通过表达式来控制。</p><p>表达式如下：</p><p>在位置属性写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = timeToFrames(time)</span><br><span class="line"><span class="keyword">if</span> (t &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">  [<span class="number">960</span>,<span class="number">540</span>]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> wiggle(<span class="number">12</span>,<span class="number">200</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明变量<code>t</code>，并将<code>timeToFrames(time)</code>的值赋给<code>t</code>，当<code>t&gt;=10</code>，位置属性为<code>[960,540]</code>。<code>timeToFrames(time)</code>是帧数第几帧，<code>wiggle</code>就不解释了，可以去看上一篇文章。所以，这段表达式的意思是：第10帧之前，位置属性每秒抖动12次，每次抖动200个像素。到第10帧和第10帧以后，位置属性为<code>[960,540]</code>。</p><p>但是这个时候第9帧到第10帧的过渡不是很自然，看起来跳帧（画面直接闪现到原来的位置）没有中间帧过渡。所以一般还是用wiggle绑定两个滑块控制，给滑块控制K帧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> After Effects </tag>
            
            <tag> 特效 </tag>
            
            <tag> 表达式 </tag>
            
            <tag> 后期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AE常用的五个表达式</title>
      <link href="posts/f6fe.html"/>
      <url>posts/f6fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="五个最常用的AE表达式"><a href="#五个最常用的AE表达式" class="headerlink" title="五个最常用的AE表达式"></a><center>五个最常用的AE表达式</center></h2><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在制作视频的时候，往往要添加各种效果，每种效果都要单独K帧。效果一多，K帧就非常麻烦且痛苦。经常1秒钟的效果要做半小时。使用表达式的话，就可以极大地提升效率节省时间。并不需要自己一个一个参数去手动K帧了。</p><hr><p>表达式能帮助我们快速地制作一些效果，避免重复造轮子，可以高效产出需要的效果</p><p>注意：请使用英文版ae添加 以免出现表达式错误</p><h2 id="1-弹性表达式-Bounce"><a href="#1-弹性表达式-Bounce" class="headerlink" title="1.弹性表达式 Bounce"></a><strong>1.弹性表达式 Bounce</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/1.gif" alt="弹性"></p><p><strong>代码：</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (numKeys &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">n = nearestKey(time).index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (key(n).time &gt; time)&#123;</span><br><span class="line"></span><br><span class="line">n--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">t = time - key(n).time;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; t &lt; <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">v = velocityAtTime(key(n).time - thisComp.frameDuration/<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">amp = <span class="number">.06</span>;</span><br><span class="line"></span><br><span class="line">freq = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">decay = <span class="number">5.0</span>;</span><br><span class="line"></span><br><span class="line">value v*amp*<span class="built_in">Math</span>.sin(freq*t*<span class="number">2</span>*<span class="built_in">Math</span>.PI)/<span class="built_in">Math</span>.exp(decay*t);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>使用方法：</strong></p><p>在ae中创建有两个关键帧的动画 然后按住alt单击码表激活表达式输入栏，输入以上代码即可 （开启运动模糊效果更好喔）</p><h2 id="2-抖动表达式-wiggle"><a href="#2-抖动表达式-wiggle" class="headerlink" title="2.抖动表达式 wiggle"></a><strong>2.抖动表达式 wiggle</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/2.gif" alt="抖动"></p><p><strong>使用方法：</strong></p><p>wiggle就不用多说了吧，很常用，代码为 wiggle（x，y）</p><p>第一个参数X表示抖动频率 即1秒抖动多少次</p><p>第二个参数表示抖动幅度 具体需要根据你视频片段确定参数</p><p>PS：记得把视频稍微放大一些以减少因为抖动导致的黑边现象</p><h2 id="3-挤压与伸展-效果类似于果冻"><a href="#3-挤压与伸展-效果类似于果冻" class="headerlink" title="3. 挤压与伸展 效果类似于果冻"></a><strong>3. 挤压与伸展 效果类似于果冻</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/3.gif" alt="挤压与伸展"></p><p><strong>代码：</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">maxDev = <span class="number">13</span>; <span class="comment">// max deviation in pixels </span></span><br><span class="line"></span><br><span class="line">spd = <span class="number">30</span>; <span class="comment">//speed of oscillation</span></span><br><span class="line"></span><br><span class="line">decay = <span class="number">1.0</span>; <span class="comment">//how fast it slows down</span></span><br><span class="line"></span><br><span class="line">t = time - inPoint;</span><br><span class="line"></span><br><span class="line">x = scale[<span class="number">0</span>] maxDev*<span class="built_in">Math</span>.sin(spd*t)/<span class="built_in">Math</span>.exp(decay*t);</span><br><span class="line"></span><br><span class="line">y = scale[<span class="number">0</span>]*scale[<span class="number">1</span>]/x;</span><br><span class="line"></span><br><span class="line">[x,y]</span><br></pre></td></tr></table></figure></blockquote><p><strong>使用方法：</strong></p><p>直接施加到你的目标图层上，动画参数可以直接修改上述表达式内的数值。</p><p>请看// 后面的内容，那是对这一行代码的解释，英文不好的童鞋请借助词典。</p><p>这个表达式可以应用在给视频里的点击事件做出回应，突出某个元素效果。</p><h2 id="4-运动拖尾"><a href="#4-运动拖尾" class="headerlink" title="4. 运动拖尾"></a><strong>4. 运动拖尾</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/4.gif" alt="运动拖尾"></p><p><strong>代码：</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delay = <span class="number">5</span>; <span class="comment">//number of frames to delay</span></span><br><span class="line"></span><br><span class="line">d = delay*thisComp.frameDuration*(index - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">thisComp.layer(<span class="number">1</span>).position.valueAtTime(time - d)</span><br></pre></td></tr></table></figure></blockquote><p><strong>使用方法：</strong></p><p>先制作一些运动的关键帧，然后alt点击码表激活表达式输入栏，把上述代码复制进去，接着复制几层你要做运动的图层，如果动画不如意可以直接更改参数 。</p><p>opacityFactor = .75;</p><p>Math.pow(opacityFactor,index - 1)*100</p><p>这两行代码是针对不透明度做拖尾的。直接复制到不透明度的表达式栏里即可</p><h2 id="5-计时-amp-倒计时"><a href="#5-计时-amp-倒计时" class="headerlink" title="5. 计时&amp;倒计时"></a><strong>5. 计时&amp;倒计时</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="http://image.zhaoyinspace.xyz/img/5.gif" alt="计时&amp;倒计时"></p><p><strong>代码：</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//Define time values</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> hour = <span class="built_in">Math</span>.floor((time/<span class="number">60</span>)/<span class="number">60</span>);</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> min = <span class="built_in">Math</span>.floor(time/<span class="number">60</span>);</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> sec = <span class="built_in">Math</span>.floor(time);</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> mili = <span class="built_in">Math</span>.floor(time*<span class="number">60</span>);</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">// Cleaning up the values</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> (mili &gt; <span class="number">59</span>)&#123; mili = mili - sec*<span class="number">60</span>; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> (mili &lt; <span class="number">10</span>)&#123; mili = <span class="string">&#x27;0&#x27;</span> mili; &#125; <span class="keyword">if</span> (sec &gt; <span class="number">59</span>)&#123; sec = sec - min*<span class="number">60</span>; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> (sec &lt; <span class="number">10</span>)&#123; sec = <span class="string">&#x27;0&#x27;</span> sec; &#125; <span class="keyword">if</span> (min &gt;= <span class="number">59</span>)&#123; min = min - hour*<span class="number">60</span>; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> (min &lt; <span class="number">10</span>)&#123; min = <span class="string">&#x27;0&#x27;</span> min; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">// no hour cleanup</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> (hour &lt; <span class="number">10</span>)&#123; hour = <span class="string">&#x27;0&#x27;</span> hour; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//Output</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; hour <span class="string">&#x27; : &#x27;</span> min <span class="string">&#x27; : &#x27;</span> sec <span class="string">&#x27; : &#x27;</span> mili;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p><strong>使用方法：</strong></p><p>在ae里创建一个文字图层，然后在源文本（source text）里键入即可。</p><p>然后他就会以合成的长度开始计时，如果想增加计时的区间只需改变合成长度即可。</p><p>如果你想要制作倒计时效果，需要先把该文字图层预合成下，然后选中图层 右键—&gt;时间—&gt;时间反转 即可。</p><p>当然你可以先把文字的样式制作的好看一些，这不影响内容表达式的实现。如果你只需要显示到分钟，可以在最后一行代码 output 把hour删掉即可。</p><hr><p>本文转载自<a href="https://m.wang1314.com/doc/webapp/topic/20905515.html">https://m.wang1314.com/doc/webapp/topic/20905515.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> After Effects </tag>
            
            <tag> 视频制作 </tag>
            
            <tag> 特效 </tag>
            
            <tag> 合成 </tag>
            
            <tag> 表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg实践学习（三）</title>
      <link href="posts/1fd3.html"/>
      <url>posts/1fd3.html</url>
      
        <content type="html"><![CDATA[<h2 id="ffmpeg实践学习（三）"><a href="#ffmpeg实践学习（三）" class="headerlink" title="ffmpeg实践学习（三）"></a><center>ffmpeg实践学习（三）</center></h2><hr><p>转载自<a href="https://www.cnblogs.com/renhui/p/9223969.html">https://www.cnblogs.com/renhui/p/9223969.html</a>，非常好的关于ffmpeg使用的说明博客。</p><hr><h3 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h3><p>ffmpeg是一个非常强大的工具，它可以转换任何格式的媒体文件，并且还可以用自己的AudioFilter以及VideoFilter进行处理和编辑。有了它，我们就可以对媒体文件做很多我们想做的事情了。</p><h3 id="二、命令行参数"><a href="#二、命令行参数" class="headerlink" title="二、命令行参数"></a>二、命令行参数</h3><h4 id="1-通用参数"><a href="#1-通用参数" class="headerlink" title="1. 通用参数"></a>1. 通用参数</h4><ul><li>-f fmt ： 指定格式</li><li>-i filename：指定输入文件名</li><li>-y：覆盖已有文件</li><li>-t duration：指定时长</li><li>-fs limit_size：设置文件大小的上限</li><li>-ss time_off： 从指定的时间开始</li><li>-re：代表按照时间戳读取或发送数据，尤其在作为推流工具的时候一定要加上该参数，否则ffpmeg会按照最高速率向流媒体不停的发送数据。</li><li>-map：指定输出文件的流映射关系。例如：“-map 1:0 -map 1:1”要求按照第二个输入的文件的第一个流和第二个流写入输出文件。如果没有设置此项，则ffpmeg采用默认的映射关系。</li></ul><h4 id="2-视频参数"><a href="#2-视频参数" class="headerlink" title="2. 视频参数"></a>2. 视频参数</h4><ul><li>-b：指定比特率（bit/s），ffmpeg默认采用的是VBR的，若指定的该参数，则使用平均比特率。</li><li>-bitexact：使用标准比特率。</li><li>-vb：指定视频比特率（bit/s）</li><li>-r rate：帧速率（fps）</li><li>-s size：指定分辨率（320x240）</li><li>-aspect aspect：设置视频长宽比（4:3、16:9或1.33333、1.77777）</li><li>-croptop size：设置顶部切除尺寸（in pixels）</li><li>-cropleft size：设置左切除尺寸（in pixels）</li><li>-cropbottom size：设置地步切除尺寸（in pixels）</li><li>-cropright size：设置右切除尺寸（in pixels）</li><li>-padtop size：设置顶部补齐尺寸（in pixels）</li><li>-padleft size：设置左补齐尺寸（in pixels）</li><li>-padbottom size：设置地步补齐尺寸（in pixels）</li><li>-padright size：设置右补齐尺寸（in pixels）</li><li>-padcolor color：设置补齐颜色</li><li>-vn：取消视频的输出</li><li>-vcodec codec：强制使用codec编码方式</li></ul><h4 id="3-音频参数"><a href="#3-音频参数" class="headerlink" title="3. 音频参数"></a>3. 音频参数</h4><ul><li>-ab：设置比特率（bit/s），对于MP3的格式，想要听到较高品质的声音，建议设置160Kbit/s（单声道80Kbit/s）以上。</li><li>-aq quality：设置音频质量</li><li>-ar ratre：设置音频采样率（Hz）</li><li>-ac channels：设置声道数，1就是单声道，2就是立体声</li><li>-an：取消音频输出</li><li>-acodec codec：强制使用codec编码方式</li><li>-vol volume：设置录制音量大小</li></ul><p>以上就是在日常开发中经常用到的音视频参数及通用参数。下面会针对常见的开发场景进行实践和说明。</p><h3 id="三、实践学习"><a href="#三、实践学习" class="headerlink" title="三、实践学习"></a>三、实践学习</h3><h4 id="1-列出ffmpeg支持的所有格式"><a href="#1-列出ffmpeg支持的所有格式" class="headerlink" title="1. 列出ffmpeg支持的所有格式"></a>1. 列出ffmpeg支持的所有格式</h4><p>相关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -formats</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">File formats:</span><br><span class="line"> D. &#x3D; Demuxing supported</span><br><span class="line"> .E &#x3D; Muxing supported</span><br><span class="line"> --</span><br><span class="line"> D  3dostr          3DO STR</span><br><span class="line">  E 3g2             3GP2 (3GPP2 file format)</span><br><span class="line">  E 3gp             3GP (3GPP file format)</span><br><span class="line"> D  4xm             4X Technologies</span><br><span class="line">  E a64             a64 - video for Commodore 64</span><br><span class="line"> D  aa              Audible AA format files</span><br><span class="line"> D  aac             raw ADTS AAC (Advanced Audio Coding)</span><br><span class="line"> DE ac3             raw AC-3  省略......</span><br><span class="line"> D  xbin            eXtended BINary text (XBIN)</span><br><span class="line"> D  xmv             Microsoft XMV</span><br><span class="line"> D  xpm_pipe        piped xpm sequence</span><br><span class="line"> D  xvag            Sony PS3 XVAG</span><br><span class="line"> D  xwma            Microsoft xWMA</span><br><span class="line"> D  yop             Psygnosis YOP</span><br><span class="line"> DE yuv4mpegpipe    YUV4MPEG pipe</span><br></pre></td></tr></table></figure><h4 id="2-剪切一段媒体文件，可以是音频或者视频文件"><a href="#2-剪切一段媒体文件，可以是音频或者视频文件" class="headerlink" title="2. 剪切一段媒体文件，可以是音频或者视频文件"></a>2. 剪切一段媒体文件，可以是音频或者视频文件</h4><p>相关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i pm.mp4 -ss 00:00:50.0 -codec copy -t 20 output.mp4</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>表示将文件pm.mp4从第50s开始剪切20s的时间，输出到output.mp4中，其中-ss指定偏移时间（time Offset），-t指定的时长（duration）。</p><p>但是直接这样执行命令，固然我们能截取出来音视频的文件，但是当我们播放的时候，我们会发现虽然ffmepg剪切视频，很方便，但是也有很大缺陷：</p><p>(1). 剪切时间点不精确<br>(2). 有时剪切的视频开头有黑屏</p><p>造成这些问题的原因是ffmpeg无法seek到非关键帧上。</p><p>命令层面定位的话就是如果把-ss, -t参数放在-i参数之后，是对输出文件执行的seek操作<br>输入文件会逐帧解码，直到-ss设置的时间点为止，这么操作会很慢，虽然时间点是准确的，但是很容易出现黑屏问题。</p><p>所以：我们优化了一下上面的那个命令，让视频的剪切更加精确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 10 -t 15 -accurate_seek -i pm.mp4 -codec copy output.mp4 </span><br></pre></td></tr></table></figure><p>注意：accurate_seek必须放在-i参数之前。 </p><p>但是，可能又会有人发现，还是存在剪切不准确的现象，那是因为，上述命令只是进行了数据的转封装，会受到关键帧的影响，所以如果需要特别准确的剪切，只能使用ffmpeg进行重新编解码的操作了，命令行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:03.123 -t 10 -c:v libx264 -c:a aac out.mp4</span><br></pre></td></tr></table></figure><p>此命令行相对上面的转封装的剪切来说，速度明显变慢，是因为对视频数据重新编解码了，但是精度相对转封装来说是大大提高了。</p><h4 id="3-提取视频文件中的音频数据，并保存为文件"><a href="#3-提取视频文件中的音频数据，并保存为文件" class="headerlink" title="3. 提取视频文件中的音频数据，并保存为文件"></a>3. 提取视频文件中的音频数据，并保存为文件</h4><p>相关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i pm.mp4 -vn -acodec copy output.m4a</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>将文件pm.mp4的视频流禁用掉（参数为：-vn，如果禁用音频流参数为-an，禁用字母流参数为-sn ）。</p><p>然后将pm.mp4中的音频流的数据封装到output.m4a文件中，音频流的编码格式不变。</p><h4 id="4-将视频中的音频静音，只保留视频"><a href="#4-将视频中的音频静音，只保留视频" class="headerlink" title="4. 将视频中的音频静音，只保留视频"></a>4. 将视频中的音频静音，只保留视频</h4><p>相关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i pm.mp4 -an -vcodec copy output.mp4 </span><br></pre></td></tr></table></figure><p>命令说明：</p><p>将文件pm.mp4的音频流禁用掉（参数为：-an ）。</p><p>然后将pm.mp4中的视频流的数据封装到output.mp4文件中，视频流的编码格式不变。</p><h4 id="5-从mp4文件中抽取视频流导出为裸H264数据："><a href="#5-从mp4文件中抽取视频流导出为裸H264数据：" class="headerlink" title="5. 从mp4文件中抽取视频流导出为裸H264数据："></a>5. 从mp4文件中抽取视频流导出为裸H264数据：</h4><p>相关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i pm.mp4 -an -vcodec copy -bsf:v h264_mp4toannexb output.h264</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>在指令中，我们舍弃了音频数据（-an），视频数据使用mp4toannexb这个bitstreasm filter来转换为原始的H264数据。（注：同一编码也会有不同的封装格式）。</p><p>验证播放：</p><p>可以使用ffplay命令进行尝试播放，如果能播放成功，则说明生效。</p><h4 id="6-将视频推送到流媒体服务器上："><a href="#6-将视频推送到流媒体服务器上：" class="headerlink" title="6. 将视频推送到流媒体服务器上："></a>6. 将视频推送到流媒体服务器上：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i pm.mp4 -acodec copy -vcodec copy -f flv rtmp:&#x2F;&#x2F;127.0.0.1&#x2F;rh&#x2F;mylive </span><br></pre></td></tr></table></figure><p>命令说明： </p><p>将mp4文件的音视频数据的编码格式不变，按照rtmp的方式，将视频推送到流媒体服务器上。</p><h4 id="7-将流媒体服务器上的流dump到本地："><a href="#7-将流媒体服务器上的流dump到本地：" class="headerlink" title="7. 将流媒体服务器上的流dump到本地："></a>7. 将流媒体服务器上的流dump到本地：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i rtmp:&#x2F;&#x2F;127.0.0.1&#x2F;rh&#x2F;mylive -acodec copy -vcodec copy -f flv test.flv</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>将流媒体服务器的数据，不进行转码，通过转封装的方式保存到本地。</p><h4 id="8-给视频添加水印"><a href="#8-给视频添加水印" class="headerlink" title="8. 给视频添加水印"></a>8. 给视频添加水印</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i pm.mp4 -i xxx.png -filter_complex &quot;overlay&#x3D;5:5&quot;  out.mp4</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>使用ffmpeg滤镜功能，将对mp4添加水印。</p><h4 id="9-倒放音视频"><a href="#9-倒放音视频" class="headerlink" title="9. 倒放音视频"></a>9. 倒放音视频</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.视频倒放，无音频</span><br><span class="line">ffmpeg.exe -i inputfile.mp4 -filter_complex [0:v]reverse[v] -map [v] -preset superfast reversed.mp4</span><br><span class="line">&#x2F;&#x2F; 2.视频倒放，音频不变</span><br><span class="line">ffmpeg.exe -i inputfile.mp4 -vf reverse reversed.mp4</span><br><span class="line">&#x2F;&#x2F; 3.音频倒放，视频不变</span><br><span class="line">ffmpeg.exe -i inputfile.mp4 -map 0 -c:v copy -af &quot;areverse&quot; reversed_audio.mp4</span><br><span class="line">&#x2F;&#x2F; 4.音视频同时倒放</span><br><span class="line">ffmpeg.exe -i inputfile.mp4 -vf reverse -af areverse -preset superfast reversed.mp4</span><br></pre></td></tr></table></figure><h4 id="10-将几个MP4视频文件合并为1个视频"><a href="#10-将几个MP4视频文件合并为1个视频" class="headerlink" title="10. 将几个MP4视频文件合并为1个视频."></a>10. 将几个MP4视频文件合并为1个视频.</h4><p>实现思路：</p><p>1.先将MP4文件转化为同样编码形式的ts流(ts流支持concate)</p><p>2.第二步,连接(concate)ts流</p><p>3.最后,把连接好的ts流转化为MP4.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 转换为ts流ffmpeg -i 0.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 0.ts</span><br><span class="line">ffmpeg -i 1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts</span><br><span class="line">ffmpeg -i 2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts</span><br><span class="line">ffmpeg -i 3.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 3.ts</span><br><span class="line">ffmpeg -i 4.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 4.ts</span><br><span class="line">ffmpeg -i 5.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 5.ts</span><br><span class="line">&#x2F;&#x2F; 合并ts流为mp4</span><br><span class="line">ffmpeg -i &quot;concat:0.ts|1.ts|2.ts|3.ts|4.ts|5.ts&quot; -acodec copy -vcodec copy -absf aac_adtstoasc FileName.mp4</span><br></pre></td></tr></table></figure><hr><h5 id="横向合并视频"><a href="#横向合并视频" class="headerlink" title="横向合并视频"></a>横向合并视频</h5><p><code>ffmpeg -i input1.mp4 -i input2.mp4 -lavfi hstack output.mp4</code></p><p>上面的命令虽然可以合并视频，两个视频可以正常播放，但是只保留了前面一个的音频。<br> 下面会介绍怎么避开这个坑。</p><p>注意这时候input1和input2必须同样的高度，如果不一样的高度可以使用-shortest参数来保证同样的高度。</p><p>如果希望合并多个视频，可以使用下面命令行。<br> <code>ffmpeg -i input1.mp4 -i input2.mp4 -i input3.mp4 -lavfi hstack=inputs=3 output.mp4</code><br> 其中input=3表示希望合并的视频的个数</p><h5 id="纵向合并视频"><a href="#纵向合并视频" class="headerlink" title="纵向合并视频"></a>纵向合并视频</h5><p><code>ffmpeg -i input1.mp4 -i input2.mp4 -lavfi vstack output.mp4</code></p><h5 id="网格合并视频"><a href="#网格合并视频" class="headerlink" title="网格合并视频"></a>网格合并视频</h5><p>当多个视频时，还可以合并成网格状，比如2x2，3x3这种。但是视频个数不一定需要是偶数，如果是奇数，可以用黑色图片来占位。</p><p><code>ffmpeg -f lavfi -i color=c=black:s=1280x720 -vframes 1 black.png</code><br> 该命令将创建一张1280*720的图片</p><p>然后就可以使用下面这个命令来合并成网格视频了，如果只有三个视频，可以选择上面创建的黑色图片替代。<br> <code>ffmpeg -i top_left.mp4 -i top_right.mp4 -i bottom_left.mp4 -i bottom_right.mp4 \-lavfi &quot;[0:v][1:v]hstack[top];[2:v][3:v]hstack[bottom];[top][bottom]vstack&quot;-shortest 2by2grid.mp4</code></p><p>上面创建的是正规的2x2网格视频。想象一下，现在只有三个视频，我想把第一个视频摆放在第一行的中间，然后把第二、三个视频摆放在第二行。那么就可以使用下面两个命令了。</p><p><code>ffmpeg -f lavfi -i color=c=black:s=640x720 -vframes 1 black.png</code></p><p><code>ffmpeg -i black.png -i top_center.mp4 -i bottom_left.mp4 -i bottom_right.mp4-lavfi &quot;[0:v][1:v][0:v]hstack=inputs=3[top];[2:v][3:v]hstack[bottom];[top][bottom]vstack&quot;-shortest 3_videos_2x2_grid.mp4</code></p><h5 id="合并音频和视频"><a href="#合并音频和视频" class="headerlink" title="合并音频和视频"></a>合并音频和视频</h5><p><code>ffmpeg -i video.mp4 -i audio.wav  -c:v copy -c:a aac -strict experimental output.mp4</code></p><p>如果视频中已经包含了音频，这个时候还可以替换视频中的音频，使用下面命令行。<br> <code>ffmpeg -i video.mp4 -i audio.wav -c:v copy -c:a aac -strict experimental   -map 0:v:0 -map 1:a:0 output.mp4</code></p><h5 id="合并两个音频"><a href="#合并两个音频" class="headerlink" title="合并两个音频"></a>合并两个音频</h5><p><code>ffmpeg -i input1.mp3 -i input2.mp3 -filter_complex amerge -ac 2 -c:a libmp3lame -q:a 4 output.mp3</code></p><h5 id="获取视频中的音频"><a href="#获取视频中的音频" class="headerlink" title="获取视频中的音频"></a>获取视频中的音频</h5><p><code>ffmpeg -i input.mp4 -vn -y -acodec copy output.m4a</code></p><h5 id="去掉视频中的音频"><a href="#去掉视频中的音频" class="headerlink" title="去掉视频中的音频"></a>去掉视频中的音频</h5><p><code>ffmpeg -i input.mp4 -an output.mp4</code></p><p>引用链接：<a href="https://www.jianshu.com/p/2a824f13b2af">https://www.jianshu.com/p/2a824f13b2af</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 命令行 </tag>
            
            <tag> 视频 </tag>
            
            <tag> ffmpeg </tag>
            
            <tag> 编码 </tag>
            
            <tag> 封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何正确使用BT下载</title>
      <link href="posts/22fd.html"/>
      <url>posts/22fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="本文介绍BT下载的作用和姿势"><a href="#本文介绍BT下载的作用和姿势" class="headerlink" title="本文介绍BT下载的作用和姿势"></a><center>本文介绍BT下载的作用和姿势</center></h2><hr><p>对于国内BT下载用户来说，想必迅雷是再熟悉不过了。事实上我一开始也是彻头彻尾的迅雷用户，当时并不了解BT网络的原理，用迅雷图方便、快捷，相较于传统的BT下载工具，迅雷有它自己的服务器，可以解决死链，坏种的问题。即使某些冷门资源没人做种的情况下，它也能提供正常下载。</p><p>可同样，由于受到服务器的管控，迅雷并不是BT下载最理想的工具。它经常出现：**<del>敏感资源无法下载</del><strong>，~~**因版权原因……</strong>~~等等诸如此类的问题。</p><p>所以我换用了qbittorrent，它没有烦人的广告，没有冗余的功能，没有敏感资源问题，有的，只是最精简的BT下载功能。下面也是以qbittorrent为例进行设置，绝大多数正规BT下载软件设置都大同小异，所以不必担心（笑）。<br><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.Y2Gda.UvwHrLV8RZbQVawTkQxBwFZdQksIYs7Yio9SbyYsTkw3s*iGZE1.v10FJ.y3VuoCEBS5u0e7TIJCeDck!/r.png" alt="qbittorrent">需要注意的是，使用此类BT下载软件要配置公网IP地址，公网IP地址一般家庭宽带是动态地址，可以打电话问问运营商客服。把公网IP地址映射到本机，要进行以下操作：</p><h2 id="1-检查路由器是否设置了公网IP"><a href="#1-检查路由器是否设置了公网IP" class="headerlink" title="1.检查路由器是否设置了公网IP"></a>1.检查路由器是否设置了公网IP</h2><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.TZddmQJtNXOfY7iKBJjhqsoOtePXuiPb*kf28TZHtBkPZ3X7vHqbf.njD2NXhbzAX9m7jxDEJe0CpXKzIMs2RM!/r.png" alt="路由器管理界面"></p><h2 id="2-开启DMZ主机"><a href="#2-开启DMZ主机" class="headerlink" title="2.开启DMZ主机"></a>2.开启DMZ主机</h2><p>这里以华为路由器为例，每个品牌的路由器管理地址或许都不一样，一般会在路由器外壳下面注明。接着找到DMZ主机，把DMZ主机设为自己电脑的IP地址<br><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.aJ9MV9Bvk4ZeFLIZwa9o.hb620JJ.Xjl1ebGvxge5.DZ0usoeVjhocTj8uPmzuAGpmwQHUDC*QJ8yo5pUBgG*c!/r.png" alt="路由器管理界面2"></p><h2 id="3-在BT下载工具中添加trackers（可忽略，非必要步骤）"><a href="#3-在BT下载工具中添加trackers（可忽略，非必要步骤）" class="headerlink" title="3.在BT下载工具中添加trackers（可忽略，非必要步骤）"></a>3.在BT下载工具中添加trackers（可忽略，非必要步骤）</h2><p>这个就相当于把公网IP映射到内网你电脑的IP地址上。你使用的那台电脑就能以公网IP访问互联网资源。现在你就能尽情的享受BT下载带来的好处了，在BT软件中适当增加trackers服务器能提升下载速度。打开 工具→选项<br><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.QybsEPs5k4FdfmrrmJe1xLgeaO5TnPyGLifJ4s9VDzS1m72h4hLkJMvtKxqsGrAfWHmzGjTSBhWUcCM6LxAxdg!/r.png" alt="qbittorrent">找到bittorrent 在图中标记的地方添加trackers服务器地址，并勾选“自动添加以下tracker到新的bittorrent”这里我没有勾选只是做展示<br><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.ST6KtmFVd2R20D5nwNl61fP.tnG4Fazy5T69yY6kL0oB0Ch5q*alXfGizp.XY56fKwmy7qY6lD.fu9rWtAUKao!/r.png" alt="qbittorrent"></p><p>那么，到这里就大功告成了！尽情享受BT下载的乐趣吧~。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BT </tag>
            
            <tag> 下载 </tag>
            
            <tag> qbittorrent </tag>
            
            <tag> 日常 </tag>
            
            <tag> 互联网 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 迅雷 </tag>
            
            <tag> bittorrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>达芬奇导入视频没画面，使用ffmpeg转换视频位深</title>
      <link href="posts/a77d.html"/>
      <url>posts/a77d.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用ffmpeg转换视频位深"><a href="#使用ffmpeg转换视频位深" class="headerlink" title="使用ffmpeg转换视频位深"></a><center>使用ffmpeg转换视频位深</center></h2><hr><p>最近使用达芬奇来剪辑视频，发现10bits的h264视频无法导入，或者导入没有画面只有声音根本识别不到视频流的内容，折腾了很久才确定是10bits的关系。利用ffmpeg将视频位深从10bits降低至8bits成功导入。下面来说说如何将10bits视频转换成8bits</p><hr><h3 id="ffmpeg里面yuv的格式定义了很多种，比如下面："><a href="#ffmpeg里面yuv的格式定义了很多种，比如下面：" class="headerlink" title="ffmpeg里面yuv的格式定义了很多种，比如下面："></a>ffmpeg里面yuv的格式定义了很多种，比如下面：</h3><p>1.PIX_FMT_YUV420P9BE, ///&lt; planar YUV 4:2:0, 13.5bpp, (1 Cr &amp; Cb sample per 2x2 Y samples), big-endian <br>2.PIX_FMT_YUV420P9LE, ///&lt; planar YUV 4:2:0, 13.5bpp, (1 Cr &amp; Cb sample per 2x2 Y samples), little-endian <br>3.PIX_FMT_YUV420P10BE,///&lt; planar YUV 4:2:0, 15bpp, (1 Cr &amp; Cb sample per 2x2 Y samples), big-endian <br>4.PIX_FMT_YUV420P10LE,///&lt; planar YUV 4:2:0, 15bpp, (1 Cr &amp; Cb sample per 2x2 Y samples), little-endian <br>5.PIX_FMT_YUV422P10BE,///&lt; planar YUV 4:2:2, 20bpp, (1 Cr &amp; Cb sample per 2x1 Y samples), big-endian <br>6.PIX_FMT_YUV422P10LE,///&lt; planar YUV 4:2:2, 20bpp, (1 Cr &amp; Cb sample per 2x1 Y samples), little-endian <br>7.PIX_FMT_YUV444P9BE, ///&lt; planar YUV 4:4:4, 27bpp, (1 Cr &amp; Cb sample per 1x1 Y samples), big-endian <br>8.PIX_FMT_YUV444P9LE, ///&lt; planar YUV 4:4:4, 27bpp, (1 Cr &amp; Cb sample per 1x1 Y samples), little-endian <br>9.PIX_FMT_YUV444P10BE,///&lt; planar YUV 4:4:4, 30bpp, (1 Cr &amp; Cb sample per 1x1 Y samples), big-endian <br>10.PIX_FMT_YUV444P10LE,///&lt; planar YUV 4:4:4, 30bpp, (1 Cr &amp; Cb sample per 1x1 Y samples), little-endian <br>11.PIX_FMT_YUV422P9BE, ///&lt; planar YUV 4:2:2, 18bpp, (1 Cr &amp; Cb sample per 2x1 Y samples), big-endian <br>12.PIX_FMT_YUV422P9LE, ///&lt; planar YUV 4:2:2, 18bpp, (1 Cr &amp; Cb sample per 2x1 Y samples), little-endian </p><hr><h2 id="下面来详细说明"><a href="#下面来详细说明" class="headerlink" title="下面来详细说明"></a>下面来详细说明</h2><h3 id="1-打开CMD"><a href="#1-打开CMD" class="headerlink" title="1.打开CMD"></a>1.打开CMD</h3><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.axKZe4yVhW.sID3TN4G9OZzCxrsqkTS.Ze9UUp3sTzzv1nRLjpiOGJKBaUwV3l1uJgnU8njdNQIlwsfurfddy4!/r" alt="打开CMD"></p><h3 id="2-使用查看命令"><a href="#2-使用查看命令" class="headerlink" title="2.使用查看命令"></a>2.使用查看命令</h3><p>进入到视频文件所在的目录，这里我要用视频文件在E:\迅雷下载[Liuyun&amp;VCB-S&amp;ANK-Raws] Kill la Kill [Hi10p_1080p]，所以在CMD中输入命令：<code>cd E:\迅雷下载\[Liuyun&amp;VCB-S&amp;ANK-Raws] Kill la Kill [Hi10p_1080p]</code> 回车之后：<img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.XBRplTNIYOXpb9ocgo12MP3G*AiGtytdCCzQPHaEDPum9Ww8QzUVUBhvgUCfVPj6ztD42qzxzRu1zLqTUkyOWk!/r" alt="切换CMD目录"></p><p>现在可以先用ffprobe命令查看一下视频文件的信息，命令是：<code>ffprobe &quot;文件名&quot;</code>或者：<code>ffmpeg -i &quot;文件名&quot;</code>比如我要查看kill la kill.mp4的信息可以输入：<code>ffprobe &quot;kill la kill.mp4&quot;</code>文件名要用英文的引号括起来防止出错。一定要确保命令行所在目录与视频文件目录一致，否则会报错找不到文件。<img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.QhrV70ev1To0ESRaSL8Zdyr9vCxX3UsOGhCv*8bsd1LOsqCY1EkzQUHrr9bcMbdrkZQMwfnXpJWFVao42aIXcU!/r" alt="命令行"></p><p>如果命令行与视频文件目录不一致的话，可以把上述命令中的文件名替换成<strong>文件路径</strong>，比如<code>E:\迅雷下载\[Liuyun&amp;VCB-S&amp;ANK-Raws] Kill la Kill [Hi10p_1080p]\kill la kill.mp4</code><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.Qh0LWejDLqJvbGd2ghVLMZTZ7OYahgWrfS1rLf7y1X2KvjUlvs2qRKuG7apyWUgy8BrkEe*xs3FLNdrZOScdyU!/r" alt="文件名替换成路径"></p><p>输入命令之后会看到这样的信息：<img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.bsWm3Kbs.3DCwg2ojM3K7Y3Uy37*E2r1Lbxz4ZdkRyY6Z.USneRhbkX2BjwnW4KyCGPiTOlSqiZ3t9JyWvgeQo!/r" alt="输入命令之后">可以看到<font color=orange>Video：h264（High 10）</font>视频编解码器为h264的第10部分。<font color=orange>yuv420p10le</font>：色彩空间为<font color=orange>yuv</font>，色度抽样<font color=orange>4:2:0</font>，扫描方式：<font color=orange>p</font>：逐行扫描，位深：<font color=orange>10bits</font>，<font color=orange>le</font>：little endian，分辨率<font color=orange>1920×1080</font>，比特率<font color=orange>4745kb/s</font>，帧率<font color=orange>23.98fps</font>，音频编解码器为<font color=orange>aac</font>，封装格式<font color=orange>mp4a</font>等等……有用的信息非常多，这里就不一一列举了。</p><h3 id="3-使用命令来更改视频的位深，10bits转换至8bits。"><a href="#3-使用命令来更改视频的位深，10bits转换至8bits。" class="headerlink" title="3.使用命令来更改视频的位深，10bits转换至8bits。"></a>3.使用命令来更改视频的位深，10bits转换至8bits。</h3><p>接下来使用命令<code>-pix_fmt yuv *</code>来设置YUV格式，“*”星号代表上述列表中yuv后面所带的参数，比如：422p8be，而要转换成8bits可以直接输入yuv420p。所以命令是：<code>ffmpeg -i &quot;要转换的视频文件名&quot; -pix_fmt yuv420p &quot;输出的文件名&quot;</code>需要注意每个参数之间都要有一个空格。输完命令之后回车。</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.XGcpaM5ST8abcQKsljYc*DfgeLN*ZQul1nEiCCCWgZwhQXraFBPyKNka33lE3tSN1f6xnv8XLFCckDkI*8Kxb8!/r" alt="正在转码">  <img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.Ugszob1jSbTE*EiWXJ13EuWbjxELYdD2y9lfF.4V4n.afjOaMEBiuTX8vqukxqS*HdoNfWLNyZfcLTI5lbxypo!/r" alt="转码完成"></p><p>现在我们再用ffprobe命令查看一下：<img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.XP*fVnsNyXEAZuVCyWexIXNh63jrkUESZH0p.nTx4CcKx1gQCh1YnuBWJbEp6J7ZvloYTTiY12YSmphIRCGTNw!/r" alt="转码完成之后ffprobe查看"> 可以看到这里只显示yuv420p了没有了后面的10le，已经转换成功了，默认的yuv420p只有8bits。那么，到这里就结束了。</p><p>值得一提的是10bits转换8bits会损失相当一部分画质。</p><p>PS.最后经过测试发现达芬奇个人免费版相较于*<strong>studio**<em>版本</em></strong>阉割***了部分<del>功能</del>导致无法解码10bits、高质量h264、h265。</p><p><img src= "/img/loading.gif" data-lazy-src="http://r.photo.store.qq.com/psc?/V14RBB4W1HO62x/iXs1ae7hmJtTd.wIcSd4.U2SHy*DPrf15JXk7Luto4WZVz*K5ul5JM85ie8VoaJC6Y3V*Lr1yMW*7da9ytxVdmouNPH9YKnj1BbGNi*ahKw!/r" alt="达芬奇界面"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频 </tag>
            
            <tag> ffmpeg </tag>
            
            <tag> 编码 </tag>
            
            <tag> 达芬奇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Sakura</title>
      <link href="posts/22338.html"/>
      <url>posts/22338.html</url>
      
        <content type="html"><![CDATA[<p>hexo-theme-sakura主题 <a href="https://github.com/honjun/hexo-theme-sakura/blob/master/README.md">English document</a></p><p>基于WordPress主题<a href="https://github.com/mashirozx/Sakura/">Sakura</a>修改成Hexo的主题。</p><p><a href="https://sakura.hojun.cn/">demo预览</a></p><p>正在开发中……</p><p><img src= "/img/loading.gif" data-lazy-src="https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg"></p><h2 id="交流群"><a href="#交流群" class="headerlink" title="交流群"></a>交流群</h2><p>若你是使用者，加群QQ: 801511924</p><p>若你是创作者，加群QQ: 194472590</p><h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><ul><li>首页大屏视频</li><li>首页随机封面</li><li>图片懒加载</li><li>valine评论</li><li>fancy-box相册</li><li>pjax支持，音乐不间断</li><li>aplayer音乐播放器</li><li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li></ul><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p><p><a href="https://www.paypal.me/hojuncn">paypal</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/AliPayQR.jpg">Alipay 支付宝</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/WeChanSQ.jpg">WeChat Pay 微信支付</a></p><h2 id="未完善的使用教程"><a href="#未完善的使用教程" class="headerlink" title="未完善的使用教程"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p><h2 id="1、主题下载安装"><a href="#1、主题下载安装" class="headerlink" title="1、主题下载安装"></a>1、主题下载安装</h2><p><a href="https://github.com/honjun/hexo-theme-sakura">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p><p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p><h2 id="2、主题配置"><a href="#2、主题配置" class="headerlink" title="2、主题配置"></a>2、主题配置</h2><h3 id="博客根目录下的-config配置"><a href="#博客根目录下的-config配置" class="headerlink" title="博客根目录下的_config配置"></a>博客根目录下的_config配置</h3><p>站点</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你的站点名</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">站点简介</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure><p>部署</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">你的github仓库地址</span></span><br><span class="line">    <span class="comment"># coding: 你的coding仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>备份 （使用hexo b发布备份到远程仓库）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">backup</span> <span class="string">my</span> <span class="string">blog</span> <span class="string">of</span> <span class="string">https://honjun.github.io/</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="comment"># 你的github仓库地址,备份分支名  （建议新建backup分支）</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/honjun/honjun.github.io.git,backup</span></span><br><span class="line">    <span class="comment"># coding: https://git.coding.net/hojun/hojun.git,backup</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主题目录下的-config配置"><a href="#主题目录下的-config配置" class="headerlink" title="主题目录下的_config配置"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># site name</span></span><br><span class="line"><span class="comment"># 站点名 【改】</span></span><br><span class="line"><span class="attr">prefixName:</span> <span class="string">さくら荘その</span></span><br><span class="line"><span class="attr">siteName:</span> <span class="string">hojun</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># favicon and site master avatar</span></span><br><span class="line"><span class="comment"># 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/custom/avatar.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点url 【改】</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://sakura.hojun.cn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点介绍（或者说是个人签名）【改】</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">Live</span> <span class="string">your</span> <span class="string">life</span> <span class="string">with</span> <span class="string">passion!</span> <span class="string">With</span> <span class="string">some</span> <span class="string">drive!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg</span></span><br><span class="line"><span class="attr">cdn:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启pjax 【选】</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点首页的公告信息 【改】</span></span><br><span class="line"><span class="attr">notice:</span> <span class="string">hexo-Sakura主题已经开源，目前正在开发中...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 懒加载的加载中图片 【选】</span></span><br><span class="line"><span class="attr">lazyloadImg:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点菜单配置 【选】</span></span><br><span class="line"><span class="attr">menus:</span></span><br><span class="line">  <span class="string">首页:</span> &#123; <span class="attr">path:</span> <span class="string">/</span>, <span class="attr">fa:</span> <span class="string">fa-fort-awesome</span> <span class="string">faa-shake</span> &#125;</span><br><span class="line">  <span class="string">归档:</span> &#123; <span class="attr">path:</span> <span class="string">/archives</span>, <span class="attr">fa:</span> <span class="string">fa-archive</span> <span class="string">faa-shake</span>, <span class="attr">submenus:</span> &#123; </span><br><span class="line">    <span class="string">技术:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/技术/</span>, <span class="attr">fa:</span> <span class="string">fa-code</span> &#125;, </span><br><span class="line">    <span class="string">生活:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/生活/</span>, <span class="attr">fa:</span> <span class="string">fa-file-text-o</span> &#125;, </span><br><span class="line">    <span class="string">资源:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/资源/</span>, <span class="attr">fa:</span> <span class="string">fa-cloud-download</span> &#125;, </span><br><span class="line">    <span class="string">随想:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/随想/</span>, <span class="attr">fa:</span> <span class="string">fa-commenting-o</span> &#125;,</span><br><span class="line">    <span class="string">转载:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/转载/</span>, <span class="attr">fa:</span> <span class="string">fa-book</span> &#125;</span><br><span class="line">  &#125; &#125;</span><br><span class="line">  <span class="string">清单:</span> &#123; <span class="attr">path:</span> <span class="string">javascript:;</span>, <span class="attr">fa:</span> <span class="string">fa-list-ul</span> <span class="string">faa-vertical</span>, <span class="attr">submenus:</span> &#123; </span><br><span class="line">    <span class="string">书单:</span> &#123;<span class="attr">path:</span> <span class="string">/tags/悦读/</span>, <span class="attr">fa:</span> <span class="string">fa-th-list</span> <span class="string">faa-bounce</span> &#125;, </span><br><span class="line">    <span class="string">番组:</span> &#123;<span class="attr">path:</span> <span class="string">/bangumi/</span>, <span class="attr">fa:</span> <span class="string">fa-film</span> <span class="string">faa-vertical</span> &#125;, </span><br><span class="line">    <span class="string">歌单:</span> &#123;<span class="attr">path:</span> <span class="string">/music/</span>, <span class="attr">fa:</span> <span class="string">fa-headphones</span> &#125;,</span><br><span class="line">    <span class="string">图集:</span> &#123;<span class="attr">path:</span> <span class="string">/tags/图集/</span>, <span class="attr">fa:</span> <span class="string">fa-photo</span> &#125;</span><br><span class="line">  &#125; &#125;</span><br><span class="line">  <span class="string">留言板:</span> &#123; <span class="attr">path:</span> <span class="string">/comment/</span>, <span class="attr">fa:</span> <span class="string">fa-pencil-square-o</span> <span class="string">faa-tada</span> &#125;</span><br><span class="line">  <span class="string">友人帐:</span> &#123; <span class="attr">path:</span> <span class="string">/links/</span>, <span class="attr">fa:</span> <span class="string">fa-link</span> <span class="string">faa-shake</span> &#125;</span><br><span class="line">  <span class="string">赞赏:</span> &#123; <span class="attr">path:</span> <span class="string">/donate/</span>, <span class="attr">fa:</span> <span class="string">fa-heart</span> <span class="string">faa-pulse</span> &#125;</span><br><span class="line">  <span class="string">关于:</span> &#123; <span class="attr">path:</span> <span class="string">/</span>, <span class="attr">fa:</span> <span class="string">fa-leaf</span> <span class="string">faa-wrench</span> , <span class="attr">submenus:</span> &#123; </span><br><span class="line">    <span class="string">我？:</span> &#123;<span class="attr">path:</span> <span class="string">/about/</span>, <span class="attr">fa:</span> <span class="string">fa-meetup</span>&#125;, </span><br><span class="line">    <span class="string">主题:</span> &#123;<span class="attr">path:</span> <span class="string">/theme-sakura/</span>, <span class="attr">fa:</span> <span class="string">iconfont</span> <span class="string">icon-sakura</span> &#125;,</span><br><span class="line">    <span class="attr">Lab:</span> &#123;<span class="attr">path:</span> <span class="string">/lab/</span>, <span class="attr">fa:</span> <span class="string">fa-cogs</span> &#125;,</span><br><span class="line">  &#125; &#125;</span><br><span class="line">  <span class="string">客户端:</span> &#123; <span class="attr">path:</span> <span class="string">/client/</span>, <span class="attr">fa:</span> <span class="string">fa-android</span> <span class="string">faa-vertical</span> &#125;</span><br><span class="line">  <span class="attr">RSS:</span> &#123; <span class="attr">path:</span> <span class="string">/atom.xml</span>, <span class="attr">fa:</span> <span class="string">fa-rss</span> <span class="string">faa-pulse</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page sort type: -1: newer first，1: older first. 【非】</span></span><br><span class="line"><span class="attr">homePageSortType:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page article shown number) 【非】</span></span><br><span class="line"><span class="attr">homeArticleShown:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景图片 【选】</span></span><br><span class="line"><span class="attr">bgn:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startdash面板 url, title, desc img 【改】</span></span><br><span class="line"><span class="attr">startdash:</span> </span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">url:</span> <span class="string">/theme-sakura/</span>, <span class="attr">title:</span> <span class="string">Sakura</span>, <span class="attr">desc:</span> <span class="string">本站</span> <span class="string">hexo</span> <span class="string">主题</span>, <span class="attr">img:</span> <span class="string">/img/startdash/sakura.md.png</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">url:</span> <span class="string">http://space.bilibili.com/271849279</span>, <span class="attr">title:</span> <span class="string">Bilibili</span>, <span class="attr">desc:</span> <span class="string">博主的b站视频</span>, <span class="attr">img:</span> <span class="string">/img/startdash/bilibili.jpg</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">url:</span> <span class="string">/</span>, <span class="attr">title:</span> <span class="string">hojun的万事屋</span>, <span class="attr">desc:</span> <span class="string">技术服务</span>, <span class="attr">img:</span> <span class="string">/img/startdash/wangshiwu.jpg</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># your site build time or founded date</span></span><br><span class="line"><span class="comment"># 你的站点建立日期 【改】</span></span><br><span class="line"><span class="attr">siteBuildingTime:</span> <span class="number">07</span><span class="string">/17/2018</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交按钮(social)  url, img PC端配置 【改】</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">github:</span> &#123;<span class="attr">url:</span> <span class="string">http://github.com/honjun</span>, <span class="attr">img:</span> <span class="string">/img/social/github.png</span>&#125;</span><br><span class="line">  <span class="attr">sina:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/sina.png</span>&#125;</span><br><span class="line">  <span class="attr">wangyiyun:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/wangyiyun.png</span>&#125;</span><br><span class="line">  <span class="attr">zhihu:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/zhihu.png</span>&#125;</span><br><span class="line">  <span class="attr">email:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/email.svg</span>&#125;</span><br><span class="line">  <span class="attr">wechat:</span> &#123;<span class="attr">url:</span> <span class="string">/#</span>, <span class="attr">qrcode:</span> <span class="string">/img/custom/wechat.jpg</span>, <span class="attr">img:</span> <span class="string">/img/social/wechat.png</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交按钮(msocial)  url, img 移动端配置 【改】</span></span><br><span class="line"><span class="attr">msocial:</span></span><br><span class="line">  <span class="attr">github:</span> &#123;<span class="attr">url:</span> <span class="string">http://github.com/honjun</span>, <span class="attr">fa:</span> <span class="string">fa-github</span>, <span class="attr">color:</span> <span class="number">333</span>&#125;</span><br><span class="line">  <span class="attr">weibo:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">fa:</span> <span class="string">fa-weibo</span>, <span class="attr">color:</span> <span class="string">dd4b39</span>&#125;</span><br><span class="line">  <span class="attr">qq:</span> &#123;<span class="attr">url:</span> <span class="string">https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes</span>, <span class="attr">fa:</span> <span class="string">fa-qq</span>, <span class="attr">color:</span> <span class="string">25c6fe</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】</span></span><br><span class="line"><span class="attr">donate:</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/img/custom/donate/AliPayQR.jpg</span></span><br><span class="line">  <span class="attr">wechat:</span> <span class="string">/img/custom/donate/WeChanQR.jpg</span></span><br><span class="line">  <span class="attr">wechatSQ:</span> <span class="string">/img/custom/donate/WeChanSQ.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】</span></span><br><span class="line"><span class="attr">movies:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/hojun@1.2</span></span><br><span class="line">  <span class="comment"># 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Unbroken.mp4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】</span></span><br><span class="line"><span class="attr">aplayer:</span> </span><br><span class="line">  <span class="attr">id:</span> <span class="number">2660651585</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mini:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">random</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span></span><br><span class="line">  <span class="attr">mutex:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine评论配置【改】</span></span><br><span class="line"><span class="attr">valine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">v_appId:</span> <span class="string">GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz</span></span><br><span class="line"><span class="attr">v_appKey:</span> <span class="string">mgOpfzbkHYqU92CV4IDlAUHQ</span></span><br></pre></td></tr></table></figure><h2 id="分类页和标签页配置"><a href="#分类页和标签页配置" class="headerlink" title="分类页和标签页配置"></a>分类页和标签页配置</h2><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg"></p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p><img src= "/img/loading.gif" data-lazy-src="https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg"></p><p>配置项在\themes\Sakura\languages\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#category</span></span><br><span class="line"><span class="comment"># 按分类名创建</span></span><br><span class="line"><span class="string">技术:</span></span><br><span class="line">    <span class="comment">#中文标题</span></span><br><span class="line">    <span class="attr">zh:</span> <span class="string">野生技术协会</span> </span><br><span class="line">    <span class="comment"># 英文标题</span></span><br><span class="line">    <span class="attr">en:</span> <span class="string">Geek</span> <span class="string">–</span> <span class="string">Only</span> <span class="string">for</span> <span class="string">Love</span></span><br><span class="line">    <span class="comment"># 封面图片</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg</span></span><br><span class="line"><span class="string">生活:</span></span><br><span class="line">    <span class="attr">zh:</span> <span class="string">生活</span></span><br><span class="line">    <span class="attr">en:</span> <span class="string">live</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tag</span></span><br><span class="line"><span class="comment"># 标签名即是标题</span></span><br><span class="line"><span class="string">悦读:</span></span><br><span class="line">    <span class="comment"># 封面图片</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg</span></span><br></pre></td></tr></table></figure><h2 id="单页面封面配置"><a href="#单页面封面配置" class="headerlink" title="单页面封面配置"></a>单页面封面配置</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg"><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: comment</span><br><span class="line">date: 2018-12-20 23:13:48</span><br><span class="line">keywords: 留言板</span><br><span class="line">summary: </span><br><span class="line">comments: true</span><br><span class="line"><span class="section"># 在这里配置单页面头部图片，自定义替换哦~</span></span><br><span class="line">photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="单页面配置"><a href="#单页面配置" class="headerlink" title="单页面配置"></a>单页面配置</h2><h3 id="番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">bangumi</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">bangumi</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-02-10 21:32:48</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">summary:</span></span><br><span class="line"><span class="attr">bangumis:</span></span><br><span class="line">  <span class="comment"># 番组图片</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class="line">  <span class="comment"># 番组名</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class="line">  <span class="comment"># 追番状态 （追番ing/已追完）</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">已追完</span></span><br><span class="line">  <span class="comment"># 追番进度</span></span><br><span class="line">    <span class="attr">progress:</span> <span class="number">100</span></span><br><span class="line">  <span class="comment"># 番剧日文名称</span></span><br><span class="line">    <span class="attr">jp:</span> <span class="string">さよならの朝に約束の花をかざろう</span></span><br><span class="line">  <span class="comment"># 放送时间</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">放送时间:</span> <span class="number">2018-02-24 </span><span class="string">SUN.</span></span><br><span class="line">  <span class="comment"># 番剧介绍</span></span><br><span class="line">    <span class="attr">desc:</span>  <span class="string">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">已追完</span></span><br><span class="line">    <span class="attr">progress:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">jp:</span> <span class="string">さよならの朝に約束の花をかざろう</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">放送时间:</span> <span class="number">2018-02-24 </span><span class="string">SUN.</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">links</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">links</span></span><br><span class="line"><span class="comment"># 创建日期，可以改下</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-12-19 23:11:06</span> </span><br><span class="line"><span class="comment"># 图片上的标题，自定义修改</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">友人帐</span> </span><br><span class="line"><span class="attr">summary:</span> </span><br><span class="line"><span class="comment"># true/false 开启/关闭评论</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span> </span><br><span class="line"><span class="comment"># 页面头部图片，自定义修改</span></span><br><span class="line"><span class="attr">photos:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg</span> </span><br><span class="line"><span class="comment"># 友链配置</span></span><br><span class="line"><span class="attr">links:</span> </span><br><span class="line">  <span class="comment"># 类型分组</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">个人项目</span></span><br><span class="line">    <span class="comment"># 类型简介</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">充分说明这家伙是条咸鱼</span> <span class="string">&lt;</span> <span class="string">(￣︶￣)&gt;</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="comment"># 友链链接</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">    <span class="comment"># 友链头像</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">    <span class="comment"># 友链站点名</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">    <span class="comment"># 友链介绍  下面雷同</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">  <span class="comment"># 类型分组...</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">小伙伴们</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">欢迎交换友链</span> <span class="string">ꉂ(ˊᗜˋ)</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="写文章配置"><a href="#写文章配置" class="headerlink" title="写文章配置"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bili video<span class="emphasis">_id [page] %&#125;</span></span><br></pre></td></tr></table></figure><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md">hexo-tag-bili</a>。</p><p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fb<span class="emphasis">_img src [caption] %&#125;</span></span><br></pre></td></tr></table></figure><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md">hexo-tag-fancybox_img</a></p><h2 id="还有啥，一时想不起来……"><a href="#还有啥，一时想不起来……" class="headerlink" title="还有啥，一时想不起来……"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 悦读 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
